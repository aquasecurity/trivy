{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"commercial/compare/","title":"Aqua Security is the home of Trivy","text":"<p>Trivy is proudly maintained by Aqua Security. If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering. In this page you can find a high level comparison between Trivy Open Source and Aqua's commercial product. If you'd like to learn more or request a demo, click here to contact us.</p>"},{"location":"commercial/compare/#user-experience","title":"User experience","text":"Feature Trivy OSS Aqua Interface CLI tool CLI tool  Enterprise-grade web application  SaaS or on-prem Search &amp; Discover - Easily search for security issues across all workloads and infrastructure in your organization  Visually discover risks across your organization User management - Multi account  Granular permissions (RBAC)  Single Sign On (SSO) Support Some skills required for setup and integration  Best effort community support Personal onboarding by Aqua Customer Success  SLA backed professional support Scalability &amp; Availability Single scan at a time Centralized scanning service supports concurrent scans efficiently  Highly available production grade architecture Rate limiting Assets hosted on public free infrastructure and could be rate limited Assets hosted on Aqua infrastructure and does not have limitations"},{"location":"commercial/compare/#vulnerability-scanning","title":"Vulnerability scanning","text":"Feature Trivy OSS Aqua Vulnerabilities sources Based on open source vulnerability feeds Based on open source and commercial vulnerability feeds New Vulnerabilities SLA No SLA Commercial level SLA Package managers Find packages in lock files Find packages in lock files or reconstructed lock files Vulnerability management Manually ignore specific vulnerabilities by ID or property Advanced vulnerability management solution  Vulnerability tracking and suppression  Incident lifecycle management Vulnerability prioritization Manually triage by severity Multiple prioritization tools:   Accessibility of the affected resources  Exploitability of the vulnerability  Open Source packages health and trustworthiness score  Affected image layers Reachability analysis - Analyze source code to eliminate vulnerabilities of unused dependencies Contextual vulnerabilities - Reduce irrelevant vulnerabilities based on environmental factors (e.g. Spring4Shell not relevant due to JDK version) Compiled binaries Find embedded dependencies in Go and Rust binaries  Find SBOM by hash in public Sigstore In addition, identify popular applications"},{"location":"commercial/compare/#container-scanning","title":"Container scanning","text":"Feature Trivy OSS Aqua Windows containers - Support scanning windows containers Scan container registries - Connect to any container registries and automatically scan it Private registries Standard registry authenticationCloud authentication with ECR, GCR, ACR Supports registry specific authentication schemes Layer cache Local cache directory Scalable Cloud cache"},{"location":"commercial/compare/#advanced-scanning","title":"Advanced scanning","text":"Feature Trivy OSS Aqua Malware scanning - Scan container images for malware Sandbox scanning - Use DTA (Dynamic threat analysis) to run and test container images' behavior to detect sophisticated threats SAST (code scanning) - Analyze source code for security issues and vulnerabilities"},{"location":"commercial/compare/#policy-and-enforcement","title":"Policy and enforcement","text":"Feature Trivy OSS Aqua Kubernetes admission - Validating Kubernetes Admission based on automatic or user defined policy CI/CD policies Can fail the entire build on any finding Granular policies to fail builds based on custom criteria Container engine - Block incompliant images from running at container engine level Block vulnerable packages - vShield \u2013 monitor and block usage of vulnerable packages"},{"location":"commercial/compare/#secrets-scanning","title":"Secrets scanning","text":"Feature Trivy OSS Aqua Detected patterns Basic patterns Advanced patterns Leaked secrets validation - Automatically checks if leaked secrets are valid and usable"},{"location":"commercial/compare/#iaccspm-scanning","title":"IaC/CSPM scanning","text":"Feature Trivy OSS Aqua Infrastructure as Code (IaC) Many popular languages as detailed here In addition, Build Pipeline configuration scanning Checks customization Create custom checks with Rego Create custom checks in no-code interface  Customize existing checks with organizational preferences Cloud scanning AWS (subset of services) AWS, Azure, GCP, Alibaba Cloud, Oracle Cloud Compliance frameworks CIS, NSA, vendor guides More than 25 compliance programs Custom compliance Create in YAML Create in a web UI Remediation advice Basic AI powered specialized remediation guides"},{"location":"commercial/compare/#kubernetes-scanning","title":"Kubernetes scanning","text":"Feature Trivy OSS Aqua Scan initiation CLI / Kubernetes Operator Kubernetes Operator / Management web application Results consumption kubectl / CRD / Prometheus exporter In addition, Advanced UI dashboards, Automatic notifications and incident management flows Cluster discovery Kubeconfig Automatic discovery thorough cloud onboarding Workload image scanning Scanning in cluster, requires capacity planning Scanning offloaded to Aqua service, little impact on scanned clusters Cluster scanning CIS, NSA, PSS More than 25 compliance programs Scope Single cluster Multi cluster, Cloud relationship Scalability Reports limited by in-cluster etcd storage (size and number of reports) Cloud-based storage (unlimited scalability)"},{"location":"commercial/contact/","title":"Contact Us","text":""},{"location":"community/principles/","title":"Trivy Project Principles","text":"<p>This document outlines the guiding principles and governance framework for the Trivy project.</p>"},{"location":"community/principles/#core-principles","title":"Core Principles","text":"<p>Trivy is a security scanner focused on static analysis and designed with simplicity and security at its core. All new proposals to the project must adhere to the following principles.</p>"},{"location":"community/principles/#static-analysis-no-runtime-required","title":"Static Analysis (No Runtime Required)","text":"<p>Trivy operates without requiring container or VM image startups, eliminating the need for Docker or similar runtimes, except for scanning images stored within a container runtime. This approach enhances security and efficiency by minimizing dependencies.</p>"},{"location":"community/principles/#external-dependency-free-single-binary","title":"External Dependency Free (Single Binary)","text":"<p>Operating as a single binary, Trivy is independent of external environments and avoids executing external OS commands or processes. If specific functionality, like Maven's, is needed, Trivy opts for internal reimplementations or processing outputs of the tool without direct execution of external tools.</p> <p>This approach obviously requires more effort but significantly reduces security risks associated with executing OS commands and dependency errors due to external environment versions. Simplifying the scanner's use by making it operational immediately upon binary download facilitates easier initiation of scans.</p>"},{"location":"community/principles/#no-setup-required","title":"No Setup Required","text":"<p>Trivy must be ready to use immediately after installation. It's unacceptable for Trivy not to function without setting up a database or writing configuration files by default. Such setups should only be necessary for users requiring specific customizations.</p> <p>Security often isn't a top priority for many organizations and can be easily deferred. Trivy aims to lower the barrier to entry by simplifying the setup process, making it easier for users to start securing their projects.</p>"},{"location":"community/principles/#security-focus","title":"Security Focus","text":"<p>Trivy prioritizes the identification of security issues, excluding features unrelated to security, such as performance metrics or content listings of container images. It can, however, produce and output intermediate representations like SBOMs for comprehensive security assessments.</p> <p>Trivy serves as a tool with opinions on security, used to warn users about potential issues.</p>"},{"location":"community/principles/#detecting-unintended-states","title":"Detecting Unintended States","text":"<p>Trivy is designed to detect unintended vulnerable states in projects, such as the use of vulnerable versions of dependencies or misconfigurations in Infrastructure as Code (IaC) that may unintentionally expose servers to the internet. The focus is on identifying developer mistakes or undesirable states, not on detecting intentional attacks, such as malicious images and malware.</p>"},{"location":"community/principles/#out-of-scope-features","title":"Out of Scope Features","text":"<p>Aqua Security offers a premium version with several features not available in the open-source Trivy project.  While detailed information can be found here, it's beneficial to highlight specific functionalities frequently inquired about:</p>"},{"location":"community/principles/#runtime-security","title":"Runtime Security","text":"<p>As mentioned in the Core Principles, Trivy is a static analysis security scanner, making runtime security outside its scope. Runtime security needs are addressed by Tracee or the commercial version of Aqua Security.</p>"},{"location":"community/principles/#intentional-attacks","title":"Intentional Attacks","text":"<p>As mentioned in the Core Principles, detection of intentional attacks, such as malware or malicious container images, is not covered by Trivy and is supported in the commercial version.</p>"},{"location":"community/principles/#user-interface","title":"User Interface","text":"<p>Trivy primarily operates via CLI for displaying results, with a richer UI available in the commercial version.</p>"},{"location":"community/contribute/discussion/","title":"Discussions","text":"<p>Thank you for taking interest in contributing to Trivy!</p> <p>Trivy uses GitHub Discussion for bug reports, feature requests, and questions. If maintainers decide to accept a new feature or confirm that it is a bug, they will close the discussion and create a GitHub Issue associated with that discussion.</p> <ul> <li>Feel free to open discussions for any reason. When you open a new discussion, you'll have to select a discussion category as described below.</li> <li>Please spend a small amount of time giving due diligence to the issue/discussion tracker. Your discussion might be a duplicate. If it is, please add your comment to the existing issue/discussion.</li> <li>Remember that users might search for your issue/discussion in the future, so please give it a meaningful title to help others.</li> <li>The issue should clearly explain the reason for opening, the proposal if you have any, and any relevant technical information.</li> </ul> <p>There are 4 categories:</p> <ul> <li>\ud83d\udca1 Ideas<ul> <li>Share ideas for new features</li> </ul> </li> <li>\ud83d\udd0e False Detection<ul> <li>Report false positives/negatives</li> </ul> </li> <li>\ud83d\udc1b Bugs<ul> <li>Report something that is not working as expected</li> </ul> </li> <li>\ud83d\ude4f Q&amp;A<ul> <li>Ask the community for help</li> </ul> </li> </ul> <p>Note</p> <p>If you find any false positives or false negatives, please make sure to report them under the \"False Detection\" category, not \"Bugs\".</p>"},{"location":"community/contribute/discussion/#false-detection","title":"False detection","text":"<p>Trivy depends on multiple data sources. Sometime these databases contain mistakes.</p> <p>If Trivy can't detect any CVE-IDs or shows false positive result, at first please follow the next steps:</p> <ol> <li>Run Trivy with <code>-f json</code> that shows data sources.</li> <li>According to the shown data source, make sure that the security advisory in the data source is correct.</li> </ol> <p>If the data source is correct and Trivy shows wrong results, please raise an issue on Trivy.</p>"},{"location":"community/contribute/discussion/#github-advisory-database","title":"GitHub Advisory Database","text":"<p>Visit here and search CVE-ID.</p> <p>If you find a problem, it'll be nice to fix it: How to contribute to a GitHub security advisory</p>"},{"location":"community/contribute/discussion/#gitlab-advisory-database","title":"GitLab Advisory Database","text":"<p>Visit here and search CVE-ID.</p> <p>If you find a problem, it'll be nice to fix it: Create an issue to GitLab Advisory Database</p>"},{"location":"community/contribute/discussion/#red-hat-cve-database","title":"Red Hat CVE Database","text":"<p>Visit here and search CVE-ID.</p>"},{"location":"community/contribute/issue/","title":"Issues","text":"<p>Thank you for taking interest in contributing to Trivy!</p> <p>Trivy uses GitHub Discussion for bug reports, feature requests, and questions.</p> <p>Warning</p> <p>Issues created by non-maintainers will be immediately closed.</p>"},{"location":"community/contribute/pr/","title":"Pull Requests","text":"<p>Thank you for taking interest in contributing to Trivy!</p> <ol> <li>Every Pull Request should have an associated GitHub issue link in the PR description. Note that issues are created by Trivy maintainers based on feedback provided in a GitHub discussion. Please refer to the issue and discussion pages for explanation about this process. If you think your change is trivial enough, you can skip the issue and instead add justification and explanation in the PR description.</li> <li>Your PR is more likely to be accepted if it focuses on just one change.</li> <li>There's no need to add or tag reviewers.</li> <li>If a reviewer commented on your code or asked for changes, please remember to respond with comment. Do not mark discussion as resolved. It's up to reviewer to mark it resolved (in case if suggested fix addresses problem properly). PRs with unresolved issues should not be merged (even if the comment is unclear or requires no action from your side).</li> <li>Please include a comment with the results before and after your change.</li> <li>Your PR is more likely to be accepted if it includes tests (We have not historically been very strict about tests, but we would like to improve this!).</li> <li>If your PR affects the user experience in some way, please update the README.md and the CLI help accordingly.</li> </ol>"},{"location":"community/contribute/pr/#development","title":"Development","text":"<p>Install the necessary tools for development by following their respective installation instructions.</p> <ul> <li>Go</li> <li>Mage</li> </ul>"},{"location":"community/contribute/pr/#build","title":"Build","text":"<p>After making changes to the Go source code, build the project with the following command:</p> <pre><code>$ mage build\n$ ./trivy -h\n</code></pre>"},{"location":"community/contribute/pr/#lint","title":"Lint","text":"<p>You must pass the linter checks:</p> <pre><code>$ mage lint:run\n</code></pre> <p>Additionally, you need to have run <code>go mod tidy</code>, so execute the following command as well:</p> <pre><code>$ mage tidy\n</code></pre> <p>To autofix linters use the following command: <pre><code>$ mage lint:fix\n</code></pre></p>"},{"location":"community/contribute/pr/#unit-tests","title":"Unit tests","text":"<p>Your PR must pass all the unit tests. You can test it as below.</p> <pre><code>$ mage test:unit\n</code></pre>"},{"location":"community/contribute/pr/#integration-tests","title":"Integration tests","text":"<p>Your PR must pass all the integration tests. You can test it as below.</p> <pre><code>$ mage test:integration\n</code></pre>"},{"location":"community/contribute/pr/#protocol-buffers","title":"Protocol Buffers","text":"<p>If you update protobuf files (<code>.proto</code>), you need to regenerate the Go code:</p> <pre><code>$ mage protoc:generate\n</code></pre> <p>You can also format and lint protobuf files:</p> <pre><code>$ mage protoc:fmt     # Format protobuf files\n$ mage protoc:lint    # Lint protobuf files\n$ mage protoc:breaking # Check for breaking changes against main branch\n</code></pre>"},{"location":"community/contribute/pr/#documentation","title":"Documentation","text":"<p>If you update CLI flags, you need to generate the CLI references. The test will fail if they are not up-to-date.</p> <pre><code>$ mage docs:generate\n</code></pre> <p>You can build the documents as below and view it at http://localhost:8000.</p> <pre><code>$ mage docs:serve\n</code></pre>"},{"location":"community/contribute/pr/#title","title":"Title","text":"<p>It is not that strict, but we use the title conventions in this repository. Each commit message doesn't have to follow the conventions as long as it is clear and descriptive since it will be squashed and merged.</p>"},{"location":"community/contribute/pr/#format-of-the-title","title":"Format of the title","text":"<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n</code></pre> <p>The <code>type</code> and <code>scope</code> should always be lowercase as shown below.</p> <p>Allowed <code>&lt;type&gt;</code> values:</p> <ul> <li>feat for a new feature for the user, not a new feature for build script. Such commit will trigger a release bumping a MINOR version.</li> <li>fix for a bug fix for the user, not a fix to a build script. Such commit will trigger a release bumping a PATCH version.</li> <li>perf for performance improvements. Such commit will trigger a release bumping a PATCH version.</li> <li>docs for changes to the documentation.</li> <li>style for formatting changes, missing semicolons, etc.</li> <li>refactor for refactoring production code, e.g. renaming a variable.</li> <li>test for adding missing tests, refactoring tests; no production code change.</li> <li>build for updating build configuration, development tools or other changes irrelevant to the user.</li> <li>chore for updates that do not apply to the above, such as dependency updates.</li> <li>ci for changes to CI configuration files and scripts</li> <li>revert for revert to a previous commit</li> </ul> <p>Allowed <code>&lt;scope&gt;</code> values:</p> <p>checks:</p> <ul> <li>vuln</li> <li>misconf</li> <li>secret</li> <li>license</li> </ul> <p>mode:</p> <ul> <li>image</li> <li>fs</li> <li>repo</li> <li>sbom</li> <li>k8s</li> <li>server</li> <li>aws</li> <li>vm</li> <li>plugin</li> </ul> <p>os:</p> <ul> <li>alpine</li> <li>redhat</li> <li>alma</li> <li>rocky</li> <li>azure</li> <li>oracle</li> <li>debian</li> <li>ubuntu</li> <li>amazon</li> <li>suse</li> <li>photon</li> <li>distroless</li> </ul> <p>language:</p> <ul> <li>ruby</li> <li>php</li> <li>python</li> <li>nodejs</li> <li>rust</li> <li>dotnet</li> <li>java</li> <li>go</li> <li>elixir</li> <li>dart</li> <li>julia</li> </ul> <p>vuln:</p> <ul> <li>os</li> <li>lang</li> </ul> <p>config:</p> <ul> <li>kubernetes</li> <li>dockerfile</li> <li>terraform</li> <li>cloudformation</li> </ul> <p>container</p> <ul> <li>docker</li> <li>podman</li> <li>containerd</li> <li>oci</li> </ul> <p>cli:</p> <ul> <li>cli</li> <li>flag</li> </ul> <p>SBOM:</p> <ul> <li>cyclonedx</li> <li>spdx</li> <li>purl</li> </ul> <p>others:</p> <ul> <li>helm</li> <li>report</li> <li>db</li> <li>parser</li> <li>deps</li> </ul> <p>The <code>&lt;scope&gt;</code> can be empty (e.g. if the change is a global or difficult to assign to a single component), in which case the parentheses are omitted.</p> <p>Breaking changes</p> <p>A PR, introducing a breaking API change, needs to append a <code>!</code> after the type/scope.</p>"},{"location":"community/contribute/pr/#example-titles","title":"Example titles","text":"<pre><code>feat(alma): add support for AlmaLinux\n</code></pre> <pre><code>feat(vuln)!: delete the existing CLI flag\n</code></pre> <pre><code>fix(oracle): handle advisories with ksplice versions\n</code></pre> <pre><code>docs(misconf): add comparison with Conftest and TFsec\n</code></pre> <pre><code>chore(deps): bump go.uber.org/zap from 1.19.1 to 1.20.0\n</code></pre> <p>NOTE: please do not use <code>chore(deps): update fanal</code> and something like that if you add new features or fix bugs in Trivy-related projects. The PR title should describe what the PR adds or fixes even though it just updates the dependency in Trivy.</p>"},{"location":"community/contribute/pr/#commits","title":"Commits","text":""},{"location":"community/contribute/pr/#understand-where-your-pull-request-belongs","title":"Understand where your pull request belongs","text":"<p>Trivy is composed of several repositories that work together:</p> <ul> <li>Trivy is the client-side, user-facing, command line tool.</li> <li>vuln-list is a vulnerability database, aggregated from different sources, and normalized for easy consumption. Think of this as the \"server\" side of the trivy command line tool. There should be no pull requests to this repo</li> <li>vuln-list-update is the code that maintains the vuln-list database.</li> <li>trivy-db maintains the vulnerability database pulled by Trivy CLI.</li> <li>go-dep-parser is a library for parsing lock files such as package-lock.json and Gemfile.lock.</li> </ul>"},{"location":"community/contribute/checks/overview/","title":"Contribute Rego Checks","text":"<p>The following guide provides an overview of contributing checks to the default checks in Trivy. </p> <p>All of the checks in Trivy can be found in the trivy-checks repository on GitHub. Before you begin writing a check, ensure:</p> <ol> <li>The check does not already exist as part of the default checks in the trivy-checks repository.</li> <li>The pull requests in the trivy-checks repository to see  whether someone else is already contributing the check that you wanted to add. </li> <li>The issues in Trivy to see whether any specific checks are missing in Trivy that you can contribute.</li> </ol> <p>If anything is unclear, please start a discussion and we will do our best to help.</p>"},{"location":"community/contribute/checks/overview/#check-structure","title":"Check structure","text":"<p>Checks are written in Rego and follow a particular structure in Trivy. Below is an example check for AWS:</p> <pre><code># METADATA\n# title: \"RDS IAM Database Authentication Disabled\"\n# description: \"Ensure IAM Database Authentication is enabled for RDS database instances to manage database access\"\n# scope: package\n# schemas:\n# - input: schema[\"aws\"]\n# related_resources:\n# - https://docs.aws.amazon.com/neptune/latest/userguide/iam-auth.html\n# custom:\n#   id: AVD-AWS-0176\n#   avd_id: AVD-AWS-0176\n#   provider: aws\n#   service: rds\n#   severity: MEDIUM\n#   short_code: enable-iam-auth\n#   recommended_action: \"Modify the PostgreSQL and MySQL type RDS instances to enable IAM database authentication.\"\n#   input:\n#     selector:\n#     - type: cloud\n#       subtypes:\n#         - service: rds\n#           provider: aws\n\npackage builtin.aws.rds.aws0176\n\ndeny[res] {\n    instance := input.aws.rds.instances[_]\n    instance.engine.value == [\"postgres\", \"mysql\"][_]\n    not instance.iamauthenabled.value\n    res := result.new(\"Instance does not have IAM Authentication enabled\", instance.iamauthenabled)\n}\n</code></pre>"},{"location":"community/contribute/checks/overview/#verify-the-provider-and-service-exists","title":"Verify the provider and service exists","text":"<p>Every check for a cloud service references a cloud provider. The list of providers are found in the Trivy repository. </p> <p>Before writing a new check for a cloud provider, you need to verify if the cloud provider or resource type that your check targets is supported by Trivy. If it's not, you'll need to add support for it. Additionally, if the provider that you want to target exists, you need to check whether the service your policy will target is supported. As a reference you can take a look at the AWS provider here.</p> Note <p>New Kubernetes and Dockerfile checks do not require any additional provider definitions. You can find an example of a Dockerfile check here and a Kubernetes check here.</p>"},{"location":"community/contribute/checks/overview/#add-support-for-a-new-service-in-an-existing-provider","title":"Add Support for a New Service in an existing Provider","text":"<p>Please reference the documentation on adding Support for a New Service.</p> <p>This guide also showcases how to add new properties for an existing Service.</p>"},{"location":"community/contribute/checks/overview/#create-a-new-rego-file","title":"Create a new .rego file","text":"<p>The following directory in the trivy-checks repository contains all of our custom checks. Depending on what type of check you want to create, you will need to nest a new <code>.rego</code> file in either of the subdirectories:</p> <ul> <li>cloud: All checks related to cloud providers and their services</li> <li>docker: Docker specific checks</li> <li>kubernetes: Kubernetes specific checks</li> </ul>"},{"location":"community/contribute/checks/overview/#check-package-name","title":"Check Package name","text":"<p>Have a look at the existing package names in the built in checks. </p> <p>The package name should be in the format <code>builtin.PROVIDER.SERVICE.ID</code>, e.g. <code>builtin.aws.rds.aws0176</code>.</p>"},{"location":"community/contribute/checks/overview/#generating-an-id","title":"Generating an ID","text":"<p>Every check has a custom ID that is referenced throughout the metadata of the check to uniquely identify the check. If you plan to contribute your check back into the trivy-checks repository, it will require a valid ID. </p> <p>Running <code>make id</code> in the root of the trivy-checks repository will provide you with the next available ID for your rule. </p>"},{"location":"community/contribute/checks/overview/#check-schemas","title":"Check Schemas","text":"<p>Rego Checks for Trivy can utilise Schemas to map the input to specific objects. The schemas available are listed here.. </p> <p>More information on using the builtin schemas is provided in the main documentation.</p>"},{"location":"community/contribute/checks/overview/#check-metadata","title":"Check Metadata","text":"<p>The metadata is the top section that starts with <code># METADATA</code>, and has to be placed on top of the check. You can copy and paste from another check as a starting point. This format is effectively yaml within a Rego comment, and is defined as part of Rego itself.</p> <p>For detailed information on each component of the Check Metadata, please refer to the main documentation.</p> <p>Note that while the Metadata is optional in your own custom checks for Trivy, if you are contributing your check to the Trivy builtin checks, the Metadata section will be required.</p>"},{"location":"community/contribute/checks/overview/#writing-rego-rules","title":"Writing Rego Rules","text":"<p>Rules are defined using OPA Rego. You can find a number of examples in the <code>checks</code> directory (Link). The OPA documentation is a great place to start learning Rego. You can also check out the Rego Playground to experiment with Rego, and join the OPA Slack.</p> <pre><code>deny[res] {\n    instance := input.aws.rds.instances[_]\n    instance.engine.value == [\"postgres\", \"mysql\"][_]\n    not instance.iamauthenabled.value\n    res := result.new(\"Instance does not have IAM Authentication enabled\", instance.iamauthenabled)\n}\n</code></pre> <p>The rule should return a result, which can be created using <code>result.new</code>. This function does not need to be imported, it is defined internally and provided at runtime. The first argument is the message to display and the second argument is the resource that the issue was detected on.</p> <p>It is possible to pass any rego variable that references a field of the input document.</p>"},{"location":"community/contribute/checks/overview/#generate-docs","title":"Generate docs","text":"<p>Finally, you'll want to generate documentation for your newly added rule. Please run <code>make docs</code> in the trivy-checks directory to generate the documentation for your new policy and submit a PR for us to take a look at.</p>"},{"location":"community/contribute/checks/overview/#adding-tests","title":"Adding Tests","text":"<p>All Rego checks need to have tests. There are many examples of these in the <code>checks</code> directory for each check (Link). More information on how to write tests for Rego checks is provided in the custom misconfiguration section of the docs.</p>"},{"location":"community/contribute/checks/overview/#example-pr","title":"Example PR","text":"<p>You can see a full example PR for a new rule being added here: https://github.com/aquasecurity/defsec/pull/1000.</p>"},{"location":"community/contribute/checks/service-support/","title":"Add Service Support","text":"<p>A service refers to a service by a cloud provider. This section details how to add a new service to an existing provider. All contributions need to be made to the trivy repository.</p>"},{"location":"community/contribute/checks/service-support/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, verify that the provider does not already have the service that you plan to add.</p>"},{"location":"community/contribute/checks/service-support/#adding-a-new-service-to-an-existing-provider","title":"Adding a new service to an existing provider","text":"<p>Adding a new service involves two steps. The service will need a data structure to store information about the required resources that will be scanned. Additionally, the service will require one or more adapters to convert the scan targetes as input(s) into the aforementioned data structure.</p>"},{"location":"community/contribute/checks/service-support/#create-a-new-file-in-the-provider-directory","title":"Create a new file in the provider directory","text":"<p>In this example, we are adding the CodeBuild service to the AWS provider.</p> <p>First, create a new directory and file for your new service under the provider directory: e.g. aws/codebuild/codebuild.go</p> <p>The CodeBuild service will require a structure <code>struct</code> to hold the information on the input that is scanned. The input is the CodeBuild resource that a user configured and wants to scan for misconfiguration.</p> <pre><code>type CodeBuild struct {\n    Projects []Project\n}\n</code></pre> <p>The CodeBuild service manages <code>Project</code> resources. The <code>Project</code> struct has been added to hold information about each Project resources; <code>Project</code> Resources in turn manage <code>ArtifactSettings</code>:</p> <pre><code>type Project struct {\n    Metadata                  iacTypes.Metadata\n    ArtifactSettings          ArtifactSettings\n    SecondaryArtifactSettings []ArtifactSettings\n}\n\ntype ArtifactSettings struct {\n    Metadata          iacTypes.Metadata\n    EncryptionEnabled iacTypes.BoolValue\n}\n</code></pre> <p>The <code>iacTypes.Metadata</code> struct is embedded in all of the Trivy types and provides a common set of metadata for all resources. This includes the file and line number where the resource was defined and the name of the resource.</p> <p>A resource in this example <code>Project</code> can have a name and can optionally be encrypted. Instead of using raw string and bool types respectively, we use the trivy types <code>iacTypes.Metadata</code> and <code>iacTypes.BoolValue</code>. These types wrap the raw values and provide additional metadata about the value. For instance, whether it was set by the user and the file and line number where the resource was defined. </p> <p>Have a look at the other providers and services in the <code>iac/providers</code> directory in Trivy.</p> <p>Next you'll need to add a reference to your new service struct in the provider struct at <code>pkg/iac/providers/aws/aws.go</code>:</p> <pre><code>type AWS struct {\n    ...\n    CodeBuild      codebuild.CodeBuild\n    ...\n}\n</code></pre>"},{"location":"community/contribute/checks/service-support/#update-adapters","title":"Update Adapters","text":"<p>Now you'll need to update all of the adapters which populate the struct of the provider that you have been using. Following the example above, if you want to add support for CodeBuild in Terraform, you'll need to update the Terraform AWS adapter as shown here: <code>trivy/pkg/iac/adapters/terraform/aws/codebuild/adapt.go</code>.</p> <p>Another example for updating the adapters is provided in the following PR. Additionally, please refer to the respective Terraform documentation on the provider to which you are adding the service. For instance, the Terraform documentation for AWS CodeBuild is provided here.</p>"},{"location":"community/contribute/checks/service-support/#create-a-new-schema-for-your-provider","title":"Create a new Schema for your provider","text":"<p>Once the new service has been added to the provider, you need to create the schema for the service as part of the provider schema. </p> <p>This process has been automated with mage commands. In the Trivy root directory run <code>mage schema:generate</code> to generate the schema for your new service and <code>mage schema:verify</code>.</p>"},{"location":"community/maintainer/backporting/","title":"Backporting Process","text":"<p>This document outlines the backporting process for Trivy, including when to create patch releases and how to perform the backporting.</p>"},{"location":"community/maintainer/backporting/#when-to-create-patch-releases","title":"When to Create Patch Releases","text":"<p>In general, small changes should not be backported and should be included in the next minor release. However, patch releases should be made in the following cases:</p> <ul> <li>Fixes for HIGH or CRITICAL vulnerabilities in Trivy itself or Trivy's dependencies</li> <li>Fixes for bugs that cause panic during Trivy execution or otherwise interfere with normal usage</li> </ul> <p>In these cases, the fixes should be backported using the procedure described below. At the maintainer's discretion, other bug fixes may be included in the patch release containing these hotfixes.</p>"},{"location":"community/maintainer/backporting/#versioning","title":"Versioning","text":"<p>Trivy follows Semantic Versioning, using version numbers in the format MAJOR.MINOR.PATCH. When creating a patch release, the PATCH part of the version number is incremented. For example, if a fix is being distributed for v0.50.0, the patch release would be v0.50.1.</p>"},{"location":"community/maintainer/backporting/#backporting-procedure","title":"Backporting Procedure","text":"<ol> <li>A release branch (e.g., <code>release/v0.50</code>) is automatically created when a new minor version is released.</li> <li>Create a pull request (PR) against the main branch with the necessary fixes. If the fixes are already merged into the main branch, skip this step.</li> <li>Once the PR with the fixes is merged, comment <code>@aqua-bot backport &lt;release-branch&gt;</code> on the PR (e.g., <code>@aqua-bot backport release/v0.50</code>). This will trigger the automated backporting process using GitHub Actions.</li> <li>The automated process will create a new PR with the backported changes. Ensure that all tests pass for this PR.</li> <li>Once the tests pass, merge the automatically created PR into the release branch.</li> <li>Merge a release PR on the release branch and release the patch version.</li> </ol> <p>Note</p> <p>Even if a conflict occurs, a PR is created by forceful commit, in which case the conflict should be resolved manually. If you want to re-run a backport of the same PR, close the existing PR, delete the branch and re-run it.</p>"},{"location":"community/maintainer/backporting/#example","title":"Example","text":"<p>To better understand the backporting procedure, let's walk through an example using the releases of v0.50.</p> <pre><code>gitGraph:\n  commit id:\"Feature 1\"\n  commit id:\"v0.50.0 release\" tag:\"v0.50.0\"\n\n  branch \"release/v0.50\"\n\n  checkout main\n  commit id:\"Bugfix 1\"\n\n  checkout \"release/v0.50\"\n  cherry-pick id:\"Bugfix 1\"\n\n  checkout main\n  commit id:\"Feature 2\"\n  commit id:\"Bugfix 2\"\n  commit id:\"Feature 3\"\n\n  checkout \"release/v0.50\"\n  cherry-pick id:\"Bugfix 2\"\n  commit id:\"v0.50.1 release\" tag:\"v0.50.1\"</code></pre>"},{"location":"community/maintainer/help-wanted/","title":"Overview","text":"<p>We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors. The <code>good first issue</code> label is a subset of <code>help wanted</code> label, indicating that members have committed to providing extra assistance for new contributors. All <code>good first issue</code> items also have the <code>help wanted</code> label.</p>"},{"location":"community/maintainer/help-wanted/#help-wanted","title":"Help Wanted","text":"<p>Items marked with the <code>help wanted</code> label need to ensure that they are:</p> <ul> <li>Low Barrier to Entry</li> </ul> <p>It should be tractable for new contributors. Documentation on how that type of   change should be made should already exist.</p> <ul> <li>Clear Task</li> </ul> <p>The task is agreed upon and does not require further discussions in the   community. Call out if that area of code is untested and requires new   fixtures.</p> <p>API / CLI behavior is decided and included in the OP issue, for example: \"The   new command syntax is <code>trivy --format yaml IMAGE_NAME</code>\"_ with   expected validations called out.</p> <ul> <li>Goldilocks priority</li> </ul> <p>Not too high that a core contributor should do it, but not too low that it   isn't useful enough for a core contributor to spend time to review it, answer   questions, help get it into a release, etc.</p> <ul> <li>Up-To-Date</li> </ul> <p>Often these issues become obsolete and have already been done, are no longer   desired, no longer make sense, have changed priority or difficulty , etc.</p>"},{"location":"community/maintainer/help-wanted/#good-first-issue","title":"Good First Issue","text":"<p>Items marked with the <code>good first issue</code> label are intended for first-time contributors. It indicates that members will keep an eye out for these pull requests and shepherd it through our processes.</p> <p>These items need to ensure that they follow the guidelines for <code>help wanted</code> labels (above) in addition to meeting the following criteria:</p> <ul> <li>No Barrier to Entry</li> </ul> <p>The task is something that a new contributor can tackle without advanced   setup, or domain knowledge.</p> <ul> <li>Solution Explained</li> </ul> <p>The recommended solution is clearly described in the issue.</p> <ul> <li>Provides Context</li> </ul> <p>If background knowledge is required, this should be explicitly mentioned and a   list of suggested readings included.</p> <ul> <li>Gives Examples</li> </ul> <p>Link to examples of similar implementations so new contributors have a   reference guide for their changes.</p> <ul> <li>Identifies Relevant Code</li> </ul> <p>The relevant code and tests to be changed should be linked in the issue.</p> <ul> <li>Ready to Test</li> </ul> <p>There should be existing tests that can be modified, or existing test cases   fit to be copied. If the area of code doesn't have tests, before labeling the   issue, add a test fixture. This prep often makes a great <code>help wanted</code> task!</p>"},{"location":"community/maintainer/pr-review/","title":"Pull Request Review Policy","text":"<p>This document outlines the review policy for pull requests in the Trivy project.</p>"},{"location":"community/maintainer/pr-review/#core-principles","title":"Core Principles","text":""},{"location":"community/maintainer/pr-review/#1-all-changes-through-pull-requests","title":"1. All Changes Through Pull Requests","text":"<p>All changes to the <code>main</code> branch must be made through pull requests. Direct commits to <code>main</code> are not allowed.</p>"},{"location":"community/maintainer/pr-review/#2-required-approvals","title":"2. Required Approvals","text":"<p>Every pull request requires approval from at least one CODEOWNER before merging.</p> <p>For changes that span multiple domains (e.g., both vulnerability and misconfiguration scanning), approval from at least one code owner from each affected domain is required.</p> <p>When a pull request is created by the only code owner of a domain, approval from any other maintainer is required.</p> <p>When a code owner wants additional input from other owners or maintainers, they should comment requesting feedback and wait for others to approve before providing their own approval. This prevents accidental merging by the PR author.</p>"},{"location":"community/maintainer/pr-review/#3-merge-responsibility","title":"3. Merge Responsibility","text":"<ul> <li>General Rule: The pull request author should click the merge button after receiving required approvals</li> <li>Exception: For urgent fixes (hotfixes), a CODEOWNER may merge the PR directly</li> <li>External Contributors: Pull requests from external contributors should be merged by a CODEOWNER</li> </ul>"},{"location":"community/maintainer/release-flow/","title":"Release Flow","text":""},{"location":"community/maintainer/release-flow/#overview","title":"Overview","text":"<p>Trivy adopts conventional commit messages, and Release Please automatically creates a release PR based on the messages of the merged commits. This release PR is automatically updated every time a new commit is added to the release branch.</p> <p>If a commit has the prefix <code>feat:</code>, a PR is automatically created to increment the minor version, and if a commit has the prefix <code>fix:</code>, a PR is created to increment the patch version. When the PR is merged, GitHub Actions automatically creates a version tag and the release is performed. For detailed behavior, please refer to the GitHub Actions configuration.</p> <p>Note</p> <p>Commits with prefixes like <code>chore</code> or <code>build</code> are not considered releasable, and no release PR is created. To include such commits in a release, you need to either include commits with <code>feat</code> or <code>fix</code> prefixes or perform a manual release as described below.</p> <p>Tip</p> <p>It's a good idea to check if there are any outstanding vulnerability updates created by dependabot waiting for your review. They can be found in the \"Security\" tab of the repository. If there are any, please review and merge them before creating a release. This will help to ensure that the release includes the latest security patches.</p>"},{"location":"community/maintainer/release-flow/#flow","title":"Flow","text":"<p>The release flow consists of the following main steps:</p> <ol> <li>Creating the release PR (automatically or manually)</li> <li>Drafting the release notes in GitHub Discussions</li> <li>Merging the release PR</li> <li>Updating the release notes in GitHub Discussions</li> <li>Navigating to the release notes in GitHub Releases page</li> </ol>"},{"location":"community/maintainer/release-flow/#automatic-release-pr-creation","title":"Automatic Release PR Creation","text":"<p>When a releasable commit (a commit with <code>feat</code> or <code>fix</code> prefix) is merged, a release PR is automatically created. These Release PRs are kept up-to-date as additional work is merged. When it's ready to tag a release, simply merge the release PR. See the Release Please documentation for more information.</p> <p>The title of the PR will be in the format <code>release: v${version} [${branch}]</code> (e.g., <code>release: v0.51.0 [main]</code>). The format of the PR title is important for identifying the release commit, so it should not be changed.</p> <p>The <code>release/vX.Y</code> release branches are also subject to automatic release PR creation for patch releases. The PR title will be like <code>release: v0.51.1 [release/v0.51]</code>.</p>"},{"location":"community/maintainer/release-flow/#manual-release-pr-creation","title":"Manual Release PR Creation","text":"<p>If you want to release commits like <code>chore</code>, a release PR is not automatically created, so you need to manually trigger the creation of a release PR. The Release Please workflow supports <code>workflow_dispatch</code> and can be triggered manually. Click \"Run workflow\" in the top right corner and specify the release branch. In Trivy, the following branches are the release branches.</p> <ul> <li><code>main</code></li> <li><code>release/vX.Y</code> (e.g. <code>release/v0.51</code>)</li> </ul> <p>Specify the release version (without the <code>v</code> prefix) and click \"Run workflow\" to create a release PR for the specified version.</p>"},{"location":"community/maintainer/release-flow/#drafting-the-release-notes","title":"Drafting the Release Notes","text":"<p>Next, create release notes for this version. Draft a new post in GitHub Discussions, and maintainers edit these release notes (e.g., https://github.com/aquasecurity/trivy/discussions/6605). Currently, the creation of this draft is done manually. For patch version updates, this step can be skipped since they only involve bug fixes.</p>"},{"location":"community/maintainer/release-flow/#merging-the-release-pr","title":"Merging the Release PR","text":"<p>Once the draft of the release notes is complete, merge the release PR. When the PR is merged, a tag is automatically created, and GoReleaser releases binaries, container images, etc.</p>"},{"location":"community/maintainer/release-flow/#updating-the-release-notes","title":"Updating the Release Notes","text":"<p>If the release completes without errors, a page for the release notes is created in GitHub Discussions (e.g., https://github.com/aquasecurity/trivy/discussions/6622). Copy the draft release notes, adjust the formatting, and finalize the release notes.</p>"},{"location":"community/maintainer/release-flow/#navigating-to-the-release-notes","title":"Navigating to the Release Notes","text":"<p>To navigate to the release highlights and summary in GitHub Discussions, place a link in the GitHub Releases page as below:</p> <pre><code>## \u26a1Release highlights and summary\u26a1\n\n\ud83d\udc49 https://github.com/aquasecurity/trivy/discussions/6838\n\n## Changelog\nhttps://github.com/aquasecurity/trivy/blob/main/CHANGELOG.md#0520-2024-06-03\n</code></pre> <p>Replace URLs with appropriate ones.</p> <p>Example: https://github.com/aquasecurity/trivy/releases/tag/v0.52.0</p>"},{"location":"community/maintainer/release-flow/#merging-the-auto-generated-helm-chart-update-pr","title":"Merging the auto-generated Helm chart update PR","text":"<p>Once the release PR is merged, there will be an auto-generated PR that bumps the Trivy version for the Trivy Helm Chart. An example can be seen here.</p> <p>[!NOTE] It is possible that the release action takes a while to finish and the Helm chart action runs prior. In such a case the Helm chart action will fail as it will not be able to find the latest Trivy container image. In such a case, it is advised to manually restart the Helm chart action, once the release action is finished.</p> <p>If things look good, approve and merge this PR to further trigger the publishing of the Helm Chart.</p> <p>The release is now complete \ud83c\udf7b</p>"},{"location":"community/maintainer/triage/","title":"Triage","text":"<p>Triage is an important part of maintaining the health of the trivy repo. A well organized repo allows maintainers to prioritize feature requests, fix bugs, and respond to users facing difficulty with the tool as quickly as possible.</p> <p>Triage includes:</p> <ul> <li>Labeling issues</li> <li>Responding to issues</li> <li>Closing issues</li> </ul>"},{"location":"community/maintainer/triage/#daily-triage","title":"Daily Triage","text":"<p>Daily triage has two goals:</p> <ol> <li>Responsiveness for new issues</li> <li>Responsiveness when explicitly requested information was provided</li> </ol> <p>It covers:</p> <ol> <li>Issues without a <code>kind/</code> or <code>triage/</code> label</li> <li>Issues without a <code>priority/</code> label</li> <li><code>triage/needs-information</code> issues which the user has followed up on, and now require a response.</li> </ol>"},{"location":"community/maintainer/triage/#categorization","title":"Categorization","text":"<p>The most important level of categorizing the issue is defining what type it is. We typically want at least one of the following labels on every issue, and some issues may fall into multiple categories:</p> <ul> <li><code>triage/support</code>   - The default for most incoming issues</li> <li><code>kind/bug</code> - When it\u2019s a bug or we aren\u2019t delivering the best user experience</li> </ul> <p>Other possibilities:  - <code>kind/feature</code>- Identify new feature requests - <code>kind/testing</code> - Update or fix unit/integration tests - <code>kind/cleanup</code> - Cleaning up/refactoring the codebase - <code>kind/documentation</code> - Updates or additions to trivy documentation</p> <p>If the issue is specific to a driver for OS packages or libraries:</p> <p>co/[driver for OS packages]</p> <ul> <li><code>co/alpine</code></li> <li><code>co/amazon</code></li> <li><code>co/debian</code></li> <li><code>co/oracle</code></li> <li><code>co/photon</code></li> <li><code>co/redhat</code></li> <li><code>co/suse</code></li> <li><code>co/ubuntu</code></li> </ul> <p>co/[driver for libraries of programming languages] </p> <ul> <li><code>co/bundler</code></li> <li><code>co/cargo</code></li> <li><code>co/composer</code></li> <li><code>co/npm</code></li> <li><code>co/yarn</code></li> <li><code>co/pipenv</code></li> <li><code>co/poetry</code></li> </ul> <p>Help wanted?</p> <p><code>Good First Issue</code> - bug has a proposed solution, can be implemented w/o further discussion.</p> <p><code>Help wanted</code> - if the bug could use help from a contributor</p>"},{"location":"community/maintainer/triage/#prioritization","title":"Prioritization","text":"<p>If the issue is not <code>triage/support</code>, it needs a priority label.</p> <p><code>priority/critical-urgent</code> - someones top priority ASAP, such as security issue, user-visible bug, or build breakage. Rarely used.</p> <p><code>priority/important-soon</code>: in time for the next two releases. It should be attached to a milestone.</p> <p><code>priority/important-longterm</code>: 2-4 releases from now</p> <p><code>priority/backlog</code>: agreed that this would be good to have, but no one is available at the moment. Consider tagging as <code>help wanted</code></p> <p><code>priority/awaiting-more-evidence</code>: may be useful, but there is not yet enough support.</p>"},{"location":"community/maintainer/triage/#weekly-triage","title":"Weekly Triage","text":"<p>Weekly triage has three goals:</p> <ol> <li>Catching up on unresponded issues</li> <li>Reviewing and closing PR\u2019s</li> <li>Closing stale issues</li> </ol>"},{"location":"community/maintainer/triage/#post-release-triage","title":"Post-Release Triage","text":"<p>Post-release triage occurs after a major release (around every 4-6 weeks). It focuses on:</p> <ol> <li>Closing bugs that have been resolved by the release</li> <li>Reprioritizing bugs that have not been resolved by the release</li> <li>Letting users know if we believe that there is still an issue</li> </ol> <p>This includes reviewing:</p> <ol> <li>Every issue that hasn\u2019t been touched in the last 2 days</li> <li>Re-evaluation of long-term issues</li> <li>Re-evaluation of short-term issues</li> </ol>"},{"location":"community/maintainer/triage/#responding-to-issues","title":"Responding to Issues","text":""},{"location":"community/maintainer/triage/#needs-more-information","title":"Needs More Information","text":"<p>A sample response to ask for more info:</p> <p>I don\u2019t yet have a clear way to replicate this issue. Do you mind adding some additional details. Here is additional information that would be helpful:</p> <p>*  The exact <code>trivy</code> command line used</p> <p>*  The exact image you want to scan</p> <p>*  The full output of the <code>trivy</code> command, preferably with <code>--debug</code> for extra logging.</p> <p>Thank you for sharing your experience!</p> <p>Then: Label with <code>triage/needs-information</code>.</p>"},{"location":"community/maintainer/triage/#issue-might-be-resolved","title":"Issue might be resolved","text":"<p>If you think a release may have resolved an issue, ask the author to see if their issue has been resolved:</p> <p>Could you please check to see if trivy  addresses this issue? We've made some changes with how this is handled, and improved the trivy logs output to help us debug tricky cases like this. <p>Then: Label with <code>triage/needs-information</code>.</p>"},{"location":"community/maintainer/triage/#closing-with-care","title":"Closing with Care","text":"<p>Issues typically need to be closed for the following reasons:</p> <ul> <li>The issue has been addressed</li> <li>The issue is a duplicate of an existing issue</li> <li>There has been a lack of information over a long period of time</li> </ul> <p>In any of these situations, we aim to be kind when closing the issue, and offer the author action items should they need to reopen their issue or still require a solution.</p> <p>Samples responses for these situations include:</p>"},{"location":"community/maintainer/triage/#issue-has-been-addressed","title":"Issue has been addressed","text":"<p>@author: I believe this issue is now addressed by trivy v1.0.0, as it . If you still see this issue with trivy v1.0 or higher, please reopen this issue. <p>Thank you for reporting this issue!</p> <p>Then: Close the issue</p>"},{"location":"community/maintainer/triage/#duplicate-issue","title":"Duplicate Issue","text":"<p>This issue appears to be a duplicate of #X, do you mind if we move the conversation there?</p> <p>This way we can centralize the content relating to the issue. If you feel that this issue is not in fact a duplicate, please re-open it. If you have additional information to share, please add it to the new issue.</p> <p>Thank you for reporting this!</p> <p>Then: Label with <code>triage/duplicate</code> and close the issue.</p>"},{"location":"community/maintainer/triage/#lack-of-information","title":"Lack of Information","text":"<p>If an issue hasn't been active for more than four weeks, and the author has been pinged at least once, then the issue can be closed.</p> <p>Hey @author -- hopefully it's OK if I close this - there wasn't enough information to make it actionable, and some time has already passed. If you are able to provide additional details, you may reopen it at any point.</p> <p>Here is additional information that may be helpful to us:</p> <p>* Whether the issue occurs with the latest trivy release</p> <p>* The exact <code>trivy</code> command line used</p> <p>* The exact image you want to scan</p> <p>* The full output of the <code>trivy</code> command, preferably with <code>--debug</code> for extra logging.</p> <p>Thank you for sharing your experience!</p> <p>Then: Close the issue.</p>"},{"location":"community/maintainer/triage/#help-wanted-issues","title":"Help Wanted issues","text":"<p>We use two labels help wanted and good first issue to identify issues that have been specially groomed for new contributors.</p> <p>We have specific guidelines for how to use these labels. If you see an issue that satisfies these guidelines, you can add the <code>help wanted</code> label and the <code>good first issue</code> label. Please note that adding the <code>good first issue</code> label must also  add the <code>help wanted</code> label.</p> <p>If an issue has these labels but does not satisfy the guidelines, please ask for more details to be added to the issue or remove the labels.</p>"},{"location":"docs/","title":"Docs","text":"<p>Welcome to the Trivy documentation! Here you can find complete and thorough information about every aspect of Trivy, how to use it, features available, and configuration options.</p> <p>\ud83d\udc48 Please use the left side navigation browse the different topics.</p>"},{"location":"docs/advanced/air-gap/","title":"Connectivity and Network considerations","text":"<p>Trivy requires internet connectivity in order to function normally. If your organizations blocks or restricts network traffic, that could prevent Trivy from working correctly. This document explains Trivy's network connectivity requirements, and how to configure Trivy to work in restricted networks environments, including completely air-gapped environments.</p> <p>The following table lists all external resources that are required by Trivy:</p> External Resource Feature Details Vulnerability Database Vulnerability scanning Trivy DB Java Vulnerability Database Java vulnerability scanning Trivy Java DB Checks Bundle Misconfigurations scanning Trivy Checks VEX Hub VEX Hub VEX Hub Maven Central / Remote Repositories Java vulnerability scanning Java Scanner/Remote Repositories <p>Note</p> <p>Trivy is an open source project that relies on public free infrastructure. In case of extreme load, you may encounter rate limiting when Trivy attempts to connect to external resources.</p> <p>The rest of this document details each resource's connectivity requirements and network related considerations.</p>"},{"location":"docs/advanced/air-gap/#oci-databases","title":"OCI Databases","text":"<p>Trivy's Vulnerability, Java, and Checks Bundle are packaged as OCI images and stored in public container registries.</p>"},{"location":"docs/advanced/air-gap/#connectivity-requirements","title":"Connectivity requirements","text":"<p>The specific registries and locations are detailed in the databases document.</p> <p>Communication with OCI Registries follows the OCI Distribution spec.</p> <p>The following hosts are known to be used by the default container registries:</p> Registry Hosts Additional info Google Artifact Registry <ul><li><code>mirror.gcr.io</code></li><li><code>googlecode.l.googleusercontent.com</code></li></ul> Google's IP addresses GitHub Container Registry <ul><li><code>ghcr.io</code></li><li><code>pkg-containers.githubusercontent.com</code></li></ul> GitHub's IP addresses"},{"location":"docs/advanced/air-gap/#self-hosting","title":"Self-hosting","text":"<p>You can host Trivy's databases in your own container registry. Please refer to Self-hosting document for a detailed guide.</p>"},{"location":"docs/advanced/air-gap/#embedded-checks","title":"Embedded Checks","text":"<p>Checks Bundle is embedded in the Trivy binary (at build time), and will be used as a fallback if the external database is not available. This means that you can still scan for misconfigurations in an air-gapped environment using the database from the time of the Trivy release you are using.</p>"},{"location":"docs/advanced/air-gap/#vex-hub","title":"VEX Hub","text":""},{"location":"docs/advanced/air-gap/#connectivity-requirements_1","title":"Connectivity Requirements","text":"<p>VEX Hub is hosted as at https://github.com/aquasecurity/vexhub.</p> <p>Trivy is fetching VEX Hub GitHub Repository directly using simple HTTPS requests.</p> <p>The following hosts are known to be used by GitHub's services:</p> <ul> <li><code>api.github.com</code></li> <li><code>codeload.github.com</code></li> </ul> <p>For more information about GitHub connectivity (including specific IP addresses), please refer to GitHub's connectivity troubleshooting guide.</p>"},{"location":"docs/advanced/air-gap/#self-hosting_1","title":"Self-hosting","text":"<p>You can host a copy of VEX Hub on your own internal server. Please refer to the self-hosting document for a detailed guide.</p>"},{"location":"docs/advanced/air-gap/#maven-central-remote-repositories","title":"Maven Central / Remote Repositories","text":"<p>Trivy might call out to Maven central or other remote repositories to fetch in order to correctly identify Java packages during a vulnerability scan.</p>"},{"location":"docs/advanced/air-gap/#connectivity-requirements_2","title":"Connectivity requirements","text":"<p>Trivy might attempt to connect (over HTTPS) to the following URLs:</p> <ul> <li><code>https://repo.maven.apache.org/maven2</code></li> </ul>"},{"location":"docs/advanced/air-gap/#offline-mode","title":"Offline mode","text":"<p>There's no way to leverage Maven Central in a network-restricted environment, but you can prevent Trivy from trying to connect to it by using the <code>--offline-scan</code> flag.</p>"},{"location":"docs/advanced/air-gap/#check-updates-service","title":"Check updates service","text":"<p>Trivy checks for updates and collects usage telemetry by connecting to the following domain: <code>https://check.trivy.dev</code>. Connectivity with this domain is entirely optional and is not necessary for the normal operation of Trivy.</p>"},{"location":"docs/advanced/modules/","title":"Modules","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy provides a module feature to allow others to extend the Trivy CLI without the need to change the Trivy code base. It changes the behavior during scanning by WebAssembly.</p>"},{"location":"docs/advanced/modules/#overview","title":"Overview","text":"<p>Trivy modules are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without updating the Trivy binary.</p> <ul> <li>They can be added and removed from a Trivy installation without impacting the core Trivy tool.</li> <li>They can be written in any programming language supporting WebAssembly.</li> <li>It supports only Go at the moment.</li> </ul> <p>You can write your own detection logic.</p> <ul> <li>Evaluate complex vulnerability conditions like Spring4Shell</li> <li>Detect a shell script communicating with malicious domains</li> <li>Detect malicious python install script (setup.py)</li> <li>Even detect misconfigurations in WordPress setting</li> <li>etc.</li> </ul> <p>Then, you can update the scan result however you want.</p> <ul> <li>Change a severity</li> <li>Remove a vulnerability</li> <li>Add a new vulnerability</li> <li>etc.</li> </ul> <p>Modules should be distributed in OCI registries like GitHub Container Registry.</p> <p>Warning</p> <p>WebAssembly doesn't allow file access and network access by default. Modules can read required files only, but cannot overwrite them. WebAssembly is sandboxed and secure by design, but Trivy modules available in public are not audited for security. You should install and run third-party modules at your own risk even though </p> <p>Under the hood Trivy leverages wazero to run WebAssembly modules without CGO.</p>"},{"location":"docs/advanced/modules/#installing-a-module","title":"Installing a Module","text":"<p>A module can be installed using the <code>trivy module install</code> command. This command takes an url. It will download the module and install it in the module cache.</p> <p>Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy modules cache. The preference order is as follows:</p> <ul> <li>XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir</li> <li>$HOME/.trivy/plugins</li> </ul> <p>For example, to download the WebAssembly module, you can execute the following command:</p> <pre><code>$ trivy module install ghcr.io/aquasecurity/trivy-module-spring4shell\n</code></pre>"},{"location":"docs/advanced/modules/#using-modules","title":"Using Modules","text":"<p>Once the module is installed, Trivy will load all available modules in the cache on the start of the next Trivy execution. The modules may inject custom logic into scanning and change the result. You can run Trivy as usual and modules are loaded automatically.</p> <p>You will see the log messages about WASM modules.</p> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy-test-images:spring4shell-jre8\n2022-06-12T12:57:13.210+0300    INFO    Loading ghcr.io/aquasecurity/trivy-module-spring4shell/spring4shell.wasm...\n2022-06-12T12:57:13.596+0300    INFO    Registering WASM module: spring4shell@v1\n...\n2022-06-12T12:57:14.865+0300    INFO    Module spring4shell: Java Version: 8, Tomcat Version: 8.5.77\n2022-06-12T12:57:14.865+0300    INFO    Module spring4shell: change CVE-2022-22965 severity from CRITICAL to LOW\n\nJava (jar)\n\nTotal: 9 (UNKNOWN: 1, LOW: 3, MEDIUM: 2, HIGH: 3, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                           Library                            \u2502    Vulnerability    \u2502 Severity \u2502 Installed Version \u2502     Fixed Version      \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 org.springframework.boot:spring-boot (helloworld.war)        \u2502 CVE-2022-22965      \u2502 LOW      \u2502 2.6.3             \u2502 2.5.12, 2.6.6          \u2502 spring-framework: RCE via Data Binding on JDK 9+           \u2502\n\u2502                                                              \u2502                     \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2022-22965                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...(snip)...\n</code></pre> <p>In the above example, the Spring4Shell module changed the severity from CRITICAL to LOW because the application doesn't satisfy one of conditions.</p>"},{"location":"docs/advanced/modules/#uninstalling-modules","title":"Uninstalling Modules","text":"<p>Specify a module repository with <code>trivy module uninstall</code> command.</p> <pre><code>$ trivy module uninstall ghcr.io/aquasecurity/trivy-module-spring4shell\n</code></pre>"},{"location":"docs/advanced/modules/#building-modules","title":"Building Modules","text":"<p>It supports Go only at the moment.</p>"},{"location":"docs/advanced/modules/#go","title":"Go","text":"<p>Trivy provides Go SDK including three interfaces. Your own module needs to implement either or both <code>Analyzer</code> and <code>PostScanner</code> in addition to <code>Module</code>.</p> <pre><code>type Module interface {\n    Version() int\n    Name() string\n}\n\ntype Analyzer interface {\n    RequiredFiles() []string\n    Analyze(filePath string) (*serialize.AnalysisResult, error)\n}\n\ntype PostScanner interface {\n    PostScanSpec() serialize.PostScanSpec\n    PostScan(types.Results) (types.Results, error)\n}\n</code></pre> <p>In the following tutorial, it creates a WordPress module that detects a WordPress version and a critical vulnerability accordingly.</p> <p>Tips</p> <p>You can use logging functions such as <code>Debug</code> and <code>Info</code> for debugging. See examples for the detail.</p>"},{"location":"docs/advanced/modules/#initialize-your-module","title":"Initialize your module","text":"<p>Replace the repository name with yours.</p> <pre><code>$ go mod init github.com/aquasecurity/trivy-module-wordpress\n</code></pre>"},{"location":"docs/advanced/modules/#module-interface","title":"Module interface","text":"<p><code>Version()</code> returns your module version and should be incremented after updates. <code>Name()</code> returns your module name.</p> <pre><code>package main\n\nconst (\n    version = 1\n    name = \"wordpress-module\"\n)\n\n// main is required for Go to compile the Wasm module\nfunc main() {}  \n\ntype WordpressModule struct{\n    // Cannot define fields as modules can't keep state.\n}\n\nfunc (WordpressModule) Version() int {\n    return version\n}\n\nfunc (WordpressModule) Name() string {\n    return name\n}\n</code></pre> <p>Info</p> <p>A struct cannot have any fields. Each method invocation is performed in different states.</p>"},{"location":"docs/advanced/modules/#analyzer-interface","title":"Analyzer interface","text":"<p>If you implement the <code>Analyzer</code> interface, <code>Analyze</code> method is called when the file path is matched to file patterns returned by <code>RequiredFiles()</code>. A file pattern must be a regular expression. The syntax detail is here.</p> <p><code>Analyze</code> takes the matched file path, then the file can be opened by <code>os.Open()</code>.</p> <pre><code>const typeWPVersion = \"wordpress-version\"\n\nfunc (WordpressModule) RequiredFiles() []string {\n    return []string{\n        `wp-includes\\/version.php`,\n    }\n}\n\nfunc (WordpressModule) Analyze(filePath string) (*serialize.AnalysisResult, error) {\n    f, err := os.Open(filePath) // e.g. filePath: /usr/src/wordpress/wp-includes/version.php\n    if err != nil {\n        return nil, err\n    }\n    defer f.Close()\n\n    var wpVersion string\n    scanner := bufio.NewScanner(f)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if !strings.HasPrefix(line, \"$wp_version=\") {\n            continue\n        }\n\n        ss := strings.Split(line, \"=\")\n        if len(ss) != 2 {\n            return nil, fmt.Errorf(\"invalid wordpress version: %s\", line)\n        }\n\n        // NOTE: it is an example; you actually need to handle comments, etc\n        ss[1] = strings.TrimSpace(ss[1])\n        wpVersion = strings.Trim(ss[1], `\";`)\n    }\n\n    if err = scanner.Err(); err != nil {\n        return nil, err\n    }\n\n    return &amp;serialize.AnalysisResult{\n        CustomResources: []ftypes.CustomResource{\n            {\n                Type:     typeWPVersion,\n                FilePath: filePath,\n                Data:     wpVersion,\n            },\n        },\n    }, nil\n}\n</code></pre> <p>Tips</p> <p>Trivy caches analysis results according to the module version. We'd recommend cleaning the cache or changing the module version every time you update <code>Analyzer</code>.</p>"},{"location":"docs/advanced/modules/#postscanner-interface","title":"PostScanner interface","text":"<p><code>PostScan</code> is called after scanning and takes the scan result as an argument from Trivy. In post scanning, your module can perform one of three actions:</p> <ul> <li>Insert<ul> <li>Add a new security finding</li> <li>e.g. Add a new vulnerability and misconfiguration</li> </ul> </li> <li>Update<ul> <li>Update the detected vulnerability and misconfiguration</li> <li>e.g. Change a severity</li> </ul> </li> <li>Delete<ul> <li>Delete the detected vulnerability and misconfiguration</li> <li>e.g. Remove Spring4Shell because it is not actually affected.</li> </ul> </li> </ul> <p><code>PostScanSpec()</code> returns which action the module does. If it is <code>Update</code> or <code>Delete</code>, it also needs to return IDs such as CVE-ID and misconfiguration ID, which your module wants to update or delete.</p> <p><code>serialize.Results</code> contains the filtered results matching IDs you specified. Also, it includes <code>CustomResources</code> with the values your <code>Analyze</code> returns, so you can modify the scan result according to the custom resources.</p> <pre><code>func (WordpressModule) PostScanSpec() serialize.PostScanSpec {\n    return serialize.PostScanSpec{\n        Action: api.ActionInsert, // Add new vulnerabilities\n    }\n}\n\nfunc (WordpressModule) PostScan(results types.Results) (types.Results, error) {\n    // e.g. results\n    // [\n    //   {\n    //     \"Target\": \"\",\n    //     \"Class\": \"custom\",\n    //     \"CustomResources\": [\n    //       {\n    //         \"Type\": \"wordpress-version\",\n    //         \"FilePath\": \"/usr/src/wordpress/wp-includes/version.php\",\n    //         \"Layer\": {\n    //           \"DiffID\": \"sha256:057649e61046e02c975b84557c03c6cca095b8c9accd3bd20eb4e432f7aec887\"\n    //         },\n    //         \"Data\": \"5.7.1\"\n    //       }\n    //     ]\n    //   }\n    // ]   \n    var wpVersion int\n    for _, result := range results {\n        if result.Class != types.ClassCustom {\n            continue\n        }\n\n        for _, c := range result.CustomResources {\n            if c.Type != typeWPVersion {\n                continue\n            }\n            wpVersion = c.Data.(string)\n            wasm.Info(fmt.Sprintf(\"WordPress Version: %s\", wpVersion))\n\n            ...snip...\n\n            if affectedVersion.Check(ver) {\n                vulnerable = true\n            }\n            break\n        }\n    }\n\n    if vulnerable {\n        // Add CVE-2020-36326\n        results = append(results, types.Result{\n            Target: wpPath,\n            Class:  types.ClassLangPkg,\n            Type:   \"wordpress\",\n            Vulnerabilities: []types.DetectedVulnerability {\n                {\n                    VulnerabilityID:  \"CVE-2020-36326\",\n                    PkgName:          \"wordpress\",\n                    InstalledVersion: wpVersion,\n                    FixedVersion:     \"5.7.2\",\n                    Vulnerability: dbTypes.Vulnerability{\n                        Title:    \"PHPMailer 6.1.8 through 6.4.0 allows object injection through Phar Deserialization via addAttachment with a UNC pathname.\",\n                        Severity: \"CRITICAL\",\n                    },\n                },\n            },\n        })\n    }\n    return results, nil\n}\n</code></pre> <p>The new vulnerability will be added to the scan results. This example shows how the module inserts a new finding. If you are interested in <code>Update</code>, you can see an example of Spring4Shell.</p> <p>In the <code>Delete</code> action, <code>PostScan</code> needs to return results you want to delete. If <code>PostScan</code> returns an empty, Trivy will not delete anything.</p>"},{"location":"docs/advanced/modules/#build","title":"Build","text":"<p>Follow the install guide and install Go.</p> <pre><code>$ GOOS=wasip1 GOARCH=wasm go build -o wordpress.wasm -buildmode=c-shared wordpress.go\n</code></pre> <p>Put the built binary to the module directory that is under the home directory by default.</p> <pre><code>$ mkdir -p ~/.trivy/modules\n$ cp wordpress.wasm ~/.trivy/modules\n</code></pre>"},{"location":"docs/advanced/modules/#distribute-your-module","title":"Distribute Your Module","text":"<p>You can distribute your own module in OCI registries. Please follow the oras installation instruction.</p> <pre><code>oras push ghcr.io/aquasecurity/trivy-module-wordpress:latest wordpress.wasm:application/vnd.module.wasm.content.layer.v1+wasm\nUploading 3daa3dac086b wordpress.wasm\nPushed ghcr.io/aquasecurity/trivy-module-wordpress:latest\nDigest: sha256:6416d0199d66ce52ced19f01d75454b22692ff3aa7737e45f7a189880840424f\n</code></pre>"},{"location":"docs/advanced/modules/#examples","title":"Examples","text":"<ul> <li>Spring4Shell</li> <li>WordPress</li> </ul>"},{"location":"docs/advanced/self-hosting/","title":"Self-Hosting Trivy's Databases","text":"<p>This document explains how to host Trivy's external dependencies in your own infrastructure to prevent external network access. If you haven't already, please familiarize yourself with the Databases document that explains about the different databases used by Trivy and the different configuration options that control them. This guide assumes you are already familiar with the concepts explained there.</p>"},{"location":"docs/advanced/self-hosting/#oci-databases","title":"OCI databases","text":"<p>The following Trivy Databases are packaged as OCI images:</p> <ul> <li><code>trivy-db</code></li> <li><code>trivy-java-db</code></li> <li><code>trivy-checks</code></li> </ul> <p>To host these databases in your own infrastructure:</p>"},{"location":"docs/advanced/self-hosting/#make-a-local-copy","title":"Make a local copy","text":"<p>Use any container registry manipulation tool (e.g , crane, ORAS, regclient) to copy the images to your destination registry.</p> <p>Note</p> <p>You will need to keep the databases updated in order to maintain relevant scanning results over time.</p>"},{"location":"docs/advanced/self-hosting/#configure-trivy","title":"Configure Trivy","text":"<p>Use the appropriate database location flags to change the db-repository location:</p> <ul> <li><code>--db-repository</code></li> <li><code>--java-db-repository</code></li> <li><code>--checks-bundle-repository</code></li> </ul>"},{"location":"docs/advanced/self-hosting/#authentication","title":"Authentication","text":"<p>If the registry requires authentication, you can configure it as described in the private registry authentication document.</p>"},{"location":"docs/advanced/self-hosting/#oci-media-types","title":"OCI Media Types","text":"<p>When serving, proxying, or manipulating Trivy's databases, note that the media type of the OCI layer is not a standard container image type:</p> DB Media Type Reference <code>trivy-db</code> <code>application/vnd.aquasec.trivy.db.layer.v1.tar+gzip</code> https://github.com/aquasecurity/trivy-db/pkgs/container/trivy-db <code>trivy-java-db</code> <code>application/vnd.aquasec.trivy.javadb.layer.v1.tar+gzip</code> https://github.com/aquasecurity/trivy-java-db/pkgs/container/trivy-java-db <code>trivy-checks</code> <code>application/vnd.oci.image.manifest.v1+json</code> https://github.com/aquasecurity/trivy-checks/pkgs/container/trivy-checks"},{"location":"docs/advanced/self-hosting/#manual-cache-population","title":"Manual cache population","text":"<p>Trivy uses a local cache directory to store the database files, as described in the cache document. You can download the databases files and surgically populate the Trivy cache directory with them.</p>"},{"location":"docs/advanced/self-hosting/#downloading-the-db-files","title":"Downloading the DB files","text":"<p>On a machine with internet access, pull the database container archive from the public registry into your local workspace:</p> <p>Note that these examples operate in the current working directory.</p> Using ORASUsing Trivy <p>This example uses ORAS, but you can use any other container registry manipulation tool.</p> <pre><code>oras pull ghcr.io/aquasecurity/trivy-db:2\n</code></pre> <p>You should now have a file called <code>db.tar.gz</code>. Next, extract it to reveal the db files:</p> <pre><code>tar -xzf db.tar.gz\n</code></pre> <p>This example uses Trivy to pull the database container archive. The <code>--cache-dir</code> flag makes Trivy download the database files into our current working directory. The <code>--download-db-only</code> flag tells Trivy to only download the database files, not to scan any images.</p> <pre><code>trivy image --cache-dir . --download-db-only\n</code></pre> <p>You should now have 2 new files, <code>metadata.json</code> and <code>trivy.db</code>. These are the Trivy DB files, copy them over to the air-gapped environment.</p>"},{"location":"docs/advanced/self-hosting/#populating-the-trivy-cache","title":"Populating the Trivy Cache","text":"<p>In order to populate the cache, you need to identify the location of the cache directory. If it is under the default location, you can run the following command to find it:</p> <pre><code>trivy -h | grep cache\n</code></pre> <p>For the example, we will assume the <code>TRIVY_CACHE_DIR</code> variable holds the cache location:</p> <pre><code>TRIVY_CACHE_DIR=/home/user/.cache/trivy\n</code></pre> <p>Put the Trivy DB files in the Trivy cache directory under a <code>db</code> subdirectory:</p> <pre><code># ensure cache db directory exists\nmkdir -p ${TRIVY_CACHE_DIR}/db\n# copy the db files\ncp /path/to/trivy.db /path/to/metadata.json ${TRIVY_CACHE_DIR}/db/\n</code></pre>"},{"location":"docs/advanced/self-hosting/#java-db-adaptations","title":"Java DB adaptations","text":"<p>For Java DB the process is the same, except for the following:</p> <ol> <li>Image location is <code>ghcr.io/aquasecurity/trivy-java-db:1</code></li> <li>Archive file name is <code>javadb.tar.gz</code></li> <li>DB file name is <code>trivy-java.db</code></li> </ol>"},{"location":"docs/advanced/self-hosting/#vex-hub","title":"VEX Hub","text":""},{"location":"docs/advanced/self-hosting/#make-a-local-copy_1","title":"Make a local copy","text":"<p>To make a copy of VEX Hub in a location that is accessible to Trivy.</p> <ol> <li>Download the VEX Hub archive from: https://github.com/aquasecurity/vexhub/archive/refs/heads/main.zip.</li> <li>Download the VEX Hub Repository Manifest file from: https://github.com/aquasecurity/vexhub/blob/main/vex-repository.json.</li> <li>Create or identify an internal HTTP server that can serve the VEX Hub repository in your environment (e.g <code>https://server.local</code>).</li> <li>Make the downloaded archive file available for serving from your server (e.g <code>https://server.local/main.zip</code>).</li> <li>Modify the downloaded manifest file's Location URL field to the URL of the archive file on your server (e.g <code>url: https://server.local/main.zip</code>).</li> <li>Make the manifest file available for serving from your server under the <code>/.well-known</code> path  (e.g <code>https://server.local/.well-known/vex-repository.json</code>).</li> </ol>"},{"location":"docs/advanced/self-hosting/#configure-trivy_1","title":"Configure Trivy","text":"<p>To configure Trivy to use the local VEX Repository:</p> <ol> <li>Locate your Trivy VEX configuration file by running <code>trivy vex repo init</code>. Make the following changes to the file.</li> <li>Disable the default VEX Hub repo (<code>enabled: false</code>)</li> <li>Add your internal VEX Hub repository as a custom repository with the URL pointing to your local server (e.g <code>url: https://server.local</code>).</li> </ol>"},{"location":"docs/advanced/self-hosting/#authentication_1","title":"Authentication","text":"<p>If your server requires authentication, you can configure it as described in the VEX Repository Authentication document.</p>"},{"location":"docs/advanced/telemetry-flags/","title":"Telemetry flags","text":"<pre><code>--clear-cache\n--debug\n--dependency-tree\n--detection-priority\n--distro\n--exit-code\n--exit-on-eol\n--format\n--ignore-status\n--ignore-unfixed\n--image-config-scanners\n--include-deprecated-checks\n--include-dev-deps\n--include-non-failures\n--insecure\n--license-full\n--list-all-pkgs\n--misconfig-scanners\n--offline-scan\n--parallel\n--password-stdin\n--pkg-relationships\n--pkg-types\n--quiet\n--redis-tls\n--removed-pkgs\n--report\n--scanners\n--severity\n--show-suppressed\n--skip-check-update\n--skip-version-check\n--skip-vex-repo-update\n--slow\n--tf-exclude-downloaded-modules\n--timeout\n--trace-http\n--trace-rego\n--vuln-severity-source\n</code></pre>"},{"location":"docs/advanced/telemetry/","title":"Usage Telemetry","text":"<p>Trivy collects anonymous usage data in order to help us improve the product. This document explains what is collected and how you can control it.</p>"},{"location":"docs/advanced/telemetry/#data-collected","title":"Data collected","text":"<p>The following information could be collected:</p> <ul> <li>Environmental information:<ul> <li>Installation identifier</li> <li>Trivy version</li> <li>Operating system</li> </ul> </li> <li>Scan:<ul> <li>Non-revealing scan options (see below for comprehensive list)</li> </ul> </li> </ul>"},{"location":"docs/advanced/telemetry/#captured-scan-options","title":"Captured scan options","text":"<p>The following flags will be included with their value:</p> <pre><code>--clear-cache\n--debug\n--dependency-tree\n--detection-priority\n--distro\n--exit-code\n--exit-on-eol\n--format\n--ignore-status\n--ignore-unfixed\n--image-config-scanners\n--include-deprecated-checks\n--include-dev-deps\n--include-non-failures\n--insecure\n--license-full\n--list-all-pkgs\n--misconfig-scanners\n--offline-scan\n--parallel\n--password-stdin\n--pkg-relationships\n--pkg-types\n--quiet\n--redis-tls\n--removed-pkgs\n--report\n--scanners\n--severity\n--show-suppressed\n--skip-check-update\n--skip-version-check\n--skip-vex-repo-update\n--slow\n--tf-exclude-downloaded-modules\n--timeout\n--trace-http\n--trace-rego\n--vuln-severity-source\n</code></pre>"},{"location":"docs/advanced/telemetry/#privacy","title":"Privacy","text":"<p>No personal information, scan results, or sensitive data is specifically collected. We take the following measures to ensure that:</p> <ul> <li>Installation identifier: one-way hash of machine fingerprint, resulting in opaque ID.</li> <li>Scan: any option that is user-controlled is omitted (never collected). For example, file paths, image names, etc are never collected.</li> </ul> <p>Trivy is an Aqua Security product and adheres to the company's privacy policy: https://aquasec.com/privacy.</p>"},{"location":"docs/advanced/telemetry/#disabling-telemetry","title":"Disabling telemetry","text":"<p>You can disable telemetry altogether using the <code>--disable-telemetry</code> flag. Like other Trivy flags, this can be set on the command line, YAML configuration file, or environment variable. For more details see here.</p> <p>For example:</p> <pre><code>trivy image --disable-telemetry alpine\n</code></pre>"},{"location":"docs/advanced/container/embed-in-dockerfile/","title":"Embed in Dockerfile","text":"<p>Scan your image as part of the build process by embedding Trivy in the Dockerfile. This approach can be used to update Dockerfiles currently using Aqua\u2019s Microscanner.</p> <p><pre><code>$ cat Dockerfile\nFROM alpine:3.7\n\nRUN apk add curl \\\n    &amp;&amp; curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin \\\n    &amp;&amp; trivy rootfs --exit-code 1 --no-progress /\n\n$ docker build -t vulnerable-image .\n</code></pre> Alternatively you can use Trivy in a multistage build. Thus avoiding the insecure <code>curl | sh</code>. Also the image is not changed. <pre><code>[...]\n# Run vulnerability scan on build image\nFROM build AS vulnscan\nCOPY --from=aquasec/trivy:latest /usr/local/bin/trivy /usr/local/bin/trivy\nRUN trivy rootfs --exit-code 1 --no-progress /\n[...]\n</code></pre></p>"},{"location":"docs/advanced/container/unpacked-filesystem/","title":"Unpacked Filesystem","text":"<p>Scan an unpacked container image filesystem.</p> <p>In this case, Trivy works the same way when scanning containers</p> <pre><code>$ docker export $(docker create alpine:3.10.2) | tar -C /tmp/rootfs -xvf -\n$ trivy rootfs /tmp/rootfs\n</code></pre> Result <pre><code>2021-03-08T05:22:26.378Z        INFO    Need to update DB\n2021-03-08T05:22:26.380Z        INFO    Downloading DB...\n20.37 MiB / 20.37 MiB [-------------------------------------------------------------------------------------------------------------------------------------] 100.00% 8.24 MiB p/s 2s\n2021-03-08T05:22:30.134Z        INFO    Detecting Alpine vulnerabilities...\n\n/tmp/rootfs (alpine 3.10.2)\n===========================\nTotal: 20 (UNKNOWN: 0, LOW: 2, MEDIUM: 10, HIGH: 8, CRITICAL: 0)\n\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n|   LIBRARY    | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |                 TITLE                 |\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n| libcrypto1.1 | CVE-2020-1967    | HIGH     | 1.1.1c-r0         | 1.1.1g-r0     | openssl: Segmentation                 |\n|              |                  |          |                   |               | fault in SSL_check_chain              |\n|              |                  |          |                   |               | causes denial of service              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2020-1967  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2021-23839   |          |                   | 1.1.1j-r0     | openssl: incorrect SSLv2              |\n|              |                  |          |                   |               | rollback protection                   |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23839 |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2021-23840   |          |                   |               | openssl: integer                      |\n|              |                  |          |                   |               | overflow in CipherUpdate              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23840 |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2021-23841   |          |                   |               | openssl: NULL pointer dereference     |\n|              |                  |          |                   |               | in X509_issuer_and_serial_hash()      |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23841 |\n+              +------------------+----------+                   +---------------+---------------------------------------+\n|              | CVE-2019-1547    | MEDIUM   |                   | 1.1.1d-r0     | openssl: side-channel weak            |\n|              |                  |          |                   |               | encryption vulnerability              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1547  |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2019-1549    |          |                   |               | openssl: information                  |\n|              |                  |          |                   |               | disclosure in fork()                  |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1549  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2019-1551    |          |                   | 1.1.1d-r2     | openssl: Integer overflow in RSAZ     |\n|              |                  |          |                   |               | modular exponentiation on x86_64      |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1551  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2020-1971    |          |                   | 1.1.1i-r0     | openssl: EDIPARTYNAME                 |\n|              |                  |          |                   |               | NULL pointer de-reference             |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2020-1971  |\n+              +------------------+----------+                   +---------------+---------------------------------------+\n|              | CVE-2019-1563    | LOW      |                   | 1.1.1d-r0     | openssl: information                  |\n|              |                  |          |                   |               | disclosure in PKCS7_dataDecode        |\n|              |                  |          |                   |               | and CMS_decrypt_set1_pkey             |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1563  |\n+--------------+------------------+----------+                   +---------------+---------------------------------------+\n| libssl1.1    | CVE-2020-1967    | HIGH     |                   | 1.1.1g-r0     | openssl: Segmentation                 |\n|              |                  |          |                   |               | fault in SSL_check_chain              |\n|              |                  |          |                   |               | causes denial of service              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2020-1967  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2021-23839   |          |                   | 1.1.1j-r0     | openssl: incorrect SSLv2              |\n|              |                  |          |                   |               | rollback protection                   |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23839 |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2021-23840   |          |                   |               | openssl: integer                      |\n|              |                  |          |                   |               | overflow in CipherUpdate              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23840 |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2021-23841   |          |                   |               | openssl: NULL pointer dereference     |\n|              |                  |          |                   |               | in X509_issuer_and_serial_hash()      |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-23841 |\n+              +------------------+----------+                   +---------------+---------------------------------------+\n|              | CVE-2019-1547    | MEDIUM   |                   | 1.1.1d-r0     | openssl: side-channel weak            |\n|              |                  |          |                   |               | encryption vulnerability              |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1547  |\n+              +------------------+          +                   +               +---------------------------------------+\n|              | CVE-2019-1549    |          |                   |               | openssl: information                  |\n|              |                  |          |                   |               | disclosure in fork()                  |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1549  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2019-1551    |          |                   | 1.1.1d-r2     | openssl: Integer overflow in RSAZ     |\n|              |                  |          |                   |               | modular exponentiation on x86_64      |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1551  |\n+              +------------------+          +                   +---------------+---------------------------------------+\n|              | CVE-2020-1971    |          |                   | 1.1.1i-r0     | openssl: EDIPARTYNAME                 |\n|              |                  |          |                   |               | NULL pointer de-reference             |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2020-1971  |\n+              +------------------+----------+                   +---------------+---------------------------------------+\n|              | CVE-2019-1563    | LOW      |                   | 1.1.1d-r0     | openssl: information                  |\n|              |                  |          |                   |               | disclosure in PKCS7_dataDecode        |\n|              |                  |          |                   |               | and CMS_decrypt_set1_pkey             |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2019-1563  |\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n| musl         | CVE-2020-28928   | MEDIUM   | 1.1.22-r3         | 1.1.22-r4     | In musl libc through 1.2.1,           |\n|              |                  |          |                   |               | wcsnrtombs mishandles particular      |\n|              |                  |          |                   |               | combinations of destination buffer... |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2020-28928 |\n+--------------+                  +          +                   +               +                                       +\n| musl-utils   |                  |          |                   |               |                                       |\n|              |                  |          |                   |               |                                       |\n|              |                  |          |                   |               |                                       |\n|              |                  |          |                   |               |                                       |\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n</code></pre>"},{"location":"docs/advanced/private-registries/","title":"Overview","text":"<p>Trivy can download images from a private registry without the need for installing Docker or any other 3rd party tools. This makes it easy to run within a CI process.</p>"},{"location":"docs/advanced/private-registries/#login","title":"Login","text":"<p>You can log in to a private registry using the <code>trivy registry login</code> command. It uses the Docker configuration file (<code>~/.docker/config.json</code>) to store the credentials under the hood, and the configuration file path can be configured by <code>DOCKER_CONFIG</code> environment variable.</p> <pre><code>$ cat ~/my_password.txt | trivy registry login --username foo --password-stdin ghcr.io\n$ trivy image ghcr.io/your/private_image\n</code></pre>"},{"location":"docs/advanced/private-registries/#passing-credentials","title":"Passing Credentials","text":"<p>You can also provide your credentials when scanning.</p> <pre><code>$ TRIVY_USERNAME=YOUR_USERNAME TRIVY_PASSWORD=YOUR_PASSWORD trivy image YOUR_PRIVATE_IMAGE\n</code></pre> <p>Warning</p> <p>When passing credentials via environment variables or CLI flags, Trivy will attempt to use these credentials for all registries encountered during scanning, regardless of the target registry. This can potentially lead to unintended credential exposure. To mitigate this risk:</p> <ol> <li>Set credentials cautiously and only when necessary.</li> <li>Prefer using <code>trivy registry login</code> to pre-configure credentials with specific registries, which ensures credentials are only sent to appropriate registries.</li> </ol> <p>Trivy also supports providing credentials through CLI flags:</p> <pre><code>$ TRIVY_PASSWORD=YOUR_PASSWORD trivy image --username YOUR_USERNAME YOUR_PRIVATE_IMAGE\n</code></pre> <p>Warning</p> <p>The CLI flag <code>--password</code> is available, but its use is not recommended for security reasons.</p> <p>You can also store your credentials in <code>trivy.yaml</code>. For more information, please refer to the documentation.</p> <p>It can handle multiple sets of credentials as well:</p> <pre><code>$ export TRIVY_USERNAME=USERNAME1,USERNAME2\n$ export TRIVY_PASSWORD=PASSWORD1,PASSWORD2\n$ trivy image YOUR_PRIVATE_IMAGE\n</code></pre> <p>In the example above, Trivy attempts to use two pairs of credentials:</p> <ul> <li>USERNAME1/PASSWORD1</li> <li>USERNAME2/PASSWORD2</li> </ul> <p>Please note that the number of usernames and passwords must be the same.</p> <p>Note</p> <p><code>--password-stdin</code> doesn't support comma-separated passwords.</p>"},{"location":"docs/advanced/private-registries/acr/","title":"Requirements","text":"<p>None, Trivy uses Azure SDK for Go. You don't need to install <code>az</code> command.</p>"},{"location":"docs/advanced/private-registries/acr/#privileges","title":"Privileges","text":"<p>Service principal must have the <code>AcrPull</code> permissions.</p>"},{"location":"docs/advanced/private-registries/acr/#creation-of-a-service-principal","title":"Creation of a service principal","text":"<pre><code>export SP_DATA=$(az ad sp create-for-rbac --name TrivyTest --role AcrPull --scope \"/subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group&gt;/providers/Microsoft.ContainerRegistry/registries/&lt;registry_name&gt;\")\n</code></pre>"},{"location":"docs/advanced/private-registries/acr/#usage","title":"Usage","text":"<pre><code># must set TRIVY_USERNAME empty char\nexport AZURE_CLIENT_ID=$(echo $SP_DATA | jq -r '.appId')\nexport AZURE_CLIENT_SECRET=$(echo $SP_DATA | jq -r '.password')\nexport AZURE_TENANT_ID=$(echo $SP_DATA | jq -r '.tenant')\n</code></pre>"},{"location":"docs/advanced/private-registries/acr/#testing","title":"Testing","text":"<p>You can test credentials in the following manner.</p> <pre><code>docker run -it --rm -v /tmp:/tmp \\\n  -e AZURE_CLIENT_ID -e AZURE_CLIENT_SECRET -e AZURE_TENANT_ID \\\n  aquasec/trivy image your_special_project.azurecr.io/your_special_image:your_special_tag\n</code></pre>"},{"location":"docs/advanced/private-registries/docker-hub/","title":"Docker Hub","text":"<p>See here for the detail. You don't need to provide a credential when download from public repository.</p>"},{"location":"docs/advanced/private-registries/ecr/","title":"AWS ECR (Elastic Container Registry)","text":"<p>Trivy uses AWS SDK. You don't need to install <code>aws</code> CLI tool. You can use AWS CLI's ENV Vars.</p>"},{"location":"docs/advanced/private-registries/ecr/#aws-private-registry-permissions","title":"AWS private registry permissions","text":"<p>You may need to grant permissions to allow Trivy to pull images from private ECR.</p> <p>It depends on how you want to provide AWS Role to trivy.</p> <ul> <li>IAM Role Service account</li> <li>Kube2iam or Kiam</li> </ul>"},{"location":"docs/advanced/private-registries/ecr/#iam-role-service-account","title":"IAM Role Service account","text":"<p>Add the AWS role in trivy's service account annotations:</p> <pre><code>trivy:\n\n  serviceAccount:\n    annotations: {}\n      # eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/IAM_ROLE_NAME\n</code></pre>"},{"location":"docs/advanced/private-registries/ecr/#kube2iam-or-kiam","title":"Kube2iam or Kiam","text":"<p>Add the AWS role to pod's annotations:</p> <pre><code>podAnnotations: {}\n  ## kube2iam/kiam annotation\n  # iam.amazonaws.com/role: arn:aws:iam::ACCOUNT_ID:role/IAM_ROLE_NAME\n</code></pre>"},{"location":"docs/advanced/private-registries/gcr/","title":"Requirements","text":"<p>None, Trivy uses Google Cloud SDK. You don't need to install <code>gcloud</code> command.</p>"},{"location":"docs/advanced/private-registries/gcr/#privileges","title":"Privileges","text":"<p>Credential file must have the <code>roles/storage.objectViewer</code> permissions. More information can be found in Google's documentation</p>"},{"location":"docs/advanced/private-registries/gcr/#json-file-format","title":"JSON File Format","text":"<p>The JSON file specified should have the following format provided by google's service account mechanisms:</p> <pre><code>{\n  \"type\": \"service_account\",\n  \"project_id\": \"your_special_project\",\n  \"private_key_id\": \"XXXXXXXXXXXXXXXXXXXXxx\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nNONONONO\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"somedude@your_special_project.iam.gserviceaccount.com\",\n  \"client_id\": \"1234567890\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/somedude%40your_special_project.iam.gserviceaccount.com\"\n}\n</code></pre>"},{"location":"docs/advanced/private-registries/gcr/#usage","title":"Usage","text":"<p>If you want to use target project's repository, you can set them via <code>GOOGLE_APPLICATION_CREDENTIALS</code>. <pre><code># must set TRIVY_USERNAME empty char\nexport GOOGLE_APPLICATION_CREDENTIALS=/path/to/credential.json\n</code></pre></p>"},{"location":"docs/advanced/private-registries/gcr/#testing","title":"Testing","text":"<p>You can test credentials in the following manner (assuming they are in <code>/tmp</code> on host machine).</p> <pre><code>docker run -it --rm -v /tmp:/tmp\\\n  -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/service_account.json\\\n  aquasec/trivy image gcr.io/your_special_project/your_special_image:your_special_tag\n</code></pre>"},{"location":"docs/advanced/private-registries/self/","title":"Self-Hosted","text":"<p>BasicAuth server needs <code>TRIVY_USERNAME</code> and <code>TRIVY_PASSWORD</code>.</p> <pre><code>export TRIVY_USERNAME={USERNAME}\nexport TRIVY_PASSWORD={PASSWORD}\n\n# if you want to use 80 port, use NonSSL\nexport TRIVY_NON_SSL=true\n</code></pre>"},{"location":"docs/compliance/compliance/","title":"Built-in Compliance Reports","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy\u2019s compliance flag lets you curate a specific set of checks into a report. In a typical Trivy scan, there are hundreds of different checks for many different components and configurations, but sometimes you already know which specific checks you are interested in. Often this would be an industry accepted set of checks such as CIS, or some vendor specific guideline, or your own organization policy that you want to comply with. These are all possible using the flexible compliance infrastructure that's built into Trivy. Compliance reports are defined as simple YAML documents that select checks to include in the report.</p>"},{"location":"docs/compliance/compliance/#usage","title":"Usage","text":"<p>Compliance report is currently supported in the following targets (trivy sub-commands):</p> <ul> <li><code>trivy image</code></li> <li><code>trivy k8s</code></li> </ul> <p>Add the <code>--compliance</code> flag to the command line, and set it's value to desired report. For example: <code>trivy k8s cluster --compliance k8s-nsa</code> (see below for built-in and custom reports)</p>"},{"location":"docs/compliance/compliance/#options","title":"Options","text":"<p>The following flags are compatible with <code>--compliance</code> flag and allows customizing it's output:</p> flag effect <code>--report summary</code> shows a summary of the results. for every control shows the number of failed checks. <code>--report all</code> shows fully detailed results. for every control shows where it failed and why. <code>--format table</code> shows results in textual table format (good for human readability). <code>--format json</code> shows results in json format (good for machine readability)."},{"location":"docs/compliance/compliance/#built-in-compliance","title":"Built-in compliance","text":"<p>Trivy has a number of built-in compliance reports that you can asses right out of the box. to specify a built-in compliance report, select it by ID like <code>trivy --compliance &lt;compliance_id&gt;</code>.</p> <p>For the list of built-in compliance reports, please see the relevant section:</p> <ul> <li>Docker compliance</li> <li>Kubernetes compliance</li> </ul>"},{"location":"docs/compliance/compliance/#contribute-a-built-in-compliance-report","title":"Contribute a Built-in Compliance Report","text":""},{"location":"docs/compliance/compliance/#define-a-compliance-spec-based-on-cis-benchmark-or-other-specs","title":"Define a Compliance spec, based on CIS benchmark or other specs","text":"<p>Here is an example for CIS compliance report:</p> <pre><code>---\nspec:\n  id: k8s-cis-1.23\n  title: CIS Kubernetes Benchmarks v1.23\n  description: CIS Kubernetes Benchmarks\n  platform: k8s\n  type: cis\n  version: '1.23'\n  relatedResources:\n  - https://www.cisecurity.org/benchmark/kubernetes\n  controls:\n  - id: 1.1.1\n    name: Ensure that the API server pod specification file permissions are set to\n      600 or more restrictive\n    description: Ensure that the API server pod specification file has permissions\n      of 600 or more restrictive\n    checks:\n    - id: AVD-KCV-0073\n    commands:\n    - id: CMD-0001\n    severity: HIGH\n</code></pre>"},{"location":"docs/compliance/compliance/#compliance-id","title":"Compliance ID","text":"<p>ID field is the name used to execute the compliance scan via trivy example:</p> <pre><code>trivy k8s --compliance k8s-cis-1.23\n</code></pre> <p>ID naming convention: {platform}-{type}-{version}</p>"},{"location":"docs/compliance/compliance/#compliance-platform","title":"Compliance Platform","text":"<p>The platform field specifies the type of platform on which to run this compliance report. Supported platforms:</p> <ul> <li>k8s (native kubernetes cluster)</li> <li>eks (elastic kubernetes service)</li> <li>aks (azure kubernetes service)</li> <li>gke (google kubernetes engine)</li> <li>rke2 (rancher kubernetes engine v2)</li> <li>ocp (OpenShift Container Platform)</li> <li>docker (docker engine)</li> <li>aws (amazon web services)</li> </ul>"},{"location":"docs/compliance/compliance/#compliance-type","title":"Compliance Type","text":"<p>The type field specifies the kind compliance report.</p> <ul> <li>cis (Center for Internet Security)</li> <li>nsa (National Security Agency)</li> <li>pss (Pod Security Standards)</li> </ul>"},{"location":"docs/compliance/compliance/#compliance-version","title":"Compliance Version","text":"<p>The version field specifies the version of the compliance report.</p> <ul> <li>1.23</li> </ul>"},{"location":"docs/compliance/compliance/#compliance-check-id","title":"Compliance Check ID","text":"<p>Specify the check ID that needs to be evaluated based on the information collected from the command data output to assess the control.</p> <p>Example of how to define check data under checks folder:</p> <pre><code># METADATA\n# title: \"Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive\"\n# description: \"Ensure that the kubelet.conf file has permissions of 600 or more restrictive.\"\n# scope: package\n# schemas:\n# - input: schema[\"kubernetes\"]\n# related_resources:\n# - https://www.cisecurity.org/benchmark/kubernetes\n# custom:\n#   id: KCV0073\n#   avd_id: AVD-KCV-0073\n#   severity: HIGH\n#   short_code: ensure-kubelet.conf-file-permissions-600-or-more-restrictive.\n#   recommended_action: \"Change the kubelet.conf file permissions to 600 or more restrictive if exist\"\n#   input:\n#     selector:\n#     - type: kubernetes\npackage builtin.kubernetes.KCV0073\n\nimport data.lib.kubernetes\n\ntypes := [\"master\", \"worker\"]\n\nvalidate_kubelet_file_permission(sp) := {\"kubeletConfFilePermissions\": violation} {\n sp.kind == \"NodeInfo\"\n sp.type == types[_]\n violation := {permission | permission = sp.info.kubeletConfFilePermissions.values[_]; permission &gt; 600}\n count(violation) &gt; 0\n}\n\ndeny[res] {\n output := validate_kubelet_file_permission(input)\n msg := \"Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive\"\n res := result.new(msg, output)\n}\n</code></pre>"},{"location":"docs/compliance/compliance/#compliance-command-id","title":"Compliance Command ID","text":"<p>Note: This field is not mandatory, it is relevant to k8s compliance report when node-collector is in use</p> <p>Specify the command ID (#ref) that needs to be executed to collect the information required to evaluate the control.</p> <p>Example of how to define command data under commands folder</p> <pre><code>---\n- id: CMD-0001\n  key: kubeletConfFilePermissions\n  title: kubelet.conf file permissions\n  nodeType: worker\n  audit: stat -c %a $kubelet.kubeconfig\n  platforms:\n    - k8s\n    - aks\n</code></pre>"},{"location":"docs/compliance/compliance/#command-id","title":"Command ID","text":"<p>Find the next command ID by running the command on trivy-checks project.</p> <pre><code>make command-id\n</code></pre>"},{"location":"docs/compliance/compliance/#command-key","title":"Command Key","text":"<ul> <li>Re-use an existing key or specify a new one (make sure key name has no spaces)</li> </ul> <p>Note: The key value should match the key name evaluated by the Rego check.</p>"},{"location":"docs/compliance/compliance/#command-title","title":"Command Title","text":"<p>Represent the purpose of the command</p>"},{"location":"docs/compliance/compliance/#command-nodetype","title":"Command NodeType","text":"<p>Specify the node type on which the command is supposed to run.</p> <ul> <li>worker</li> <li>master</li> </ul>"},{"location":"docs/compliance/compliance/#command-audit","title":"Command Audit","text":"<p>Specify here the shell command to be used please make sure to add error suppression (2&gt;/dev/null)</p>"},{"location":"docs/compliance/compliance/#command-platforms","title":"Command Platforms","text":"<p>The list of platforms that support this command. Name should be taken from this list Platforms</p>"},{"location":"docs/compliance/compliance/#command-config-files","title":"Command Config Files","text":"<p>The commands use a configuration file that helps obtain the paths to binaries and configuration files based on different platforms (e.g., Rancher, native Kubernetes, etc.).</p> <p>For example:</p> <pre><code>kubelet:\n    bins:\n      - kubelet\n      - hyperkube kubelet\n    confs:\n      - /etc/kubernetes/kubelet-config.yaml\n      - /var/lib/kubelet/config.yaml\n</code></pre>"},{"location":"docs/compliance/compliance/#commands-files-location","title":"Commands Files Location","text":"<p>Currently checks files location are :<code>https://github.com/aquasecurity/trivy-checks/tree/main/checks</code></p> <p>Command files location: <code>https://github.com/aquasecurity/trivy-checks/tree/main/commands</code> under command file</p> <p>Note: command config files will be located under <code>https://github.com/aquasecurity/trivy-checks/tree/main/commands</code> as well</p>"},{"location":"docs/compliance/compliance/#node-collector-output","title":"Node-collector output","text":"<p>The node collector will read commands and execute each command, and incorporate the output into the NodeInfo resource.</p> <p>example:</p> <pre><code>{\n  \"apiVersion\": \"v1\",\n  \"kind\": \"NodeInfo\",\n  \"metadata\": {\n    \"creationTimestamp\": \"2023-01-04T11:37:11+02:00\"\n  },\n  \"type\": \"master\",\n  \"info\": {\n    \"adminConfFileOwnership\": {\n      \"values\": [\n        \"root:root\"\n      ]\n    },\n    \"adminConfFilePermissions\": {\n      \"values\": [\n        600\n      ]\n    }\n    ...\n  }\n}\n</code></pre>"},{"location":"docs/compliance/compliance/#custom-compliance","title":"Custom compliance","text":"<p>You can create your own custom compliance report. A compliance report is a simple YAML document in the following format:</p> <pre><code>spec:\n  id: \"k8s-myreport\" # report unique identifier. this should not container spaces.\n  title: \"My custom Kubernetes report\" # report title. Any one-line title.\n  description: \"Describe your report\" # description of the report. Any text.\n  relatedResources :\n    - https://some.url # useful references. URLs only.\n  version: \"1.0\" # spec version (string)\n  controls:\n    - name: \"Non-root containers\" # Name for the control (appears in the report as is). Any one-line name.\n      description: 'Check that container is not running as root' # Description (appears in the report as is). Any text.\n      id: \"1.0\" # control identifier (string)\n      checks:   # list of existing Trivy checks that define the control\n        - id: AVD-KSV-0012 # check ID. Must start with `AVD-` or `CVE-` \n      severity: \"MEDIUM\" # Severity for the control (note that checks severity isn't used)\n    - name: \"Immutable container file systems\"\n      description: 'Check that container root file system is immutable'\n      id: \"1.1\"\n      checks:\n        - id: AVD-KSV-0014\n      severity: \"LOW\"\n</code></pre> <p>The check id field (<code>controls[].checks[].id</code>) is referring to existing check by it's \"AVD ID\". This AVD ID is easily located in the check's source code metadata header, or by browsing Aqua vulnerability DB, specifically in the Misconfigurations and Vulnerabilities sections.</p> <p>Once you have a compliance spec, you can select it by file path: <code>trivy --compliance @&lt;/path/to/compliance.yaml&gt;</code> (note the <code>@</code> indicating file path instead of report id).</p>"},{"location":"docs/compliance/contrib-compliance/","title":"Custom Compliance Spec","text":"<p>Trivy supports several different compliance specs. The details on compliance scanning with Trivy are provided in the compliance documentation. All of the Compliance Specs currently available in Trivy can be found in the <code>trivy-checks/pkg/specs/compliance/</code> directory (Link).</p> <p>New checks are based on the custom compliance report detailed in the main documentation. If you would like to create your custom compliance report, please reference the information in the main documentation. This section details how community members can contribute new Compliance Specs to Trivy.</p> <p>All compliance specs in Trivy are based on formal compliance reports such as CIS Benchmarks.</p>"},{"location":"docs/compliance/contrib-compliance/#contributing-new-compliance-specs","title":"Contributing new Compliance Specs","text":"<p>Compliance specs can be based on new compliance reports becoming available e.g. a new CIS Benchmark version, or identifying missing compliance specs that Trivy users would like to access.</p>"},{"location":"docs/compliance/contrib-compliance/#create-a-new-compliance-spec","title":"Create a new Compliance Spec","text":"<p>The existing compliance specs in Trivy are located under the <code>trivy-checks/pkg/specs/compliance/</code> directory (Link).</p> <p>Create a new file under <code>trivy-checks/specs/compliance/</code> and name the file in the format of \"provider-resource-spectype-version.yaml\". For example, the file name for AWS CIS Benchmarks for EKS version 1.4 is: <code>aws-eks-cis-1.4.yaml</code>. Note that if the compliance spec is not specific to a provider, the <code>provider</code> field can be ignored.</p>"},{"location":"docs/compliance/contrib-compliance/#minimum-spec-structure","title":"Minimum spec structure","text":"<p>The structure of the compliance spec is detailed in the main documentation.</p> <p>The first section in the spec is focused on the metadata of the spec. Replace all the fields of the metadata with the information relevant to the compliance spec that will be added. This information can be taken from the official report e.g. the CIS Benchmark report.</p>"},{"location":"docs/compliance/contrib-compliance/#populating-the-control-section","title":"Populating the <code>control</code> section","text":"<p>Compliance specs detail a set of checks that should pass so that the resource is compliant with the official benchmark specifications. There are two ways in which Trivy compliance checks can enforce the compliance specification:</p> <ol> <li>The check is available in Trivy, as part of the <code>trivy-checks</code> and can be referenced in the Compliance Spec</li> <li>The check is not available in Trivy and a manual check has to be added to the Compliance Spec</li> </ol> <p>Additional information is provided below.</p>"},{"location":"docs/compliance/contrib-compliance/#1-referencing-a-check-that-is-already-part-of-trivy","title":"1. Referencing a check that is already part of Trivy","text":"<p>Trivy has a comprehensive list of checks as part of its misconfiguration scanning. These can be found in the <code>trivy-checks/checks</code> directory (Link). If the check is present, the <code>AVD_ID</code> and other information from the check has to be used.</p> <p>Note: Take a look at the more generic compliance specs that are already available in Trivy. If you are adding new compliance spec to Kubernetes e.g. AWS EKS CIS Benchmarks, chances are high that the check you would like to add to the new spec has already been defined in the general <code>k8s-ci-v.000.yaml</code> compliance spec. The same applies for creating specific Cloud Provider Compliance Specs and the generic compliance specs available.</p> <p>For example, the following check is detailed in the AWS EKS CIS v1.4 Benchmark: <code>3.1.2 Ensure that the kubelet kubeconfig file ownership is set to root:root (Manual)</code></p> <p>This check can be found in the general K8s CIS Compliance Benchmark: <code>k8s-cis-1.23.yaml</code> (Link)</p> <p>Thus, we can use the information already present:</p> <pre><code>  - id: 3.1.2\n    name: Ensure that the kubelet service file ownership is set to root:root (Manual)\n    description: Ensure that the kubelet service file ownership is set to root:root\n    checks:\n      - id: AVD-KCV-0070\n    severity: HIGH\n</code></pre> <ul> <li>The <code>ID</code>, <code>name</code>, and <code>description</code> is taken directly from the AWS EKS CIS Benchmarks</li> <li>The <code>check</code> and <code>severity</code> are taken from the existing compliance check in the <code>k8s-cis-1.23.yaml</code></li> </ul>"},{"location":"docs/compliance/contrib-compliance/#2-referencing-a-check-manually-that-is-not-part-of-the-trivy-default-checks","title":"2. Referencing a check manually that is not part of the Trivy default checks","text":"<p>If the check does not already exist in the Aqua Vulnerability Database (AVD) and is not part of the trivy-checks, the fields in the compliance spec for the check have to be populated manually. This is done by referencing the information in the official compliance specification.</p> <p>Below is the beginning of the information of the EKS CIS Benchmarks v1.4.0:</p> <p></p> <p>The corresponding check in the <code>control</code> section will look like this:</p> <pre><code>  - id: 2.1.1\n    name: Enable audit Logs (Manual)\n    description: |\n      Control plane logs provide visibility into operation of the EKS Control plane components systems. \n      The API server audit logs record all accepted and rejected requests in the cluster. \n      When enabled via EKS configuration the control plane logs for a cluster are exported to a CloudWatch \n      Log Group for persistence.\n    checks: null\n    severity: MEDIUM\n</code></pre> <ul> <li>Again, the <code>id</code>, <code>name</code> and <code>description</code> are taken directly from the EKS CIS Benchmarks v1.4.0</li> <li>The <code>checks</code> is in this case <code>null</code> as the check is not currently present in the AVD and does not have a check in the trivy policies repository</li> <li>Since the check does not exist in Trivy, the <code>severity</code> will be <code>MEDIUM</code>. However, in some cases, the compliance report e.g. the CIS Benchmark report will specify the severity</li> </ul>"},{"location":"docs/compliance/contrib-compliance/#contributing-new-checks-to-trivy-checks","title":"Contributing new checks to trivy-checks","text":"<p>All of the checks in trivy-policies can be referenced in the compliance specs. To write new Rego checks for Trivy, please take a look at the contributing documentation for checks.</p>"},{"location":"docs/compliance/contrib-compliance/#test-the-compliance-spec","title":"Test the Compliance Spec","text":"<p>To test the compliance check, pass the new path into the Trivy scan through the <code>--compliance</code> flag. For instance, to pass the check to the Trivy Kubernetes scan use the following command structure:</p> <pre><code>trivy k8s cluster --compliance @&lt;/path/to/compliance.yaml&gt; --report summary\n</code></pre> <p>Note: The <code>@</code> is required before the filepath.</p>"},{"location":"docs/configuration/","title":"Configuration","text":"<p>Trivy's settings can be configured in any of the following methods, which will apply in the following precedence:</p> <ol> <li>CLI flags (overrides all other settings)</li> <li>Environment variables (overrides config file settings)</li> <li>Configuration file</li> </ol>"},{"location":"docs/configuration/#cli-flags","title":"CLI Flags","text":"<p>You can view the list of available flags by adding the <code>--help</code> flag to a Trivy command, or by exploring the CLI reference.</p>"},{"location":"docs/configuration/#environment-variables","title":"Environment Variables","text":"<p>Any CLI option can be set as an environment variable. The environment variable name are similar to the CLI option name, with the following augmentations:</p> <ul> <li>Add <code>TRIVY_</code> prefix</li> <li>All uppercase letters</li> <li>Replace <code>-</code> with <code>_</code></li> </ul> <p>For example:</p> <ul> <li><code>--debug</code> =&gt; <code>TRIVY_DEBUG</code></li> <li><code>--cache-dir</code> =&gt; <code>TRIVY_CACHE_DIR</code></li> </ul> <pre><code>$ TRIVY_DEBUG=true TRIVY_SEVERITY=CRITICAL trivy image alpine:3.15\n</code></pre>"},{"location":"docs/configuration/#configuration-file","title":"Configuration File","text":"<p>Any setting can be set in a YAML file. By default, config file named <code>trivy.yaml</code> is read from the current directory where Trivy is run. To load configuration from a different file, use the <code>--config</code> flag and specify the config path to load: <code>trivy --config /etc/trivy/myconfig.yaml</code>.</p> <p>The structure and settings of the YAML config file is documented in the Config file document.</p>"},{"location":"docs/configuration/cache/","title":"Cache","text":"<p>The cache directory includes </p> <ul> <li>Cache of previous scans (Scan cache).</li> <li>Vulnerability Database<sup>1</sup></li> <li>Java Index Database<sup>2</sup></li> <li>Misconfiguration Checks<sup>3</sup></li> <li>VEX Repositories</li> </ul> <p>The cache option is common to all scanners.</p>"},{"location":"docs/configuration/cache/#clear-caches","title":"Clear Caches","text":"<p><code>trivy clean</code> subcommand removes caches.</p> <pre><code>$ trivy clean --scan-cache\n</code></pre> Result <pre><code>2024-06-21T21:58:21+04:00       INFO    Removing scan cache...\n</code></pre> <p>If you want to delete cached vulnerability databases, use <code>--vuln-db</code>. You can also delete all caches with <code>--all</code>. See <code>trivy clean --help</code> for details.</p>"},{"location":"docs/configuration/cache/#cache-directory","title":"Cache Directory","text":"<p>Specify where the cache is stored with <code>--cache-dir</code>.</p> <pre><code>$ trivy --cache-dir /tmp/trivy/ image python:3.4-alpine3.9\n</code></pre>"},{"location":"docs/configuration/cache/#scan-cache-backend","title":"Scan Cache Backend","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy utilizes a scan cache to store analysis results, such as package lists. It supports three types of backends for this cache: </p> <ul> <li>Local File System (<code>fs</code>)<ul> <li>The cache path can be specified by <code>--cache-dir</code></li> </ul> </li> <li>Memory (<code>memory</code>)</li> <li>Redis (<code>redis://</code>)<ul> <li><code>redis://[HOST]:[PORT]</code></li> <li>TTL can be configured via <code>--cache-ttl</code></li> </ul> </li> </ul>"},{"location":"docs/configuration/cache/#local-file-system","title":"Local File System","text":"<p>The local file system backend is the default choice for container image, VM image and repository scans.</p> <p>Note</p> <p>Internally, this backend uses BoltDB, which has an important limitation: only one process can access the cache at a time. Subsequent processes attempting to access the cache will be locked. For more details on this limitation, refer to the troubleshooting guide.</p>"},{"location":"docs/configuration/cache/#memory","title":"Memory","text":"<p>The memory backend stores analysis results in memory, which means the cache is discarded when the process ends. This makes it useful in scenarios where caching is not required or desired. It serves as the default for filesystem and SBOM scans and can also be employed for container image scans when caching is unnecessary.</p> <p>To use the memory backend for a container image scan, you can use the following command:</p> <pre><code>$ trivy image debian:11 --cache-backend memory\n</code></pre>"},{"location":"docs/configuration/cache/#redis","title":"Redis","text":"<p>The Redis backend is particularly useful when you need to share the cache across multiple Trivy instances. You can set up Trivy to use a Redis backend with a command like this:</p> <pre><code>$ trivy server --cache-backend redis://localhost:6379\n</code></pre> <p>This approach allows for centralized caching, which can be beneficial in distributed or high-concurrency environments.</p> <p>If you want to use TLS with Redis, you can enable it by specifying the <code>--redis-tls</code> flag.</p> <pre><code>$ trivy server --cache-backend redis://localhost:6379 --redis-tls\n</code></pre> <p>Trivy also supports for connecting to Redis with your certificates. You need to specify <code>--redis-ca</code> , <code>--redis-cert</code> , and <code>--redis-key</code> options.</p> <pre><code>$ trivy server --cache-backend redis://localhost:6379 \\\n  --redis-ca /path/to/ca-cert.pem \\\n  --redis-cert /path/to/cert.pem \\\n  --redis-key /path/to/key.pem\n</code></pre> <ol> <li> <p>Downloaded when scanning for vulnerabilities\u00a0\u21a9</p> </li> <li> <p>Downloaded when scanning <code>jar/war/par/ear</code> files\u00a0\u21a9</p> </li> <li> <p>Downloaded when scanning for misconfigurations\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/configuration/db/","title":"Trivy Databases","text":"<p>When you install Trivy, the installed artifact contains the scanner engine but is lacking relevant security information needed to make security detections and recommendations. These so called \"databases\" are automatically fetched and maintained by Trivy as needed, so normally you shouldn't notice or worry about them.  This document elaborates on the database management mechanism and its configuration options.</p> <p>Trivy relies on the following databases:</p> DB Artifact name Contents Purpose Vulnerabilities DB <code>trivy-db</code> CVE information collected from various feeds used only for vulnerability scanning Java DB <code>trivy-java-db</code> Index of Java artifacts and their hash digest used to identify Java artifacts only in JAR scanning Checks Bundle <code>trivy-checks</code> Logic of misconfiguration checks used only in misconfiguration/IaC scanning <p>Note</p> <p>This is not an exhaustive list of Trivy's external connectivity requirements. There are additional external resources which may be required by specific Trivy features. To learn about external connectivity requirements, see the Advanced Network Scenarios.</p>"},{"location":"docs/configuration/db/#locations","title":"Locations","text":"<p>Trivy's databases are published to the following locations:</p> Registry Image Address Link GHCR <code>ghcr.io/aquasecurity/trivy-db</code> https://ghcr.io/aquasecurity/trivy-db <code>ghcr.io/aquasecurity/trivy-java-db</code> https://ghcr.io/aquasecurity/trivy-java-db <code>ghcr.io/aquasecurity/trivy-checks</code> https://ghcr.io/aquasecurity/trivy-checks Docker Hub <code>aquasec/trivy-db</code> https://hub.docker.com/r/aquasec/trivy-db <code>aquasec/trivy-java-db</code> https://hub.docker.com/r/aquasec/trivy-java-db <code>aquasec/trivy-checks</code> https://hub.docker.com/r/aquasec/trivy-checks AWS ECR <code>public.ecr.aws/aquasecurity/trivy-db</code> https://gallery.ecr.aws/aquasecurity/trivy-db <code>public.ecr.aws/aquasecurity/trivy-java-db</code> https://gallery.ecr.aws/aquasecurity/trivy-java-db <code>public.ecr.aws/aquasecurity/trivy-checks</code> https://gallery.ecr.aws/aquasecurity/trivy-checks <p>In addition, images are also available via pull-through cache registries like Google Container Registry Mirror.</p>"},{"location":"docs/configuration/db/#default-locations","title":"Default Locations","text":"<p>Trivy will attempt to pull images from the following registries in the order specified.</p> <ol> <li><code>mirror.gcr.io/aquasec</code></li> <li><code>ghcr.io/aquasecurity</code></li> </ol> <p>You can specify additional alternative repositories as explained in the configuring database locations section.</p>"},{"location":"docs/configuration/db/#db-management-configuration","title":"DB Management Configuration","text":""},{"location":"docs/configuration/db/#database-locations","title":"Database Locations","text":"<p>You can configure Trivy to download databases from alternative locations by using the flags:</p> <ul> <li><code>--db-repository</code></li> <li><code>--java-db-repository</code></li> <li><code>--checks-bundle-repository</code></li> </ul> <p>The value should be an image address in a container registry.</p> <p>For example:</p> <pre><code>trivy image --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db alpine\n</code></pre> <p>The flags accepts multiple values, which can be used to specify multiple alternative repository locations. In case of a transient errors (e.g. status 429 or 5xx), Trivy will fall back to alternative registries in the order specified.</p> <p>For example:</p> <pre><code>trivy image --db-repository my.registry.local/trivy-db --db-repository registry.gitlab.com/gitlab-org/security-products/dependencies/trivy-db alpine\n</code></pre> <p>The Checks Bundle registry location option does not support fallback through multiple options. This is because in case of a failure pulling the Checks Bundle, Trivy will use the embedded checks as a fallback.</p> <p>Note</p> <p>Setting the repository location flags override the default values which include the official db locations. In case you want to preserve the default locations, you should include them in the list the you set as repository locations.</p> <p>Note</p> <p>When pulling <code>trivy-db</code> or <code>trivy-java-db</code>, if image tag is not specified, Trivy defaults to the db schema number instead of the <code>latest</code> tag.</p>"},{"location":"docs/configuration/db/#skip-updates","title":"Skip updates","text":"<p>You can configure Trivy to not attempt to download any or all database(s), using the flags:</p> <ul> <li><code>--skip-db-update</code></li> <li><code>--skip-java-db-update</code></li> <li><code>--skip-check-update</code></li> </ul> <p>For example:</p> <pre><code>trivy image --skip-db-update --skip-java-db-update --skip-check-update alpine\n</code></pre>"},{"location":"docs/configuration/db/#only-update","title":"Only update","text":"<p>You can ask <code>Trivy</code> to only update the database without performing a scan. This action will ensure Trivy is up to date, and populate Trivy's database cache for subsequent scans.</p> <ul> <li><code>--download-db-only</code></li> <li><code>--download-java-db-only</code></li> </ul> <p>For example:</p> <pre><code>trivy image --download-db-only\n</code></pre> <p>Note that currently there is no option to download only the Checks Bundle.</p>"},{"location":"docs/configuration/db/#remove-databases","title":"Remove Databases","text":"<p><code>trivy clean</code> command removes caches and databases. You can select which cache component to remove:</p> option description <code>-a</code>/<code>--all</code> remove all caches <code>--checks-bundle</code> remove checks bundle <code>--java-db</code> remove Java database <code>--scan-cache</code> remove scan cache (container and VM image analysis results) <code>--vuln-db</code> remove vulnerability database <p>Example:</p> <pre><code>$ trivy clean --vuln-db --java-db\n2024-06-24T11:42:31+06:00       INFO    Removing vulnerability database...\n2024-06-24T11:42:31+06:00       INFO    Removing Java database...\n</code></pre>"},{"location":"docs/configuration/filtering/","title":"Filtering","text":"<p>Trivy provides various methods for filtering the results.</p> <pre><code>flowchart LR\n  Issues(\"Detected\\nIssues\") --&gt; Severity\n\n  subgraph Filtering\n    subgraph Prioritization\n        direction TB\n        Severity(\"By Severity\") --&gt; Status(\"By Status\")\n    end\n    subgraph Suppression\n        Status --&gt; Ignore(\"By Finding IDs\")\n        Ignore --&gt; Rego(\"By Rego\")\n        Rego --&gt; VEX(\"By VEX\")\n    end\n  end\n  VEX --&gt; Results</code></pre> <p>Similar to the functionality of filtering results, you can also limit the sub-targets for each scanner. For information on these settings, please refer to the scanner-specific documentation (vulnerability , misconfiguration, etc.).</p>"},{"location":"docs/configuration/filtering/#prioritization","title":"Prioritization","text":"<p>You can filter the results by </p> <ul> <li>Severity</li> <li>Status</li> </ul>"},{"location":"docs/configuration/filtering/#by-severity","title":"By Severity","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>Use <code>--severity</code> option.</p> <pre><code>$ trivy image --severity HIGH,CRITICAL ruby:2.4.0\n</code></pre> Result <pre><code>2019-05-16T01:51:46.255+0900    INFO    Updating vulnerability database...\n2019-05-16T01:51:49.213+0900    INFO    Detecting Debian vulnerabilities...\n\nruby:2.4.0 (debian 8.7)\n=======================\nTotal: 1785 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1680, CRITICAL: 105)\n\n+-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+\n|           LIBRARY           | VULNERABILITY ID | SEVERITY |     INSTALLED VERSION     |          FIXED VERSION           |                      TITLE                      |\n+-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+\n| apt                         | CVE-2019-3462    | CRITICAL | 1.0.9.8.3                 | 1.0.9.8.5                        | Incorrect sanitation of the                     |\n|                             |                  |          |                           |                                  | 302 redirect field in HTTP                      |\n|                             |                  |          |                           |                                  | transport method of...                          |\n+-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+\n| bash                        | CVE-2019-9924    | HIGH     | 4.3-11                    | 4.3-11+deb8u2                    | bash: BASH_CMD is writable in                   |\n|                             |                  |          |                           |                                  | restricted bash shells                          |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2016-7543    |          |                           | 4.3-11+deb8u1                    | bash: Specially crafted                         |\n|                             |                  |          |                           |                                  | SHELLOPTS+PS4 variables allows                  |\n|                             |                  |          |                           |                                  | command substitution                            |\n+-----------------------------+------------------+          +---------------------------+----------------------------------+-------------------------------------------------+\n| binutils                    | CVE-2017-8421    |          | 2.25-5                    |                                  | binutils: Memory exhaustion in                  |\n|                             |                  |          |                           |                                  | objdump via a crafted PE file                   |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2017-14930   |          |                           |                                  | binutils: Memory leak in                        |\n|                             |                  |          |                           |                                  | decode_line_info                                |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2017-7614    |          |                           |                                  | binutils: NULL                                  |\n|                             |                  |          |                           |                                  | pointer dereference in                          |\n|                             |                  |          |                           |                                  | bfd_elf_final_link function                     |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2014-9939    |          |                           |                                  | binutils: buffer overflow in                    |\n|                             |                  |          |                           |                                  | ihex.c                                          |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2017-13716   |          |                           |                                  | binutils: Memory leak with the                  |\n|                             |                  |          |                           |                                  | C++ symbol demangler routine                    |\n|                             |                  |          |                           |                                  | in libiberty                                    |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2018-12699   |          |                           |                                  | binutils: heap-based buffer                     |\n|                             |                  |          |                           |                                  | overflow in finish_stab in                      |\n|                             |                  |          |                           |                                  | stabs.c                                         |\n+-----------------------------+------------------+          +---------------------------+----------------------------------+-------------------------------------------------+\n| bsdutils                    | CVE-2015-5224    |          | 2.25.2-6                  |                                  | util-linux: File name                           |\n|                             |                  |          |                           |                                  | collision due to incorrect                      |\n|                             |                  |          |                           |                                  | mkstemp use                                     |\n+                             +------------------+          +                           +----------------------------------+-------------------------------------------------+\n|                             | CVE-2016-2779    |          |                           |                                  | util-linux: runuser tty hijack                  |\n|                             |                  |          |                           |                                  | via TIOCSTI ioctl                               |\n+-----------------------------+------------------+----------+---------------------------+----------------------------------+-------------------------------------------------+\n</code></pre> <pre><code>trivy config --severity HIGH,CRITICAL examples/misconf/mixed\n</code></pre> Result <pre><code>2022-05-16T13:50:42.718+0100    INFO    Detected config files: 3\n\nDockerfile (dockerfile)\n=======================\nTests: 17 (SUCCESSES: 16, FAILURES: 1)\nFailures: 1 (HIGH: 1, CRITICAL: 0)\n\nHIGH: Last USER command in Dockerfile should not be 'root'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n\nSee https://avd.aquasec.com/misconfig/ds002\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Dockerfile:3\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   3 [ USER root\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\ndeployment.yaml (kubernetes)\n============================\nTests: 8 (SUCCESSES: 8, FAILURES: 0)\nFailures: 0 (HIGH: 0, CRITICAL: 0)\n\n\nmain.tf (terraform)\n===================\nTests: 1 (SUCCESSES: 0, FAILURES: 1)\nFailures: 1 (HIGH: 0, CRITICAL: 1)\n\nCRITICAL: Classic resources should not be used.\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nAWS Classic resources run in a shared environment with infrastructure owned by other AWS customers. You should run\nresources in a VPC instead.\n\nSee https://avd.aquasec.com/misconfig/avd-aws-0081\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n main.tf:2-4\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   2 \u250c resource \"aws_db_security_group\" \"sg\" {\n   3 \u2502\n   4 \u2514 }\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre>"},{"location":"docs/configuration/filtering/#by-status","title":"By Status","text":"Scanner Supported Vulnerability \u2713 Misconfiguration Secret License <p>Trivy supports the following vulnerability statuses:</p> <ul> <li><code>unknown</code></li> <li><code>not_affected</code>: this package is not affected by this vulnerability on this platform</li> <li><code>affected</code>: this package is affected by this vulnerability on this platform, but there is no patch released yet</li> <li><code>fixed</code>: this vulnerability is fixed on this platform</li> <li><code>under_investigation</code>: it is currently unknown whether or not this vulnerability affects this package on this platform, and it is under investigation</li> <li><code>will_not_fix</code>: this package is affected by this vulnerability on this platform, but there is currently no intention to fix it (this would primarily be for flaws that are of Low or Moderate impact that pose no significant risk to customers)</li> <li><code>fix_deferred</code>: this package is affected by this vulnerability on this platform, and may be fixed in the future</li> <li><code>end_of_life</code>: this package has been identified to contain the impacted component, but analysis to determine whether it is affected or not by this vulnerability was not performed</li> </ul> <p>Note that vulnerabilities with the <code>unknown</code>, <code>not_affected</code> or <code>under_investigation</code> status are not detected. These are only defined for comprehensiveness, and you will not have the opportunity to specify these statuses.</p> <p>Some statuses are supported in limited distributions.</p> OS Fixed Affected Under Investigation Will Not Fix Fix Deferred End of Life Debian \u2713 \u2713 \u2713 \u2713 RHEL \u2713 \u2713 \u2713 \u2713 \u2713 \u2713 Other OSes \u2713 \u2713 <p>To ignore vulnerabilities with specific statuses, use the <code>--ignore-status &lt;list_of_statuses&gt;</code> option.</p> <pre><code>$ trivy image --ignore-status affected,fixed ruby:2.4.0\n</code></pre> Result <pre><code>2019-05-16T12:50:14.786+0900    INFO    Detecting Debian vulnerabilities...\n\nruby:2.4.0 (debian 8.7)\n=======================\nTotal: 527 (UNKNOWN: 0, LOW: 276, MEDIUM: 83, HIGH: 158, CRITICAL: 10)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Library           \u2502  Vulnerability   \u2502 Severity \u2502    Status    \u2502     Installed Version      \u2502 Fixed Version \u2502                            Title                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 binutils                    \u2502 CVE-2014-9939    \u2502 CRITICAL \u2502 will_not_fix \u2502 2.25-5                     \u2502               \u2502 binutils: buffer overflow in ihex.c                          \u2502\n\u2502                             \u2502                  \u2502          \u2502              \u2502                            \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2014-9939                    \u2502\n\u2502                             \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u2502                            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                             \u2502 CVE-2017-6969    \u2502          \u2502              \u2502                            \u2502               \u2502 binutils: Heap-based buffer over-read in readelf when        \u2502\n\u2502                             \u2502                  \u2502          \u2502              \u2502                            \u2502               \u2502 processing corrupt RL78 binaries                             \u2502\n\u2502                             \u2502                  \u2502          \u2502              \u2502                            \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2017-6969                    \u2502\n\u2502                             \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u2502                            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...\n</code></pre> <p>Tip</p> <p>To skip all unfixed vulnerabilities, you can use the <code>--ignore-unfixed</code> flag . It is a shorthand of <code>--ignore-status affected,will_not_fix,fix_deferred,end_of_life</code>. It displays \"fixed\" vulnerabilities only.</p> <pre><code>$ trivy image --ignore-unfixed ruby:2.4.0\n</code></pre>"},{"location":"docs/configuration/filtering/#suppression","title":"Suppression","text":"<p>You can filter the results by</p> <ul> <li>Finding IDs</li> <li>Rego</li> <li>Vulnerability Exploitability Exchange (VEX)</li> </ul> <p>To show the suppressed results, use the <code>--show-suppressed</code> flag.</p> <p>Note</p> <p>It's exported as <code>ExperimentalModifiedFindings</code> in the JSON output.</p> <pre><code>$ trivy image --vex debian11.csaf.vex --ignorefile .trivyignore.yaml --show-suppressed debian:11\n...\n\nSuppressed Vulnerabilities (Total: 9)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Library    \u2502 Vulnerability \u2502 Severity \u2502    Status    \u2502                  Statement                  \u2502      Source       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 libdb5.3      \u2502 CVE-2019-8457 \u2502 CRITICAL \u2502 not_affected \u2502 vulnerable_code_not_in_execute_path         \u2502 CSAF VEX          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 bsdutils      \u2502 CVE-2022-0563 \u2502 LOW      \u2502 ignored      \u2502 Accept the risk                             \u2502 .trivyignore.yaml \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u2502 libblkid1     \u2502               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u2502 libmount1     \u2502               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u2502 libsmartcols1 \u2502               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u2502 libuuid1      \u2502               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u2502 mount         \u2502               \u2502          \u2502              \u2502                                             \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u2502\n\u2502 tar           \u2502 CVE-2005-2541 \u2502          \u2502              \u2502 The vulnerable configuration is not enabled \u2502                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u2502\n\u2502 util-linux    \u2502 CVE-2022-0563 \u2502          \u2502              \u2502 Accept the risk                             \u2502                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/configuration/filtering/#by-finding-ids","title":"By Finding IDs","text":"<p>Trivy supports the .trivyignore and .trivyignore.yaml ignore files.</p>"},{"location":"docs/configuration/filtering/#trivyignore","title":".trivyignore","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License <pre><code>$ cat .trivyignore\n# Accept the risk\nCVE-2018-14618\n\n# Accept the risk until 2023-01-01\nCVE-2019-14697 exp:2023-01-01\n\n# No impact in our settings\nCVE-2019-1543\n\n# Ignore misconfigurations\nAVD-DS-0002\n\n# Ignore secrets\ngeneric-unwanted-rule\naws-account-id\n</code></pre> <pre><code>$ trivy image python:3.4-alpine3.9\n</code></pre> Result <pre><code>2019-05-16T12:53:10.076+0900    INFO    Updating vulnerability database...\n2019-05-16T12:53:28.134+0900    INFO    Detecting Alpine vulnerabilities...\n\npython:3.4-alpine3.9 (alpine 3.9.2)\n===================================\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n</code></pre>"},{"location":"docs/configuration/filtering/#trivyignoreyaml","title":".trivyignore.yaml","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>When the extension of the specified ignore file is either <code>.yml</code> or <code>.yaml</code>, Trivy will load the file as YAML. For the <code>.trivyignore.yaml</code> file, you can set ignored IDs separately for <code>vulnerabilities</code>, <code>misconfigurations</code>, <code>secrets</code>, or <code>licenses</code><sup>1</sup>.</p> <p>Available fields:</p> Field Required Type Description id \u2713 string The identifier of the vulnerability, misconfiguration, secret, or license<sup>1</sup>. paths<sup>2</sup> string array The list of file paths to ignore. If <code>paths</code> is not set, the ignore finding is applied to all files. purls string array The list of PURLs to ignore packages. If <code>purls</code> is not set, the ignore finding is applied to all packages. This field is currently available only for vulnerabilities. expired_at date (<code>yyyy-mm-dd</code>) The expiration date of the ignore finding. If <code>expired_at</code> is not set, the ignore finding is always valid. statement string The reason for ignoring the finding. (This field is not used for filtering.) <pre><code>$ cat .trivyignore.yaml\nvulnerabilities:\n  - id: CVE-2022-40897\n    paths:\n      - \"usr/local/lib/python3.9/site-packages/setuptools-58.1.0.dist-info/METADATA\"\n    statement: Accept the risk\n  - id: CVE-2023-2650\n  - id: CVE-2023-3446\n  - id: CVE-2023-3817\n    purls:\n      - \"pkg:deb/debian/libssl1.1\"\n  - id: CVE-2023-29491\n    expired_at: 2023-09-01\n\nmisconfigurations:\n  - id: AVD-DS-0001\n  - id: AVD-DS-0002\n    paths:\n      - \"docs/Dockerfile\"\n    statement: The image needs root privileges\n\nsecrets:\n  - id: aws-access-key-id\n  - id: aws-secret-access-key\n    paths:\n      - \"foo/bar/aws.secret\"\n\nlicenses:\n  - id: GPL-3.0 # License name is used as ID\n    paths:\n      - \"usr/share/gcc/python/libstdcxx/v6/__init__.py\"\n</code></pre> <p>Since this feature is experimental, you must explicitly specify the YAML file path using the <code>--ignorefile</code> flag. Once this functionality is stable, the YAML file will be loaded automatically.</p> <pre><code>$ trivy image --ignorefile ./.trivyignore.yaml python:3.9.16-alpine3.16\n</code></pre> Result <pre><code>2023-08-31T11:10:27.155+0600    INFO    Vulnerability scanning is enabled\n2023-08-31T11:10:27.155+0600    INFO    Secret scanning is enabled\n2023-08-31T11:10:27.155+0600    INFO    If your scanning is slow, please try '--scanners vuln' to disable secret scanning\n2023-08-31T11:10:27.155+0600    INFO    Please see also https://trivy.dev/dev/docs/scanner/secret/#recommendation for faster secret detection\n2023-08-31T11:10:29.164+0600    INFO    Detected OS: alpine\n2023-08-31T11:10:29.164+0600    INFO    Detecting Alpine vulnerabilities...\n2023-08-31T11:10:29.169+0600    INFO    Number of language-specific files: 1\n2023-08-31T11:10:29.170+0600    INFO    Detecting python-pkg vulnerabilities...\n\npython:3.9.16-alpine3.16 (alpine 3.16.5)\n========================================\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n</code></pre>"},{"location":"docs/configuration/filtering/#by-rego","title":"By Rego","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Rego is a policy language that allows you to express decision logic in a concise syntax.  Rego is part of the popular Open Policy Agent (OPA) CNCF project. For advanced filtering, Trivy allows you to use Rego language to filter vulnerabilities.</p> <p>Use the <code>--ignore-policy</code> flag which takes a path to a Rego file that defines the filtering policy. The Rego package name must be <code>trivy</code> and it must include a \"rule\" named <code>ignore</code> which determines if each individual scan result should be excluded (ignore=true) or not (ignore=false). The <code>input</code> for the evaluation is each DetectedVulnerability and DetectedMisconfiguration.</p> <p>A practical way to observe the filtering policy input in your case, is to run a scan with the <code>--format json</code> option and look at the resulting structure:</p> <pre><code>trivy image -f json centos:7\n\n...\n  \"Results\": [\n    {\n      \"Target\": \"centos:7 (centos 7.9.2009)\",\n      \"Class\": \"os-pkgs\",\n      \"Type\": \"centos\",\n      \"Vulnerabilities\": [\n        {\n          \"VulnerabilityID\": \"CVE-2015-5186\",\n          \"PkgID\": \"audit-libs@2.8.5-4.el7.x86_64\",\n          \"PkgName\": \"audit-libs\",\n          \"InstalledVersion\": \"2.8.5-4.el7\",\n          \"Layer\": {\n            \"Digest\": \"sha256:2d473b07cdd5f0912cd6f1a703352c82b512407db6b05b43f2553732b55df3bc\",\n            \"DiffID\": \"sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02\"\n          },\n          \"SeveritySource\": \"redhat\",\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2015-5186\",\n          \"Title\": \"log terminal emulator escape sequences handling\",\n          \"Description\": \"Audit before 2.4.4 in Linux does not sanitize escape characters in filenames.\",\n          \"Severity\": \"MEDIUM\",\n          \"CweIDs\": [\n            \"CWE-20\"\n          ],\n...\n</code></pre> <p>Each individual Vulnerability, Misconfiguration, License and Secret (under <code>Results.Vulnerabilities</code>, <code>Results.Misconfigurations</code>,  <code>Results.Licenses</code>, <code>Results.Secrets</code>) is evaluated for exclusion or inclusion by the <code>ignore</code> rule.</p> <p>The following is a Rego ignore policy that filters out every vulnerability with a specific CWE ID (as seen in the JSON example above):</p> <pre><code>package trivy\n\ndefault ignore = false\n\nignore {\n    input.CweIDs[_] == \"CWE-20\"\n}\n</code></pre> <pre><code>trivy image --ignore-policy examples/ignore-policies/basic.rego centos:7\n</code></pre> <p>For more advanced use cases, there is a built-in Rego library with helper functions that you can import into your policy using: <code>import data.lib.trivy</code>. More info about the helper functions are in the library here.</p> <p>You can create a whitelist of checks using Rego, see the detailed example. Additional examples are available here.</p>"},{"location":"docs/configuration/filtering/#by-vulnerability-exploitability-exchange-vex","title":"By Vulnerability Exploitability Exchange (VEX)","text":"Scanner Supported Vulnerability \u2713 Misconfiguration Secret License <p>Please refer to the VEX documentation for the details.</p> <ol> <li> <p>license name is used as id for <code>.trivyignore.yaml</code> files.\u00a0\u21a9\u21a9</p> </li> <li> <p>This doesn't work for os package licenses (e.g. apk, dpkg, rpm). For projects which manage dependencies through a dependency file (e.g. go.mod, yarn.lock) <code>path</code> should point to that particular file.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/configuration/others/","title":"Others","text":""},{"location":"docs/configuration/others/#enabledisable-scanners","title":"Enable/Disable Scanners","text":"<p>You can enable/disable scanners with the <code>--scanners</code> flag.</p> <p>Supported values:</p> <ul> <li>vuln</li> <li>misconfig</li> <li>secret</li> <li>license</li> </ul> <p>For example, container image scanning enables vulnerability and secret scanners by default. If you don't need secret scanning, it can be disabled.</p> <pre><code>$ trivy image --scanners vuln alpine:3.15\n</code></pre>"},{"location":"docs/configuration/others/#exit-code","title":"Exit Code","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>By default, <code>Trivy</code> exits with code 0 even when security issues are detected. Use the <code>--exit-code</code> option if you want to exit with a non-zero exit code.</p> <pre><code>$ trivy image --exit-code 1 python:3.4-alpine3.9\n</code></pre> Result <pre><code>2019-05-16T12:51:43.500+0900    INFO    Updating vulnerability database...\n2019-05-16T12:52:00.387+0900    INFO    Detecting Alpine vulnerabilities...\n\npython:3.4-alpine3.9 (alpine 3.9.2)\n===================================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)\n\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n| LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |             TITLE              |\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n| openssl | CVE-2019-1543    | MEDIUM   | 1.1.1a-r1         | 1.1.1b-r1     | openssl: ChaCha20-Poly1305     |\n|         |                  |          |                   |               | with long nonces               |\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n</code></pre> <p>This option is useful for CI/CD. In the following example, the test will fail only when a critical vulnerability is found.</p> <pre><code>$ trivy image --exit-code 0 --severity MEDIUM,HIGH ruby:2.4.0\n$ trivy image --exit-code 1 --severity CRITICAL ruby:2.4.0\n</code></pre>"},{"location":"docs/configuration/others/#exit-on-eol","title":"Exit on EOL","text":"Scanner Supported Vulnerability \u2713 Misconfiguration Secret License <p>Sometimes you may surprisingly get 0 vulnerabilities in an old image:</p> <ul> <li>Enabling <code>--ignore-unfixed</code> option while all packages have no fixed versions.</li> <li>Scanning a rather outdated OS (e.g. Ubuntu 10.04).</li> </ul> <p>An OS at the end of service/life (EOL) usually gets into this situation, which is definitely full of vulnerabilities. <code>--exit-on-eol</code> can fail scanning on EOL OS with a non-zero code. This flag is available with the following targets.</p> <ul> <li>Container images (<code>trivy image</code>)</li> <li>Virtual machine images (<code>trivy vm</code>)</li> <li>SBOM (<code>trivy sbom</code>)</li> <li>Root filesystem (<code>trivy rootfs</code>)</li> </ul> <pre><code>$ trivy image --exit-on-eol 1 alpine:3.10\n</code></pre> Result <pre><code>2023-03-01T11:07:15.455+0200    INFO    Vulnerability scanning is enabled\n...\n2023-03-01T11:07:17.938+0200    WARN    This OS version is no longer supported by the distribution: alpine 3.10.9\n2023-03-01T11:07:17.938+0200    WARN    The vulnerability detection may be insufficient because security updates are not provided\n\nalpine:3.10 (alpine 3.10.9)\n===========================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library  \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                            Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 apk-tools \u2502 CVE-2021-36159 \u2502 CRITICAL \u2502 2.10.6-r0         \u2502 2.10.7-r0     \u2502 libfetch before 2021-07-26, as used in apk-tools, xbps, and \u2502\n\u2502           \u2502                \u2502          \u2502                   \u2502               \u2502 other products, mishandles...                               \u2502\n\u2502           \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2021-36159                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n2023-03-01T11:07:17.941+0200    ERROR   Detected EOL OS: alpine 3.10.9\n</code></pre> <p>This option is useful for CI/CD. The following example will fail when a critical vulnerability is found or the OS is EOSL:</p> <pre><code>$ trivy image --exit-code 1 --exit-on-eol 1 --severity CRITICAL alpine:3.16.3\n</code></pre>"},{"location":"docs/configuration/others/#mirror-registries","title":"Mirror Registries","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy supports mirrors for remote container images and databases.</p> <p>To configure them, add a list of mirrors along with the host to the trivy config file.</p> <p>Note</p> <p>Use the <code>index.docker.io</code> host for images from <code>Docker Hub</code>, even if you don't use that prefix.</p> <p>Example for <code>index.docker.io</code>: <pre><code>registry:\n  mirrors:\n    index.docker.io:\n     - mirror.gcr.io\n</code></pre></p>"},{"location":"docs/configuration/others/#registry-check-procedure","title":"Registry check procedure","text":"<p>Trivy uses the following registry order to get the image:</p> <ul> <li>mirrors in the same order as they are specified in the configuration file</li> <li>source registry</li> </ul> <p>In cases where we can't get the image from the mirror registry (e.g. when authentication fails, image doesn't exist, etc.) - Trivy will check other mirrors (or the source registry if all mirrors have already been checked).</p> <p>Example: <pre><code>registry:\n  mirrors:\n    index.docker.io:\n     - mirror.with.bad.auth // We don't have credentials for this registry\n     - mirror.without.image // Registry doesn't have this image\n</code></pre></p> <p>When we want to get the image <code>alpine</code> with the settings above. The logic will be as follows:</p> <ol> <li>Try to get the image from <code>mirror.with.bad.auth/library/alpine</code>, but we get an error because there are no credentials for this registry.</li> <li>Try to get the image from <code>mirror.without.image/library/alpine</code>, but we get an error because this registry doesn't have this image (but most likely it will be an error about authorization).</li> <li>Get the image from <code>index.docker.io</code> (the original registry).</li> </ol>"},{"location":"docs/configuration/others/#check-for-updates","title":"Check for updates","text":"<p>Trivy periodically checks for updates and notices, and displays a message to the user with recommendations. Updates checking is non-blocking and has no impact on scanning time, performance, results, or any user experience aspect besides displaying the message. You can disable updates checking by specifying the <code>--skip-version-check</code> flag.</p>"},{"location":"docs/configuration/others/#telemetry","title":"Telemetry","text":"<p>Trivy collected usage data for product improvement. More details in the Telemetry document. You can disable telemetry collection using the <code>--disable-telemetry</code> flag.</p>"},{"location":"docs/configuration/reporting/","title":"Reporting","text":""},{"location":"docs/configuration/reporting/#format","title":"Format","text":"<p>Trivy supports the following formats:</p> <ul> <li>Table</li> <li>JSON</li> <li>SARIF</li> <li>Template</li> <li>SBOM</li> <li>GitHub dependency snapshot</li> </ul>"},{"location":"docs/configuration/reporting/#table-default","title":"Table (Default)","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <pre><code>$ trivy image -f table golang:1.22.11-alpine3.20\n</code></pre> Result <pre><code>...\n\nReport Summary\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Target                    \u2502   Type   \u2502 Vulnerabilities \u2502 Secrets \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 golang:1.22.11-alpine3.20 (alpine 3.20.5)   \u2502  alpine  \u2502        6        \u2502    -    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 usr/local/go/bin/go                         \u2502 gobinary \u2502        1        \u2502    -    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 usr/local/go/pkg/tool/linux_amd64/vet       \u2502 gobinary \u2502        1        \u2502    -    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nLegend:\n- '-': Not scanned\n- '0': Clean (no security findings detected)\n\n\ngolang:1.22.11-alpine3.20 (alpine 3.20.5)\n\nTotal: 6 (UNKNOWN: 2, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library   \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502 Fixed Version \u2502                            Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 libcrypto3 \u2502 CVE-2024-12797 \u2502 HIGH     \u2502 fixed  \u2502 3.3.2-r1          \u2502 3.3.3-r0      \u2502 openssl: RFC7250 handshakes with unauthenticated servers    \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 don't abort as expected                                     \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2024-12797                  \u2502\n\u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502            \u2502 CVE-2024-13176 \u2502 MEDIUM   \u2502        \u2502                   \u2502 3.3.2-r2      \u2502 openssl: Timing side-channel in ECDSA signature computation \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2024-13176                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 libssl3    \u2502 CVE-2024-12797 \u2502 HIGH     \u2502        \u2502                   \u2502 3.3.3-r0      \u2502 openssl: RFC7250 handshakes with unauthenticated servers    \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 don't abort as expected                                     \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2024-12797                  \u2502\n\u2502            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502            \u2502 CVE-2024-13176 \u2502 MEDIUM   \u2502        \u2502                   \u2502 3.3.2-r2      \u2502 openssl: Timing side-channel in ECDSA signature computation \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2024-13176                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 musl       \u2502 CVE-2025-26519 \u2502 UNKNOWN  \u2502        \u2502 1.2.5-r0          \u2502 1.2.5-r1      \u2502 musl libc 0.9.13 through 1.2.5 before 1.2.6 has an          \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 out-of-bounds write ......                                  \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2025-26519                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502        \u2502                   \u2502               \u2502                                                             \u2502\n\u2502 musl-utils \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502                                                             \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502                                                             \u2502\n\u2502            \u2502                \u2502          \u2502        \u2502                   \u2502               \u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nusr/local/go/bin/go (gobinary)\n\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Library \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502        Fixed Version         \u2502                            Title                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 stdlib  \u2502 CVE-2025-22866 \u2502 MEDIUM   \u2502 fixed  \u2502 v1.22.11          \u2502 1.22.12, 1.23.6, 1.24.0-rc.3 \u2502 crypto/internal/nistec: golang: Timing sidechannel for P-256 \u2502\n\u2502         \u2502                \u2502          \u2502        \u2502                   \u2502                              \u2502 on ppc64le in crypto/internal/nistec                         \u2502\n\u2502         \u2502                \u2502          \u2502        \u2502                   \u2502                              \u2502 https://avd.aquasec.com/nvd/cve-2025-22866                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n...\n</code></pre>"},{"location":"docs/configuration/reporting/#table-mode","title":"Table mode","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy supports the following modes for <code>table</code> format:</p> Mode Enabled by default summary \u2713<sup>1</sup> detailed \u2713 <p>You can use <code>--table-mode</code> flag to enable/disable table mode(s). </p>"},{"location":"docs/configuration/reporting/#summary-table","title":"Summary table","text":"<p>Summary table contains general information about the scan performed.</p> <p>Nuances of table contents:</p> <ul> <li>Table includes columns for enabled scanners only. Use <code>--scanners</code> flag to enable/disable scanners.</li> <li>Table includes separate lines for the same targets but different scanners.<ul> <li><code>-</code> means that the scanner didn't scan this target.</li> <li><code>0</code> means that the scanner scanned this target, but found no security issues.</li> </ul> </li> </ul> Report Summary <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Target         \u2502    Type    \u2502 Vulnerabilities \u2502 Misconfigurations \u2502 Secrets \u2502 Licenses \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 test (alpine 3.20.3)  \u2502   alpine   \u2502        2        \u2502         -         \u2502    -    \u2502    -     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Java                  \u2502    jar     \u2502        2        \u2502         -         \u2502    -    \u2502    -     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 app/Dockerfile        \u2502 dockerfile \u2502        -        \u2502         2         \u2502    -    \u2502    -     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 requirements.txt      \u2502    text    \u2502        0        \u2502         -         \u2502    -    \u2502    -     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 requirements.txt      \u2502    text    \u2502        -        \u2502         -         \u2502    1    \u2502    -     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 OS Packages           \u2502     -      \u2502        -        \u2502         -         \u2502    -    \u2502    1     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Java                  \u2502     -      \u2502        -        \u2502         -         \u2502    -    \u2502    0     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/configuration/reporting/#detailed-tables","title":"Detailed tables","text":"<p>Detailed tables contain information about found security issues for each target with more detailed information (CVE-ID, severity, version, etc.).</p> Detailed tables <pre><code>usr/local/go/bin/go (gobinary)\n\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Library \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502        Fixed Version         \u2502                            Title                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 stdlib  \u2502 CVE-2025-22866 \u2502 MEDIUM   \u2502 fixed  \u2502 v1.22.11          \u2502 1.22.12, 1.23.6, 1.24.0-rc.3 \u2502 crypto/internal/nistec: golang: Timing sidechannel for P-256 \u2502\n\u2502         \u2502                \u2502          \u2502        \u2502                   \u2502                              \u2502 on ppc64le in crypto/internal/nistec                         \u2502\n\u2502         \u2502                \u2502          \u2502        \u2502                   \u2502                              \u2502 https://avd.aquasec.com/nvd/cve-2025-22866                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/configuration/reporting/#show-origins-of-vulnerable-dependencies","title":"Show origins of vulnerable dependencies","text":"Scanner Supported Vulnerability \u2713 Misconfiguration Secret License <p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Modern software development relies on the use of third-party libraries. Third-party dependencies also depend on others so a list of dependencies can be represented as a dependency graph. In some cases, vulnerable dependencies are not linked directly, and it requires analyses of the tree. To make this task simpler Trivy can show a dependency origin tree with the <code>--dependency-tree</code> flag. This flag is only available with the <code>--format table</code> flag.</p> <p>The following OS package managers are currently supported:</p> OS Package Managers apk dpkg rpm <p>The following languages are currently supported:</p> Language File Node.js package-lock.json pnpm-lock.yaml yarn.lock .NET packages.lock.json Python poetry.lock uv.lock Ruby Gemfile.lock Rust cargo-auditable binaries Go go.mod PHP composer.lock Java pom.xml *gradle.lockfile *.sbt.lock Dart pubspec.lock <p>This tree is the reverse of the dependency graph. However, if you want to resolve a vulnerability in a particular indirect dependency, the reversed tree is useful to know where that dependency comes from and identify which package you actually need to update.</p> <p>In table output, it looks like:</p> <pre><code>$ trivy fs --severity HIGH,CRITICAL --dependency-tree /path/to/your_node_project\n\npackage-lock.json (npm)\n=======================\nTotal: 2 (HIGH: 1, CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Library      \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 follow-redirects \u2502 CVE-2022-0155  \u2502 HIGH     \u2502 1.14.6            \u2502 1.14.7        \u2502 follow-redirects: Exposure of Private Personal Information \u2502\n\u2502                  \u2502                \u2502          \u2502                   \u2502               \u2502 to an Unauthorized Actor                                   \u2502\n\u2502                  \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-0155                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 glob-parent      \u2502 CVE-2020-28469 \u2502 CRITICAL \u2502 3.1.0             \u2502 5.1.2         \u2502 nodejs-glob-parent: Regular expression denial of service   \u2502\n\u2502                  \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2020-28469                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDependency Origin Tree (Reversed)\n=================================\npackage-lock.json\n\u251c\u2500\u2500 follow-redirects@1.14.6, (HIGH: 1, CRITICAL: 0)\n\u2502   \u2514\u2500\u2500 axios@0.21.4\n\u2514\u2500\u2500 glob-parent@3.1.0, (HIGH: 0, CRITICAL: 1)\n    \u2514\u2500\u2500 chokidar@2.1.8\n        \u2514\u2500\u2500 watchpack-chokidar2@2.0.1\n            \u2514\u2500\u2500 watchpack@1.7.5\n                \u2514\u2500\u2500 webpack@4.46.0\n                    \u2514\u2500\u2500 cra-append-sw@2.7.0\n</code></pre> <p>Vulnerable dependencies are shown in the top level of the tree. Lower levels show how those vulnerabilities are introduced. In the example above axios@0.21.4 included in the project directly depends on the vulnerable follow-redirects@1.14.6. Also, glob-parent@3.1.0 with some vulnerabilities is included through chain of dependencies that is added by cra-append-sw@2.7.0.</p> <p>Then, you can try to update axios@0.21.4 and cra-append-sw@2.7.0 to resolve vulnerabilities in follow-redirects@1.14.6 and glob-parent@3.1.0.</p>"},{"location":"docs/configuration/reporting/#json","title":"JSON","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <pre><code>$ trivy image -f json -o results.json alpine:latest\n</code></pre> JSON <pre><code>{\n  \"SchemaVersion\": 2,\n  \"CreatedAt\": \"2024-12-26T21:58:15.943876+05:30\",\n  \"ArtifactName\": \"alpine:latest\",\n  \"ArtifactType\": \"container_image\",\n  \"Metadata\": {\n    \"OS\": {\n      \"Family\": \"alpine\",\n      \"Name\": \"3.20.3\"\n    },\n    \"ImageID\": \"sha256:511a44083d3a23416fadc62847c45d14c25cbace86e7a72b2b350436978a0450\",\n    \"DiffIDs\": [\n      \"sha256:651d9022c23486dfbd396c13db293af6845731cbd098a5f5606db4bc9f5573e8\"\n    ],\n    \"RepoTags\": [\n      \"alpine:latest\"\n    ],\n    \"RepoDigests\": [\n      \"alpine@sha256:1e42bbe2508154c9126d48c2b8a75420c3544343bf86fd041fb7527e017a4b4a\"\n    ],\n    \"ImageConfig\": {\n      \"architecture\": \"arm64\",\n      \"created\": \"2024-09-06T12:05:36Z\",\n      \"history\": [\n        {\n          \"created\": \"2024-09-06T12:05:36Z\",\n          \"created_by\": \"ADD alpine-minirootfs-3.20.3-aarch64.tar.gz / # buildkit\",\n          \"comment\": \"buildkit.dockerfile.v0\"\n        },\n        {\n          \"created\": \"2024-09-06T12:05:36Z\",\n          \"created_by\": \"CMD [\\\"/bin/sh\\\"]\",\n          \"comment\": \"buildkit.dockerfile.v0\",\n          \"empty_layer\": true\n        }\n      ],\n      \"os\": \"linux\",\n      \"rootfs\": {\n        \"type\": \"layers\",\n        \"diff_ids\": [\n          \"sha256:651d9022c23486dfbd396c13db293af6845731cbd098a5f5606db4bc9f5573e8\"\n        ]\n      },\n      \"config\": {\n        \"Cmd\": [\n          \"/bin/sh\"\n        ],\n        \"Env\": [\n          \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n        ],\n        \"WorkingDir\": \"/\",\n        \"ArgsEscaped\": true\n      }\n    }\n  },\n  \"Results\": [\n    {\n      \"Target\": \"alpine:latest (alpine 3.20.3)\",\n      \"Class\": \"os-pkgs\",\n      \"Type\": \"alpine\",\n      \"Vulnerabilities\": [\n        {\n          \"VulnerabilityID\": \"CVE-2024-9143\",\n          \"PkgID\": \"libcrypto3@3.3.2-r0\",\n          \"PkgName\": \"libcrypto3\",\n          \"PkgIdentifier\": {\n            \"PURL\": \"pkg:apk/alpine/libcrypto3@3.3.2-r0?arch=aarch64\\u0026distro=3.20.3\",\n            \"UID\": \"f705555b49cd2259\"\n          },\n          \"InstalledVersion\": \"3.3.2-r0\",\n          \"FixedVersion\": \"3.3.2-r1\",\n          \"Status\": \"fixed\",\n          \"Layer\": {\n            \"DiffID\": \"sha256:651d9022c23486dfbd396c13db293af6845731cbd098a5f5606db4bc9f5573e8\"\n          },\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2024-9143\",\n          \"DataSource\": {\n            \"ID\": \"alpine\",\n            \"Name\": \"Alpine Secdb\",\n            \"URL\": \"https://secdb.alpinelinux.org/\"\n          },\n          \"Title\": \"openssl: Low-level invalid GF(2^m) parameters lead to OOB memory access\",\n          \"Description\": \"Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\\nor writes.\\n\\nImpact summary: Out of bound memory writes can lead to an application crash or\\neven a possibility of a remote code execution, however, in all the protocols\\ninvolving Elliptic Curve Cryptography that we're aware of, either only \\\"named\\ncurves\\\" are supported, or, if explicit curve parameters are supported, they\\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\\nproblematic input values. Thus the likelihood of existence of a vulnerable\\napplication is low.\\n\\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\\nso problematic inputs cannot occur in the context of processing X.509\\ncertificates.  Any problematic use-cases would have to be using an \\\"exotic\\\"\\ncurve encoding.\\n\\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\\nand various supporting BN_GF2m_*() functions.\\n\\nApplications working with \\\"exotic\\\" explicit binary (GF(2^m)) curve parameters,\\nthat make it possible to represent invalid field polynomials with a zero\\nconstant term, via the above or similar APIs, may terminate abruptly as a\\nresult of reading or writing outside of array bounds.  Remote code execution\\ncannot easily be ruled out.\\n\\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.\",\n          \"Severity\": \"LOW\",\n          \"CweIDs\": [\n            \"CWE-787\"\n          ],\n          \"VendorSeverity\": {\n            \"amazon\": 3,\n            \"redhat\": 1,\n            \"ubuntu\": 1\n          },\n          \"CVSS\": {\n            \"redhat\": {\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n              \"V3Score\": 3.7\n            }\n          },\n          \"References\": [\n            \"https://access.redhat.com/security/cve/CVE-2024-9143\",\n            \"https://github.com/openssl/openssl/commit/72ae83ad214d2eef262461365a1975707f862712\",\n            \"https://github.com/openssl/openssl/commit/bc7e04d7c8d509fb78fc0e285aa948fb0da04700\",\n            \"https://github.com/openssl/openssl/commit/c0d3e4d32d2805f49bec30547f225bc4d092e1f4\",\n            \"https://github.com/openssl/openssl/commit/fdf6723362ca51bd883295efe206cb5b1cfa5154\",\n            \"https://github.openssl.org/openssl/extended-releases/commit/8efc0cbaa8ebba8e116f7b81a876a4123594d86a\",\n            \"https://github.openssl.org/openssl/extended-releases/commit/9d576994cec2b7aa37a91740ea7e680810957e41\",\n            \"https://nvd.nist.gov/vuln/detail/CVE-2024-9143\",\n            \"https://openssl-library.org/news/secadv/20241016.txt\",\n            \"https://www.cve.org/CVERecord?id=CVE-2024-9143\"\n          ],\n          \"PublishedDate\": \"2024-10-16T17:15:18.13Z\",\n          \"LastModifiedDate\": \"2024-11-08T16:35:21.58Z\"\n        },\n        {\n          \"VulnerabilityID\": \"CVE-2024-9143\",\n          \"PkgID\": \"libssl3@3.3.2-r0\",\n          \"PkgName\": \"libssl3\",\n          \"PkgIdentifier\": {\n            \"PURL\": \"pkg:apk/alpine/libssl3@3.3.2-r0?arch=aarch64\\u0026distro=3.20.3\",\n            \"UID\": \"c4a39ef718e71832\"\n          },\n          \"InstalledVersion\": \"3.3.2-r0\",\n          \"FixedVersion\": \"3.3.2-r1\",\n          \"Status\": \"fixed\",\n          \"Layer\": {\n            \"DiffID\": \"sha256:651d9022c23486dfbd396c13db293af6845731cbd098a5f5606db4bc9f5573e8\"\n          },\n          \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2024-9143\",\n          \"DataSource\": {\n            \"ID\": \"alpine\",\n            \"Name\": \"Alpine Secdb\",\n            \"URL\": \"https://secdb.alpinelinux.org/\"\n          },\n          \"Title\": \"openssl: Low-level invalid GF(2^m) parameters lead to OOB memory access\",\n          \"Description\": \"Issue summary: Use of the low-level GF(2^m) elliptic curve APIs with untrusted\\nexplicit values for the field polynomial can lead to out-of-bounds memory reads\\nor writes.\\n\\nImpact summary: Out of bound memory writes can lead to an application crash or\\neven a possibility of a remote code execution, however, in all the protocols\\ninvolving Elliptic Curve Cryptography that we're aware of, either only \\\"named\\ncurves\\\" are supported, or, if explicit curve parameters are supported, they\\nspecify an X9.62 encoding of binary (GF(2^m)) curves that can't represent\\nproblematic input values. Thus the likelihood of existence of a vulnerable\\napplication is low.\\n\\nIn particular, the X9.62 encoding is used for ECC keys in X.509 certificates,\\nso problematic inputs cannot occur in the context of processing X.509\\ncertificates.  Any problematic use-cases would have to be using an \\\"exotic\\\"\\ncurve encoding.\\n\\nThe affected APIs include: EC_GROUP_new_curve_GF2m(), EC_GROUP_new_from_params(),\\nand various supporting BN_GF2m_*() functions.\\n\\nApplications working with \\\"exotic\\\" explicit binary (GF(2^m)) curve parameters,\\nthat make it possible to represent invalid field polynomials with a zero\\nconstant term, via the above or similar APIs, may terminate abruptly as a\\nresult of reading or writing outside of array bounds.  Remote code execution\\ncannot easily be ruled out.\\n\\nThe FIPS modules in 3.3, 3.2, 3.1 and 3.0 are not affected by this issue.\",\n          \"Severity\": \"LOW\",\n          \"CweIDs\": [\n            \"CWE-787\"\n          ],\n          \"VendorSeverity\": {\n            \"amazon\": 3,\n            \"redhat\": 1,\n            \"ubuntu\": 1\n          },\n          \"CVSS\": {\n            \"redhat\": {\n              \"V3Vector\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n              \"V3Score\": 3.7\n            }\n          },\n          \"References\": [\n            \"https://access.redhat.com/security/cve/CVE-2024-9143\",\n            \"https://github.com/openssl/openssl/commit/72ae83ad214d2eef262461365a1975707f862712\",\n            \"https://github.com/openssl/openssl/commit/bc7e04d7c8d509fb78fc0e285aa948fb0da04700\",\n            \"https://github.com/openssl/openssl/commit/c0d3e4d32d2805f49bec30547f225bc4d092e1f4\",\n            \"https://github.com/openssl/openssl/commit/fdf6723362ca51bd883295efe206cb5b1cfa5154\",\n            \"https://github.openssl.org/openssl/extended-releases/commit/8efc0cbaa8ebba8e116f7b81a876a4123594d86a\",\n            \"https://github.openssl.org/openssl/extended-releases/commit/9d576994cec2b7aa37a91740ea7e680810957e41\",\n            \"https://nvd.nist.gov/vuln/detail/CVE-2024-9143\",\n            \"https://openssl-library.org/news/secadv/20241016.txt\",\n            \"https://www.cve.org/CVERecord?id=CVE-2024-9143\"\n          ],\n          \"PublishedDate\": \"2024-10-16T17:15:18.13Z\",\n          \"LastModifiedDate\": \"2024-11-08T16:35:21.58Z\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p><code>VulnerabilityID</code>, <code>PkgName</code>, <code>InstalledVersion</code>, and <code>Severity</code> in <code>Vulnerabilities</code> are always filled with values, but other fields might be empty.</p>"},{"location":"docs/configuration/reporting/#sarif","title":"SARIF","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>SARIF (Static Analysis Results Interchange Format) complying with SARIF 2.1.0 OASIS standard can be generated with the <code>--format sarif</code> flag.</p> <pre><code>$ trivy image --format sarif -o report.sarif  golang:1.12-alpine\n</code></pre> <p>This SARIF file can be uploaded to several platforms, including:</p> <ul> <li>GitHub code scanning results, and there is a Trivy GitHub Action for automating this process</li> <li>SonarQube</li> </ul>"},{"location":"docs/configuration/reporting/#github-dependency-snapshot","title":"GitHub dependency snapshot","text":"<p>Trivy supports the following packages:</p> <ul> <li>OS packages</li> <li>Language-specific packages</li> </ul> <p>GitHub dependency snapshots can be generated with the <code>--format github</code> flag.</p> <pre><code>$ trivy image --format github -o report.gsbom alpine\n</code></pre> <p>This snapshot file can be submitted to your GitHub repository.</p>"},{"location":"docs/configuration/reporting/#template","title":"Template","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713"},{"location":"docs/configuration/reporting/#custom-template","title":"Custom Template","text":"<pre><code>$ trivy image --format template --template \"{{ range . }} {{ .Target }} {{ end }}\" golang:1.12-alpine\n</code></pre> Result <pre><code>2020-01-02T18:02:32.856+0100    INFO    Detecting Alpine vulnerabilities...\n golang:1.12-alpine (alpine 3.10.2)\n</code></pre> <p>You can compute different figures within the template using sprig functions. As an example you can summarize the different classes of issues:</p> <pre><code>$ trivy image --format template --template '{{- $critical := 0 }}{{- $high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if  eq .Severity \"CRITICAL\" }}{{- $critical = add $critical 1 }}{{- end }}{{- if  eq .Severity \"HIGH\" }}{{- $high = add $high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ $critical }}, High: {{ $high }}' golang:1.12-alpine\n</code></pre> Result <pre><code>Critical: 0, High: 2\n</code></pre> <p>For other features of sprig, see the official sprig documentation.</p>"},{"location":"docs/configuration/reporting/#load-templates-from-a-file","title":"Load templates from a file","text":"<p>You can load templates from a file prefixing the template path with an @.</p> <pre><code>$ trivy image --format template --template \"@/path/to/template\" golang:1.12-alpine\n</code></pre>"},{"location":"docs/configuration/reporting/#default-templates","title":"Default Templates","text":"<p>If Trivy is installed using rpm then default templates can be found at <code>/usr/local/share/trivy/templates</code>.</p>"},{"location":"docs/configuration/reporting/#junit","title":"JUnit","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>In the following example using the template <code>junit.tpl</code> XML can be generated. <pre><code>$ trivy image --format template --template \"@contrib/junit.tpl\" -o junit-report.xml  golang:1.12-alpine\n</code></pre></p>"},{"location":"docs/configuration/reporting/#asff","title":"ASFF","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License <p>Trivy also supports an ASFF template for reporting findings to AWS Security Hub</p>"},{"location":"docs/configuration/reporting/#html","title":"HTML","text":"Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret License <pre><code>$ trivy image --format template --template \"@contrib/html.tpl\" -o report.html golang:1.12-alpine\n</code></pre> <p>The following example shows use of default HTML template when Trivy is installed using rpm.</p> <pre><code>$ trivy image --format template --template \"@/usr/local/share/trivy/templates/html.tpl\" -o report.html golang:1.12-alpine\n</code></pre>"},{"location":"docs/configuration/reporting/#sbom","title":"SBOM","text":"<p>See here for details.</p>"},{"location":"docs/configuration/reporting/#output","title":"Output","text":"<p>Trivy supports the following output destinations:</p> <ul> <li>File</li> <li>Plugin</li> </ul>"},{"location":"docs/configuration/reporting/#file","title":"File","text":"<p>By specifying <code>--output &lt;file_path&gt;</code>, you can output the results to a file. Here is an example:</p> <pre><code>$ trivy image --format json --output result.json debian:12\n</code></pre>"},{"location":"docs/configuration/reporting/#plugin","title":"Plugin","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Plugins capable of receiving Trivy's results via standard input, called \"output plugin\", can be seamlessly invoked using the <code>--output</code> flag.</p> <pre><code>$ trivy &lt;target&gt; [--format &lt;format&gt;] --output plugin=&lt;plugin_name&gt; [--output-plugin-arg &lt;plugin_flags&gt;] &lt;target_name&gt;\n</code></pre> <p>This is useful for cases where you want to convert the output into a custom format, or when you want to send the output somewhere. For more details, please check here.</p>"},{"location":"docs/configuration/reporting/#converting","title":"Converting","text":"<p>To generate multiple reports, you can generate the JSON report first and convert it to other formats with the <code>convert</code> subcommand.</p> <pre><code>$ trivy image --format json -o result.json --list-all-pkgs debian:11\n$ trivy convert --format cyclonedx --output result.cdx result.json\n</code></pre> <p>Note</p> <p>Please note that if you want to convert to a format that requires a list of packages, such as SBOM, you need to add the <code>--list-all-pkgs</code> flag when outputting in JSON.</p> <p>Filtering options such as <code>--severity</code> are also available with <code>convert</code>.</p> <pre><code># Output all severities in JSON\n$ trivy image --format json -o result.json --list-all-pkgs debian:11\n\n# Output only critical issues in table format\n$ trivy convert --format table --severity CRITICAL result.json\n</code></pre> <p>Note</p> <p>JSON reports from \"trivy k8s\" are not yet supported.</p> <ol> <li> <p>To show summary table in <code>convert</code> mode - you need to enable the scanners used during JSON report generation.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/configuration/skipping/","title":"Selecting files for scanning","text":"<p>When scanning a target (image, code repository, etc), Trivy traverses all directories and files in that target and looks for known files to scan. For example, vulnerability scanner might look for <code>/lib/apk/db/installed</code> for Alpine APK scanning or <code>requirements.txt</code> file for Python pip scanning, and misconfiguration scanner might look for <code>Dockerfile</code> for Dockerfile scanning. This document explains how to control which files Trivy looks (including skipping files) for and how it should process them.</p> <p>Note</p> <p>Selecting/skipping files is different from filtering/ignoring results, which is covered in the Filtering document</p>"},{"location":"docs/configuration/skipping/#skip-files-and-directories","title":"Skip Files and Directories","text":"<p>You can skip specific files and directories using the <code>--skip-files</code> and <code>--skip-dirs</code> flags.</p> <p>For example:</p> <pre><code>trivy image --skip-files \"/Gemfile.lock\" --skip-dirs \"/var/lib/gems/2.5.0/gems/http_parser.rb-0.6.0\" quay.io/fluentd_elasticsearch/fluentd:v2.9.0\n</code></pre> <p>This feature is relevant for the following scanners:</p> Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret \u2713 License \u2713 <p>It's possible to specify glob patterns when referring to a file or directory. The glob expression follows the \"doublestar\" library syntax.</p> <p>Examples:</p> <pre><code># skip any file named `bar` in the subdirectories of testdata\ntrivy image --skip-files \"./testdata/*/bar\" .\n</code></pre> <pre><code># skip any files with the extension `.tf` in subdirectories of foo at any depth\ntrivy config --skip-files \"./foo/**/*.tf\" .\n</code></pre> <pre><code># skip all subdirectories of the testdata directory.\ntrivy image --skip-dirs \"./testdata/*\" .\n</code></pre> <pre><code># skip subdirectories at any depth named `.terraform/`. \n# this will match `./foo/.terraform` or `./foo/bar/.terraform`, but not `./.terraform`\ntrivy config --skip-dirs \"**/.terraform\" .\n</code></pre> <p>Like any other flag, this is available as Trivy YAML configuration.</p> <p>For example:</p> <pre><code>image:\n  skip-files:\n    - foo\n    - \"testdata/*/bar\"\n  skip-dirs:\n    - foo/bar/\n    - \"**/.terraform\"\n</code></pre>"},{"location":"docs/configuration/skipping/#customizing-file-handling","title":"Customizing file handling","text":"<p>You can customize which files Trivy scans and how it interprets them with the <code>--file-patterns</code> flag. A file pattern configuration takes the following form: <code>&lt;analyzer&gt;:&lt;path&gt;</code>, such that files matching the <code>&lt;path&gt;</code> will be processed with the respective <code>&lt;analyzer&gt;</code>.</p> <p>For example:</p> <pre><code>trivy fs --file-patterns \"pip:.requirements-test.txt .\"\n</code></pre> <p>This feature is relevant for the following scanners:</p> Scanner Supported Vulnerability \u2713 Misconfiguration \u2713 Secret License \u2713<sup>1</sup> <p>The list of analyzers can be found here. Note that this flag is not applicable for parsers that accepts files of different extensions, for example the Terraform file parser which handles .tf and .tf.json files.</p> <p>The file path can use a regular expression. For example:</p> <pre><code># interpret any file with .txt extension as a python pip requirements file\ntrivy fs --file-patterns \"pip:requirements-.*\\.txt .\n</code></pre> <p>The flag can be repeated for specifying multiple file patterns. For example:</p> <pre><code># look for Dockerfile called production.docker and a python pip requirements file called requirements-test.txt\ntrivy fs --scanners misconfig,vuln --file-patterns \"dockerfile:.production.docker\" --file-patterns \"pip:.requirements-test.txt .\"\n</code></pre>"},{"location":"docs/configuration/skipping/#avoid-full-filesystem-traversal","title":"Avoid full filesystem traversal","text":"<p>In specific scenarios Trivy can avoid traversing the entire filesystem, which makes scanning faster and more efficient. For more information see here</p> <ol> <li> <p>Only work with the license-full flag\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/","title":"Scanning Coverage","text":"<p>Trivy can detect security issues in many different platforms, languages and configuration files. This section gives a general overview of that coverage, and can help answer the frequently asked question \"Does Trivy support X?\". For more detailed information about the specific platforms and languages, check the relevant documentation.</p> <ul> <li>OS Packages</li> <li>Language-specific Packages</li> <li>IaC files</li> <li>Kubernetes clusters</li> </ul>"},{"location":"docs/coverage/kubernetes/","title":"Kubernetes","text":"<p>When scanning a Kubernetes cluster, Trivy differentiates between the following:</p> <ol> <li>Cluster infrastructure (e.g api-server, kubelet, addons)</li> <li>Cluster configuration (e.g Roles, ClusterRoles). </li> <li>Application workloads (e.g nginx, postgresql).</li> </ol> <p>Whenever Trivy scans either of these Kubernetes resources, the container image is scanned separately to the Kubernetes resource definition (the YAML manifest) that defines the resource. When scanning any of the above, the container image is scanned separately to the Kubernetes resource definition (the YAML manifest) that defines the resource.</p> <p>Container image is scanned for:</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Exposed secrets</li> </ul> <p>Kubernetes resource definition is scanned for:</p> <ul> <li>Vulnerabilities - partially supported through KBOM scanning</li> <li>Misconfigurations</li> <li>Exposed secrets</li> </ul> <p>To learn more, please see the documentation for Kubernetes scanning.</p>"},{"location":"docs/coverage/iac/","title":"Infrastructure as Code","text":""},{"location":"docs/coverage/iac/#scanner","title":"Scanner","text":"<p>Trivy scans Infrastructure as Code (IaC) files for </p> <ul> <li>Misconfigurations</li> <li>Secrets</li> </ul>"},{"location":"docs/coverage/iac/#supported-configurations","title":"Supported configurations","text":"Config type File patterns Kubernetes *.yml, *.yaml, *.json Docker Dockerfile, Containerfile Terraform *.tf, *.tf.json, *.tfvars Terraform Plan tfplan, *.tfplan, *.json CloudFormation *.yml, *.yaml, *.json Azure ARM Template *.json Helm *.yaml, *.tpl, *.tar.gz, etc. YAML *.yaml, *.yml JSON *.json"},{"location":"docs/coverage/iac/azure-arm/","title":"Azure ARM Template","text":"<p>Trivy supports the scanners listed in the table below.</p> Scanner Supported Misconfiguration \u2713 Secret \u2713 <p>It supports the following configurations:</p> Format Supported ARM template \u2713 Bicep \u2713<sup>1</sup> <p>To scan Bicep codes, you need to convert them into ARM templates first.</p> <pre><code>az bicep build -f main.bicep\nor\nbicep build main.bicep\n</code></pre>"},{"location":"docs/coverage/iac/azure-arm/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found Azure ARM templates.</p>"},{"location":"docs/coverage/iac/azure-arm/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for Azure ARM templates.</p> <ol> <li> <p>Bicep is not natively supported. It needs to be converted into Azure ARM templates.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/iac/cloudformation/","title":"CloudFormation","text":"<p>Trivy supports the scanners listed in the table below.</p> Scanner Supported Misconfiguration \u2713 Secret \u2713 <p>It supports the following formats.</p> Format Supported JSON \u2713 YAML \u2713"},{"location":"docs/coverage/iac/cloudformation/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found CloudFormation files. It evaluates properties, functions, and other elements within CloudFormation files to detect misconfigurations.</p>"},{"location":"docs/coverage/iac/cloudformation/#value-overrides","title":"Value Overrides","text":"<p>You can provide <code>cf-params</code> with path to CloudFormation Parameters file to Trivy to scan your CloudFormation code with parameters.</p> <pre><code>trivy config --cf-params params.json ./infrastructure/cf\n</code></pre> <p>You can check a CloudFormation Parameters Example</p>"},{"location":"docs/coverage/iac/cloudformation/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for CloudFormation.</p>"},{"location":"docs/coverage/iac/docker/","title":"Docker","text":"<p>Trivy supports the scanners listed in the table below.</p> Scanner Supported Misconfiguration \u2713 Secret \u2713 <p>It supports the following configurations.</p> Config Supported Dockerfile \u2713 Containerfile \u2713 Compose -"},{"location":"docs/coverage/iac/docker/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found Docker files.</p>"},{"location":"docs/coverage/iac/docker/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for Dockerfile.</p>"},{"location":"docs/coverage/iac/helm/","title":"Helm","text":"<p>Trivy supports two types of Helm scanning, templates and packaged charts. The following scanners are supported.</p> Format Misconfiguration Secret Template \u2713 \u2713 Chart \u2713 -"},{"location":"docs/coverage/iac/helm/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found Helm files.</p> <p>It evaluates variables, functions, and other elements within Helm templates and resolve the chart to Kubernetes manifests then run the Kubernetes checks. See here for more details on the built-in checks.</p>"},{"location":"docs/coverage/iac/helm/#value-overrides","title":"Value overrides","text":"<p>There are a number of options for overriding values in Helm charts. When override values are passed to the Helm scanner, the values will be used during the Manifest rendering process and will become part of the scanned artifact.</p>"},{"location":"docs/coverage/iac/helm/#setting-inline-value-overrides","title":"Setting inline value overrides","text":"<p>Overrides can be set inline on the command line</p> <pre><code>trivy config --helm-set securityContext.runAsUser=0 ./charts/mySql\n</code></pre>"},{"location":"docs/coverage/iac/helm/#setting-value-file-overrides","title":"Setting value file overrides","text":"<p>Overrides can be in a file that has the key=value set.</p> <pre><code># Example override file (overrides.yaml)\n\nsecurityContext:\n  runAsUser: 0\n</code></pre> <pre><code>trivy config --helm-values overrides.yaml ./charts/mySql\n</code></pre>"},{"location":"docs/coverage/iac/helm/#setting-value-as-explicit-string","title":"Setting value as explicit string","text":"<p>the <code>--helm-set-string</code> is the same as <code>--helm-set</code> but explicitly retains the value as a string</p> <pre><code>trivy config --helm-set-string name=false ./infrastructure/tf\n</code></pre>"},{"location":"docs/coverage/iac/helm/#setting-specific-values-from-files","title":"Setting specific values from files","text":"<p>Specific override values can come from specific files</p> <pre><code>trivy config --helm-set-file environment=dev.values.yaml ./charts/mySql\n</code></pre>"},{"location":"docs/coverage/iac/helm/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for Helm. Secret scanning is not conducted on the contents of packaged Charts, such as tar or tar.gz.</p>"},{"location":"docs/coverage/iac/kubernetes/","title":"Kubernetes","text":"<p>Trivy supports the scanners listed in the table below.</p> Scanner Supported Misconfiguration \u2713 Secret \u2713 <p>In addition to raw YAML and JSON, it supports the following templates:</p> Template Supported Helm \u2713 Kustomize \u2713<sup>1</sup> <p>Note</p> <p>Trivy does not support Kustomize overlays, so it scans files defined in the base. Or, you can scan the output of <code>kustomize build</code>.</p>"},{"location":"docs/coverage/iac/kubernetes/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found Kubernetes files.</p>"},{"location":"docs/coverage/iac/kubernetes/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for Kubernetes. This means that Base64 encoded secrets are not scanned, and only secrets written in plain text are detected.</p> <ol> <li> <p>Kustomize is not natively supported.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/iac/terraform/","title":"Terraform","text":"<p>Trivy supports the scanners listed in the table below.</p> Scanner Supported Misconfiguration \u2713 Secret \u2713 <p>It supports the following formats:</p> Format Supported JSON \u2713 HCL \u2713 Plan Snapshot \u2713 Plan JSON \u2713 <p>Trivy can scan Terraform Plan files (snapshots) or their JSON representations. To create a Terraform Plan and scan it, run the following command: <pre><code>terraform plan --out tfplan\ntrivy config tfplan\n</code></pre></p> <p>To scan a Terraform Plan representation in JSON format, run the following command: <pre><code>terraform show -json tfplan &gt; tfplan.json\ntrivy config tfplan.json\n</code></pre></p>"},{"location":"docs/coverage/iac/terraform/#misconfiguration","title":"Misconfiguration","text":"<p>Trivy recursively searches directories and scans all found Terraform files. It also evaluates variables, imports, and other elements within Terraform files to detect misconfigurations.</p>"},{"location":"docs/coverage/iac/terraform/#value-overrides","title":"Value Overrides","text":"<p>You can provide <code>tf-vars</code> files to Trivy to override default values specified in the Terraform HCL code.</p> <pre><code>trivy config --tf-vars dev.terraform.tfvars ./infrastructure/tf\n</code></pre>"},{"location":"docs/coverage/iac/terraform/#exclude-downloaded-terraform-modules","title":"Exclude Downloaded Terraform Modules","text":"<p>By default, downloaded modules are also scanned. If you don't want to scan them, you can use the <code>--tf-exclude-downloaded-modules</code> flag.</p> <pre><code>trivy config --tf-exclude-downloaded-modules ./configs\n</code></pre>"},{"location":"docs/coverage/iac/terraform/#secret","title":"Secret","text":"<p>The secret scan is performed on plain text files, with no special treatment for Terraform.</p>"},{"location":"docs/coverage/iac/terraform/#limitations","title":"Limitations","text":""},{"location":"docs/coverage/iac/terraform/#terraform-plan-json","title":"Terraform Plan JSON","text":""},{"location":"docs/coverage/iac/terraform/#for-each-and-count-objects-in-expression","title":"For each and count objects in expression","text":"<p>The plan created by Terraform does not provide complete information about references in expressions that use <code>each</code> or <code>count</code> objects. For this reason, in some situations it is not possible to establish references between resources that are needed for checks when detecting misconfigurations. An example of such a configuration is:</p> <pre><code>locals {\n  buckets = toset([\"test\"])\n}\n\nresource \"aws_s3_bucket\" \"this\" {\n  for_each = local.buckets\n  bucket = each.key\n}\n\nresource \"aws_s3_bucket_acl\" \"this\" {\n  for_each = local.buckets\n  bucket = aws_s3_bucket.this[each.key].id\n  acl    = \"private\"\n}\n</code></pre> <p>With this configuration, the plan will not contain information about which attribute of the <code>aws_s3_bucket</code> resource is referenced by the <code>aws_s3_bucket_acl</code> resource.</p> <p>See more here.</p>"},{"location":"docs/coverage/language/","title":"Programming Language","text":"<p>Trivy supports programming languages for </p> <ul> <li>SBOM</li> <li>Vulnerabilities</li> <li>Licenses</li> </ul>"},{"location":"docs/coverage/language/#supported-languages","title":"Supported languages","text":"<p>The files analyzed vary depending on the target. This is because Trivy primarily categorizes targets into two groups:</p> <ul> <li>Pre-build</li> <li>Post-build</li> </ul> <p>If the target is a pre-build project, like a code repository, Trivy will analyze files used for building, such as lock files. On the other hand, when the target is a post-build artifact, like a container image, Trivy will analyze installed package metadata like <code>.gemspec</code>, binary files, and so on.</p> Language File Image<sup>4</sup> Rootfs<sup>5</sup> Filesystem<sup>6</sup> Repository<sup>7</sup> Ruby Gemfile.lock - - \u2705 \u2705 gemspec \u2705 \u2705 - - Python Pipfile.lock - - \u2705 \u2705 poetry.lock - - \u2705 \u2705 uv.lock - - \u2705 \u2705 requirements.txt - - \u2705 \u2705 egg package<sup>1</sup> \u2705 \u2705 - - wheel package<sup>2</sup> \u2705 \u2705 - - PHP composer.lock - - \u2705 \u2705 installed.json \u2705 \u2705 - - Node.js package-lock.json - - \u2705 \u2705 yarn.lock - - \u2705 \u2705 pnpm-lock.yaml - - \u2705 \u2705 bun.lock - - \u2705 \u2705 package.json \u2705 \u2705 - - .NET packages.lock.json \u2705 \u2705 \u2705 \u2705 packages.config \u2705 \u2705 \u2705 \u2705 .deps.json \u2705 \u2705 \u2705 \u2705 *Packages.props<sup>9</sup> \u2705 \u2705 \u2705 \u2705 Java JAR/WAR/PAR/EAR<sup>3</sup> \u2705 \u2705 - - pom.xml - - \u2705 \u2705 *gradle.lockfile - - \u2705 \u2705 *.sbt.lock - - \u2705 \u2705 Go Binaries built by Go \u2705 \u2705 - - go.mod - - \u2705 \u2705 Rust Cargo.lock \u2705 \u2705 \u2705 \u2705 Binaries built with cargo-auditable \u2705 \u2705 - - C/C++ conan.lock - - \u2705 \u2705 Elixir mix.lock<sup>8</sup> - - \u2705 \u2705 Dart pubspec.lock - - \u2705 \u2705 Swift Podfile.lock - - \u2705 \u2705 Package.resolved - - \u2705 \u2705 Julia Manifest.toml \u2705 \u2705 \u2705 \u2705 <p>The path of these files does not matter.</p> <p>Example: Dockerfile</p> <ol> <li> <p><code>*.egg-info</code>, <code>*.egg-info/PKG-INFO</code>, <code>*.egg</code> and <code>EGG-INFO/PKG-INFO</code> \u21a9</p> </li> <li> <p><code>.dist-info/METADATA</code> \u21a9</p> </li> <li> <p><code>*.jar</code>, <code>*.war</code>, <code>*.par</code> and <code>*.ear</code> \u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the image scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the rootfs scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the filesystem scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the git repository scanning\u00a0\u21a9</p> </li> <li> <p>To scan a filename other than the default filename use file-patterns \u21a9</p> </li> <li> <p><code>Directory.Packages.props</code> and  legacy <code>Packages.props</code> file names are supported\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/c/","title":"C/C++","text":"<p>Trivy supports Conan C/C++ Package Manager (v1 and v2 with limitations).</p> <p>The following scanners are supported.</p> Package manager SBOM Vulnerability License Conan \u2713 \u2713 \u2713<sup>1</sup> <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Conan (lockfile v1) conan.lock<sup>2</sup> \u2713 Excluded \u2713 \u2713 Conan (lockfile v2) conan.lock<sup>2</sup> \u2713 <sup>3</sup> Excluded - \u2713"},{"location":"docs/coverage/language/c/#conan","title":"Conan","text":"<p>In order to detect dependencies, Trivy searches for <code>conan.lock</code><sup>1</sup>.</p>"},{"location":"docs/coverage/language/c/#licenses","title":"Licenses","text":"<p>The Conan lock file doesn't contain any license information. To obtain licenses we parse the <code>conanfile.py</code> files from the conan v1 cache directory and conan v2 cache directory. To correctly detection licenses, ensure that the cache directory contains all dependencies used.</p> <ol> <li> <p>The local cache should contain the dependencies used. See licenses.\u00a0\u21a9\u21a9</p> </li> <li> <p><code>conan.lock</code> is default name. To scan a custom filename use file-patterns.\u00a0\u21a9\u21a9</p> </li> <li> <p>For <code>conan.lock</code> in version 2, indirect dependencies are included in analysis but not flagged explicitly in dependency tree\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/dart/","title":"Dart","text":"<p>Trivy supports Dart.</p> <p>The following scanners are supported.</p> Package manager SBOM Vulnerability License Dart \u2713 \u2713 - <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Detection Priority Dart pubspec.lock \u2713 Included \u2713 - \u2713"},{"location":"docs/coverage/language/dart/#dart_1","title":"Dart","text":"<p>In order to detect dependencies, Trivy searches for <code>pubspec.lock</code>.</p> <p>Trivy marks indirect dependencies, but <code>pubspec.lock</code> file doesn't have options to separate root and dev transitive dependencies. So Trivy includes all dependencies in report.</p>"},{"location":"docs/coverage/language/dart/#sdk-dependencies","title":"SDK dependencies","text":"<p>Dart uses version <code>0.0.0</code> for SDK dependencies (e.g. Flutter). It is not possible to accurately determine the versions of these dependencies. Trivy just treats them as <code>0.0.0</code>.</p> <p>If --detection-priority comprehensive is passed, Trivy uses the minimum version of the constraint for the SDK. For example, in the following case, the version of <code>flutter</code> would be <code>3.3.0</code>:</p> <pre><code>flutter:\n  dependency: \"direct main\"\n  description: flutter\n  source: sdk\n  version: \"0.0.0\"\nsdks:\n  dart: \"&gt;=2.18.0 &lt;3.0.0\"\n  flutter: \"^3.3.0\"\n</code></pre>"},{"location":"docs/coverage/language/dart/#dependency-tree","title":"Dependency tree","text":"<p>To build <code>dependency tree</code> Trivy parses cache directory. Currently supported default directories and <code>PUB_CACHE</code> environment (absolute path only).</p> <p>Note</p> <p>Make sure the cache directory contains all the dependencies installed in your application. To download missing dependencies, use <code>dart pub get</code> command.     </p>"},{"location":"docs/coverage/language/dotnet/","title":".NET","text":"<p>Trivy supports <code>.NET core</code> and <code>NuGet</code> package managers.</p> <p>The following scanners are supported.</p> Artifact SBOM Vulnerability License .Net Core \u2713 \u2713 - NuGet \u2713 \u2713 \u2713 <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position .Net Core *.deps.json \u2713 Excluded - \u2713 NuGet packages.config \u2713 Excluded - - NuGet *Packages.props - Excluded - - NuGet packages.lock.json \u2713 Included \u2713 \u2713"},{"location":"docs/coverage/language/dotnet/#depsjson","title":"*.deps.json","text":"<p>Trivy parses <code>*.deps.json</code> files. Trivy currently excludes dev dependencies from the report.</p> <p>Note</p> <p>Trivy only includes runtime dependencies in the report.</p>"},{"location":"docs/coverage/language/dotnet/#packagesconfig","title":"packages.config","text":"<p>Trivy only finds dependency names and versions from <code>packages.config</code> files. To build dependency graph, it is better to use <code>packages.lock.json</code> files.</p>"},{"location":"docs/coverage/language/dotnet/#packagesprops","title":"*Packages.props","text":"<p>Trivy parses <code>*Packages.props</code> files. Both legacy <code>Packages.props</code> and modern <code>Directory.Packages.props</code> are supported.</p>"},{"location":"docs/coverage/language/dotnet/#license-detection","title":"license detection","text":"<p><code>packages.config</code> files don't have information about the licenses used. Trivy uses *.nuspec files from global packages folder to detect licenses.</p> <p>Note</p> <p>The <code>licenseUrl</code> field is deprecated. Trivy doesn't parse this field and only checks the license field (license <code>expression</code> type only).</p> <p>Currently only the default path and <code>NUGET_PACKAGES</code> environment variable are supported.</p>"},{"location":"docs/coverage/language/dotnet/#packageslockjson","title":"packages.lock.json","text":"<p>Don't forgot to enable lock files in your project.</p> <p>Tip</p> <p>Please make sure your lock file is up-to-date after modifying dependencies.</p>"},{"location":"docs/coverage/language/dotnet/#license-detection_1","title":"license detection","text":"<p>Same as packages.config</p>"},{"location":"docs/coverage/language/elixir/","title":"Elixir","text":"<p>Trivy supports Hex repository for Elixir.</p> <p>The following scanners are supported.</p> Package manager SBOM Vulnerability License hex \u2713 \u2713 - <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position hex mix.lock<sup>1</sup> \u2713 Excluded - \u2713"},{"location":"docs/coverage/language/elixir/#hex","title":"Hex","text":"<p>In order to detect dependencies, Trivy searches for <code>mix.lock</code><sup>1</sup>.</p> <p>Configure your project to use <code>mix.lock</code><sup>1</sup> file.</p> <ol> <li> <p><code>mix.lock</code> is default name. To scan a custom filename use file-patterns \u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/golang/","title":"Go","text":""},{"location":"docs/coverage/language/golang/#overview","title":"Overview","text":"<p>Trivy supports two types of Go scanning, Go Modules and binaries built by Go.</p> <p>The following scanners are supported.</p> Artifact SBOM Vulnerability License Modules \u2713 \u2713 \u2713 Binaries \u2713 \u2713 - <p>The table below provides an outline of the features Trivy offers.</p> Artifact Offline<sup>1</sup> Dev dependencies Dependency graph Stdlib Detection Priority Modules \u2705 Include \u2705 \u2705 \u2705 Binaries \u2705 Exclude - \u2705 Not needed <p>Note</p> <p>When scanning Go projects (go.mod or binaries built with Go), Trivy scans only dependencies of the project, and does not detect vulnerabilities of application itself.  For example, when scanning the Docker project (Docker's source code with go.mod or the Docker binary), Trivy might find vulnerabilities in Go modules that Docker depends on, but won't find vulnerabilities of Docker itself. Moreover, when scanning the Trivy project, which happens to use Docker, Docker's vulnerabilities might be detected as dependencies of Trivy.</p>"},{"location":"docs/coverage/language/golang/#data-sources","title":"Data Sources","text":"<p>The data sources are listed here. Trivy uses Go Vulnerability Database for standard library and uses GitHub Advisory Database for other Go modules.</p>"},{"location":"docs/coverage/language/golang/#go-module","title":"Go Module","text":"<p>Depending on Go versions, the required files are different.</p> Version Required files Offline &gt;=1.17 go.mod \u2705 &lt;1.17 go.mod, go.sum \u2705 <p>In Go 1.17+ projects, Trivy uses <code>go.mod</code> for direct/indirect dependencies. On the other hand, it uses <code>go.mod</code> for direct dependencies and <code>go.sum</code> for indirect dependencies in Go 1.16 or less.</p> <p>Go 1.17+ holds actually needed indirect dependencies in <code>go.mod</code>, and it reduces false detection. <code>go.sum</code> in Go 1.16 or less contains all indirect dependencies that are even not needed for compiling. If you want to have better detection, please consider updating the Go version in your project.</p> <p>Note</p> <p>The Go version doesn't mean your Go tool version, but the Go version in your go.mod.</p> <pre><code>module github.com/aquasecurity/trivy\n\ngo 1.18\n\nrequire (\n        github.com/CycloneDX/cyclonedx-go v0.5.0\n        ...\n)\n</code></pre> <p>To update the Go version in your project, you need to run the following command.</p> <pre><code>$ go mod tidy -go=1.18\n</code></pre>"},{"location":"docs/coverage/language/golang/#gomod-main","title":"Main Module","text":"<p>Trivy scans only dependencies of the project, and does not detect vulnerabilities of the main module.  For example, when scanning the Docker project (Docker's source code with go.mod), Trivy might find vulnerabilities in Go modules that Docker depends on, but won't find vulnerabilities of Docker itself. Moreover, when scanning the Trivy project, which happens to use Docker, Docker's vulnerabilities might be detected as dependencies of Trivy.</p>"},{"location":"docs/coverage/language/golang/#gomod-stdlib","title":"Standard Library","text":"<p>Detecting the version of Go used in the project can be tricky. The go.mod file include hints that allows Trivy to guess the Go version but it eventually depends on the Go tool version in the build environment. Since this strategy is not fully deterministic and accurate, it is enabled only in --detection-priority comprehensive mode. When enabled, Trivy detects stdlib version as the minimum between the <code>go</code> and the <code>toolchain</code> directives in the <code>go.mod</code> file. To obtain reproducible scan results Trivy doesn't check the locally installed version of <code>Go</code>.</p> <p>Note</p> <p>Trivy detects <code>stdlib</code> only for <code>Go</code> 1.21 or higher.</p> <p>The version from the <code>go</code> line (for <code>Go</code> 1.20 or early) is not a minimum required version. For details, see this.</p> <p>It possibly produces false positives. See the caveat for details.</p>"},{"location":"docs/coverage/language/golang/#license","title":"License","text":"<p>To identify licenses, you need to download modules to local cache beforehand, such as <code>go mod download</code>, <code>go mod tidy</code>, <code>go mod vendor</code>, etc. If the <code>vendor</code> directory exists, Trivy uses this directory when scanning for license files. For other cases Trivy traverses <code>$GOPATH/pkg/mod</code>dir and collects those extra information.</p>"},{"location":"docs/coverage/language/golang/#dependency-graph","title":"Dependency Graph","text":"<p>Same as licenses, you need to download modules to local cache beforehand.</p>"},{"location":"docs/coverage/language/golang/#go-binary","title":"Go Binary","text":"<p>Trivy scans Go binaries when it encounters them during scans such as container images or file systems.  When scanning binaries built by Go, Trivy finds dependencies and Go version information as embedded in the binary by Go tool at build time.</p> <pre><code>$ trivy rootfs ./your_binary\n</code></pre> <p>Note</p> <p>It doesn't work with UPX-compressed binaries.</p>"},{"location":"docs/coverage/language/golang/#main-module","title":"Main Module","text":"<p>Go binaries installed using the <code>go install</code> command contains correct (semver) version for the main module and therefore are detected by Trivy. In other cases, Go uses the <code>(devel)</code> version<sup>2</sup>. In this case, Trivy will attempt to parse any <code>-ldflags</code> as it's a common practice to pass versions this way. If unsuccessful, the version will be empty<sup>3</sup>.</p>"},{"location":"docs/coverage/language/golang/#go-binary-stdlib","title":"Standard Library","text":"<p>Trivy detects the Go version used to compile the binary and detects its vulnerabilities in the standard libraries. It possibly produces false positives. See the caveat for details.</p>"},{"location":"docs/coverage/language/golang/#caveats","title":"Caveats","text":""},{"location":"docs/coverage/language/golang/#stdlib-vulnerabilities","title":"Stdlib Vulnerabilities","text":"<p>Trivy does not know if or how you use stdlib functions, therefore it is possible that stdlib vulnerabilities are not applicable to your use case. There are a few ways to mitigate this:</p> <ol> <li>Analyze vulnerability reachability using a tool such as govulncheck. This will ensure that reported vulnerabilities are applicable to your project.</li> <li>Suppress non-applicable vulnerabilities using either ignore file for self-use or VEX Hub for public use.</li> </ol>"},{"location":"docs/coverage/language/golang/#empty-version","title":"Empty Version","text":"<p>As described in the Main Module section, the main module of Go binaries might have an empty version. Also, dependencies replaced with local ones will have an empty version.</p> <ol> <li> <p>It doesn't require the Internet access.\u00a0\u21a9</p> </li> <li> <p>See https://github.com/aquasecurity/trivy/issues/1837#issuecomment-1832523477 \u21a9</p> </li> <li> <p>See https://github.com/golang/go/issues/63432#issuecomment-1751610604 \u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/java/","title":"Java","text":"<p>Trivy supports four types of Java scanning: <code>JAR/WAR/PAR/EAR</code>, <code>pom.xml</code>, <code>*gradle.lockfile</code> and <code>*.sbt.lock</code> files.</p> <p>Each artifact supports the following scanners:</p> Artifact SBOM Vulnerability License JAR/WAR/PAR/EAR \u2713 \u2713 - pom.xml \u2713 \u2713 \u2713 *gradle.lockfile \u2713 \u2713 \u2713 *.sbt.lock \u2713 \u2713 - <p>The following table provides an outline of the features Trivy offers.</p> Artifact Internet access Dev dependencies Dependency graph Position Detection Priority JAR/WAR/PAR/EAR Trivy Java DB Include - - Not needed pom.xml Maven repository <sup>1</sup> Exclude \u2713 \u2713<sup>7</sup> - *gradle.lockfile - Exclude \u2713 \u2713 Not needed *.sbt.lock - Exclude - \u2713 Not needed <p>These may be enabled or disabled depending on the target. See here for the detail.</p>"},{"location":"docs/coverage/language/java/#jarwarparear","title":"JAR/WAR/PAR/EAR","text":"<p>To find information about your JAR<sup>2</sup> file, Trivy parses <code>pom.properties</code> and <code>MANIFEST.MF</code> files in your JAR<sup>2</sup> file and takes required properties<sup>3</sup>.</p> <p>If those files don't exist or don't contain enough information - Trivy will try to find this JAR<sup>2</sup> file in trivy-java-db. The Java DB will be automatically downloaded/updated when any JAR<sup>2</sup> file is found. It is stored in the cache directory.</p> <p>EXPERIMENTAL</p> <p>Finding JARs in <code>trivy-java-db</code> is an experimental function.</p> <p>Base JAR<sup>2</sup> may contain inner JARs<sup>2</sup> within itself. To find information about these JARs<sup>2</sup>, the same logic is used as for the base JAR<sup>2</sup>.</p> <p><code>table</code> format only contains the name of root JAR<sup>2</sup> . To get the full path to inner JARs<sup>2</sup> use the <code>json</code> format.</p>"},{"location":"docs/coverage/language/java/#pomxml","title":"pom.xml","text":"<p>Trivy parses your <code>pom.xml</code> file and tries to find files with dependencies from these local locations.</p> <ul> <li>project directory<sup>4</sup></li> <li>relativePath field<sup>5</sup></li> <li>local repository directory<sup>6</sup>.</li> </ul>"},{"location":"docs/coverage/language/java/#remote-repositories","title":"remote repositories","text":"<p>If your machine doesn't have the necessary files - Trivy tries to find the information about these dependencies in the remote repositories:</p> <ul> <li>repositories from pom files</li> <li>maven central repository</li> </ul> <p>Trivy reproduces Maven's repository selection and priority:</p> <ul> <li>for snapshot artifacts:<ul> <li>check only snapshot repositories from pom files (if exists)</li> </ul> </li> <li>for other artifacts:<ul> <li>check release repositories from pom files (if exists)</li> <li>check maven central</li> </ul> </li> </ul> <p>Note</p> <p>Trivy only takes information about packages. We don't take a list of vulnerabilities for packages from the <code>maven repository</code>. Information about data sources for Java you can see here.</p> <p>You can disable connecting to the maven repository with the <code>--offline-scan</code> flag. The <code>--offline-scan</code> flag does not affect the Trivy database. The vulnerability database will be downloaded anyway.</p> <p>Warning</p> <p>Trivy may skip some dependencies (that were not found on your local machine) when the <code>--offline-scan</code> flag is passed.</p>"},{"location":"docs/coverage/language/java/#supported-scopes","title":"supported scopes","text":"<p>Trivy only scans <code>import</code>, <code>compile</code>, <code>runtime</code> and empty maven scopes. Other scopes and <code>Optional</code> dependencies are not currently being analyzed.</p>"},{"location":"docs/coverage/language/java/#empty-dependency-version","title":"empty dependency version","text":"<p>There are cases when Trivy cannot determine the version of dependencies:</p> <ul> <li>Unable to determine the version from the parent because the parent is not reachable;</li> <li>The dependency uses a hard requirement with more than one version.</li> </ul> <p>In these cases, Trivy uses an empty version for the dependency.</p> <p>Warning</p> <p>Trivy doesn't detect child dependencies for dependencies without a version.</p>"},{"location":"docs/coverage/language/java/#maven-invoker-plugin","title":"maven-invoker-plugin","text":"<p>Typically, the integration tests directory (<code>**/[src|target]/it/*/pom.xml</code>) of maven-invoker-plugin doesn't contain actual <code>pom.xml</code> files and should be skipped to avoid noise.</p> <p>Trivy marks dependencies from these files as the development dependencies and skip them by default. If you need to show them, use the <code>--include-dev-deps</code> flag.</p>"},{"location":"docs/coverage/language/java/#gradlelock","title":"Gradle.lock","text":"<p><code>gradle.lock</code> files only contain information about used dependencies.</p> <p>Note</p> <p>All necessary files are checked locally. Gradle file scanning doesn't require internet access.</p> <p>By default, Trivy doesn't report development dependencies.  Use the <code>--include-dev-deps</code> flag to include them in the results.</p>"},{"location":"docs/coverage/language/java/#dependency-tree","title":"Dependency-tree","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy finds child dependencies from <code>*.pom</code> files in the cache<sup>8</sup> directory.</p> <p>But there is no reliable way to determine direct dependencies (even using other files). Therefore, we mark all dependencies as indirect to use logic to guess direct dependencies and build a dependency tree.</p>"},{"location":"docs/coverage/language/java/#licenses","title":"Licenses","text":"<p>Trivy also can detect licenses for dependencies.</p> <p>Make sure that you have cache<sup>8</sup> directory to find licenses from <code>*.pom</code> dependency files.</p>"},{"location":"docs/coverage/language/java/#sbt","title":"SBT","text":"<p><code>build.sbt.lock</code> files only contain information about used dependencies. This requires a lockfile generated using the sbt-dependency-lock plugin.</p> <p>Note</p> <p>All necessary files are checked locally. SBT file scanning doesn't require internet access.</p> <ol> <li> <p>Uses maven repository to get information about dependencies. Internet access required.\u00a0\u21a9</p> </li> <li> <p>It means <code>*.jar</code>, <code>*.war</code>, <code>*.par</code> and <code>*.ear</code> file\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p><code>ArtifactID</code>, <code>GroupID</code> and <code>Version</code> \u21a9</p> </li> <li> <p>e.g. when parent pom.xml file has <code>../pom.xml</code> path\u00a0\u21a9</p> </li> <li> <p>When you use dependency path in <code>relativePath</code> field in pom.xml file\u00a0\u21a9</p> </li> <li> <p><code>/Users/&lt;username&gt;/.m2/repository</code> (for Linux and Mac) and <code>C:/Users/&lt;username&gt;/.m2/repository</code> (for Windows) by default\u00a0\u21a9</p> </li> <li> <p>To avoid confusion, Trivy only finds locations for direct dependencies from the base pom.xml file.\u00a0\u21a9</p> </li> <li> <p>The supported directories are <code>$GRADLE_USER_HOME/caches</code> and <code>$HOME/.gradle/caches</code> (<code>%HOMEPATH%\\.gradle\\caches</code> for Windows).\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/julia/","title":"Julia","text":""},{"location":"docs/coverage/language/julia/#features","title":"Features","text":"<p>Trivy supports Pkg.jl, which is the Julia package manager. The following scanners are supported.</p> Package manager SBOM Vulnerability License Pkg.jl \u2713 - - <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies License Dependency graph Position Pkg.jl Manifest.toml \u2705 Excluded<sup>1</sup> - \u2705 \u2705"},{"location":"docs/coverage/language/julia/#pkgjl","title":"Pkg.jl","text":"<p>Trivy searches for <code>Manifest.toml</code> to detect dependencies.</p> <p>Trivy also supports dependency trees; however, to display an accurate tree, it needs to know whether each package is a direct dependency of the project. Since this information is not included in <code>Manifest.toml</code>, Trivy parses <code>Project.toml</code>, which should be located next to <code>Project.toml</code>. If you want to see the dependency tree, please ensure that <code>Project.toml</code> is present.</p> <p>Scanning <code>Manifest.toml</code> and <code>Project.toml</code> together also removes developer dependencies.</p> <p>Dependency extensions are currently ignored.</p> <ol> <li> <p>When you scan <code>Manifest.toml</code> and <code>Project.toml</code> together.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/nodejs/","title":"Node.js","text":"<p>Trivy supports four types of Node.js package managers: <code>npm</code>, <code>Yarn</code>, <code>pnpm</code> and <code>Bun</code><sup>1</sup>.</p> <p>The following scanners are supported.</p> Artifact SBOM Vulnerability License npm \u2713 \u2713 \u2713 Yarn \u2713 \u2713 \u2713 pnpm \u2713 \u2713 \u2713 Bun \u2713 \u2713 \u2713 <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position npm package-lock.json \u2713 Excluded \u2713 \u2713 Yarn yarn.lock \u2713 Excluded \u2713 \u2713 pnpm pnpm-lock.yaml \u2713 Excluded \u2713 - Bun bun.lock \u2713 Excluded \u2713 \u2713 <p>In addition, Trivy scans installed packages with <code>package.json</code>.</p> File Dependency graph Position License package.json - - \u2705 <p>These may be enabled or disabled depending on the target. See here for the detail.</p>"},{"location":"docs/coverage/language/nodejs/#package-managers","title":"Package managers","text":"<p>Trivy parses your files generated by package managers in filesystem/repository scanning.</p> <p>Tip</p> <p>Please make sure your lock file is up-to-date after modifying <code>package.json</code>.</p>"},{"location":"docs/coverage/language/nodejs/#npm","title":"npm","text":"<p>Trivy parses <code>package-lock.json</code>. To identify licenses, you need to download dependencies to <code>node_modules</code> beforehand. Trivy analyzes <code>node_modules</code> for licenses.</p> <p>By default, Trivy doesn't report development dependencies. Use the <code>--include-dev-deps</code> flag to include them.</p>"},{"location":"docs/coverage/language/nodejs/#yarn","title":"Yarn","text":"<p>Trivy parses <code>yarn.lock</code>.</p> <p>Trivy also analyzes additional files to gather more information about the detected dependencies.</p> <ul> <li>package.json</li> <li>node_modules/**</li> </ul>"},{"location":"docs/coverage/language/nodejs/#package-relationships","title":"Package relationships","text":"<p><code>yarn.lock</code> files don't contain information about package relationships, such as direct or indirect dependencies. To enrich this information, Trivy parses the <code>package.json</code> file located next to the <code>yarn.lock</code> file as well as workspace <code>package.json</code> files.</p> <p>By default, Trivy doesn't report development dependencies. Use the <code>--include-dev-deps</code> flag to include them in the results.</p>"},{"location":"docs/coverage/language/nodejs/#development-dependencies","title":"Development dependencies","text":"<p><code>yarn.lock</code> files don't contain information about package groups, such as production and development dependencies. To identify dev dependencies and support aliases, Trivy parses the <code>package.json</code> file located next to the <code>yarn.lock</code> file as well as workspace <code>package.json</code> files.</p>"},{"location":"docs/coverage/language/nodejs/#licenses","title":"Licenses","text":"<p>Trivy analyzes the <code>.yarn</code> directory (for Yarn 2+) or the <code>node_modules</code> directory (for Yarn Classic) located next to the <code>yarn.lock</code> file to detect licenses.</p>"},{"location":"docs/coverage/language/nodejs/#pnpm","title":"pnpm","text":"<p>Trivy parses <code>pnpm-lock.yaml</code>, then finds production dependencies and builds a tree of dependencies with vulnerabilities. To identify licenses, you need to download dependencies to <code>node_modules</code> beforehand. Trivy analyzes <code>node_modules</code> for licenses.</p>"},{"location":"docs/coverage/language/nodejs/#lock-file-v9-version","title":"lock file v9 version","text":"<p>Trivy supports <code>Dev</code> field for <code>pnpm-lock.yaml</code> v9 or later. Use the <code>--include-dev-deps</code> flag to include the developer's dependencies in the result.</p>"},{"location":"docs/coverage/language/nodejs/#bun","title":"Bun","text":"<p>Trivy also supports scanning <code>bun.lock</code> file generated by Bun.  You can use Bun v1.2 which uses this file as default or use <code>bun install --save-text-lockfile</code> in Bun v1.1.39 to generate it.</p> <p>For previous Bun versions you can use the command <code>bun install -y</code> to generate a Yarn-compatible <code>yarn.lock</code> and then scan it with Trivy.</p>"},{"location":"docs/coverage/language/nodejs/#development-dependencies_1","title":"Development dependencies","text":"<p><code>bun.lock</code> contains information about package groups, such as production and development dependencies. By default, Trivy doesn't report development dependencies. Use the <code>--include-dev-deps</code> flag to include them.</p> <p>Note</p> <p><code>bun.lockb</code> is not supported.</p>"},{"location":"docs/coverage/language/nodejs/#packages","title":"Packages","text":"<p>Trivy parses the manifest files of installed packages in container image scanning and so on.</p>"},{"location":"docs/coverage/language/nodejs/#packagejson","title":"package.json","text":"<p>Trivy searches for <code>package.json</code> files under <code>node_modules</code> and identifies installed packages. It only extracts package names, versions and licenses for those packages.</p> <ol> <li> <p>yarn.lock must be generated\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/php/","title":"PHP","text":"<p>Trivy supports Composer, which is a tool for dependency management in PHP.</p> <p>The following scanners are supported.</p> Package manager SBOM Vulnerability License Composer \u2713 \u2713 \u2713 <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Composer composer.lock \u2713 Excluded \u2713 \u2713 Composer installed.json \u2713 Excluded - \u2713"},{"location":"docs/coverage/language/php/#composerlock","title":"composer.lock","text":"<p>In order to detect dependencies, Trivy searches for <code>composer.lock</code>.</p> <p>Trivy also supports dependency trees; however, to display an accurate tree, it needs to know whether each package is a direct dependency of the project. Since this information is not included in <code>composer.lock</code>, Trivy parses <code>composer.json</code>, which should be located next to <code>composer.lock</code>. If you want to see the dependency tree, please ensure that <code>composer.json</code> is present.</p>"},{"location":"docs/coverage/language/php/#installedjson","title":"installed.json","text":"<p>Trivy also supports dependency detection for <code>installed.json</code> files. By default, you can find this file at <code>path_to_app/vendor/composer/installed.json</code>.</p>"},{"location":"docs/coverage/language/python/","title":"Python","text":"<p>Trivy supports three types of Python package managers: <code>pip</code>, <code>Pipenv</code> and <code>Poetry</code>. The following scanners are supported for package managers.</p> Package manager SBOM Vulnerability License pip \u2713 \u2713 \u2713 Pipenv \u2713 \u2713 - Poetry \u2713 \u2713 - uv \u2713 \u2713 - <p>In addition, Trivy supports three formats of Python packages: <code>egg</code>, <code>wheel</code> and <code>conda</code>. The following scanners are supported for Python packages.</p> Packaging SBOM Vulnerability License Egg \u2713 \u2713 \u2713 Wheel \u2713 \u2713 \u2713 Conda \u2713 - - <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Detection Priority pip requirements.txt - Include - \u2713 \u2713 Pipenv Pipfile.lock \u2713 Include - \u2713 Not needed Poetry poetry.lock \u2713 Exclude \u2713 - Not needed uv uv.lock \u2713 Exclude \u2713 - Not needed Packaging Dependency graph Egg \u2713 Wheel \u2713 <p>These may be enabled or disabled depending on the target. See here for the detail.</p>"},{"location":"docs/coverage/language/python/#package-managers","title":"Package managers","text":"<p>Trivy parses your files generated by package managers in filesystem/repository scanning.</p>"},{"location":"docs/coverage/language/python/#pip","title":"pip","text":""},{"location":"docs/coverage/language/python/#dependency-detection","title":"Dependency detection","text":"<p>By default, Trivy only parses version specifiers with <code>==</code> comparison operator and without <code>.*</code>.</p> <p>Using the --detection-priority comprehensive option ensures that the tool establishes a minimum version, which is particularly useful in scenarios where identifying the exact version is challenging.  In such case Trivy parses specifiers <code>&gt;=</code>,<code>~=</code> and a trailing <code>.*</code>.</p> <p><pre><code>keyring &gt;= 4.1.1            # Minimum version 4.1.1\nMopidy-Dirble ~= 1.1        # Minimum version 1.1\npython-gitlab==2.0.*        # Minimum version 2.0.0\n</code></pre> Also, there is a way to convert unsupported version specifiers - use either the <code>pip-compile</code> tool (which doesn't install the packages) or call <code>pip freeze</code> from the virtual environment where the requirements are already installed.</p> <pre><code>$ cat requirements.txt \nboto3~=1.24.60\nclick&gt;=8.0\njson-fix==0.5.*\n$ pip install -r requirements.txt\n...\n$ pip freeze &gt; requirements.txt \n$ cat requirements.txt \nboto3==1.24.96\nbotocore==1.27.96\nclick==8.1.7\njmespath==1.0.1\njson-fix==0.5.2\npython-dateutil==2.8.2\ns3transfer==0.6.2\nsetuptools==69.0.2\nsix==1.16.0\nurllib3==1.26.18\nwheel==0.42.0\n</code></pre> <p><code>requirements.txt</code> files usually contain only the direct dependencies and not contain the transitive dependencies. Therefore, Trivy scans only for the direct dependencies with <code>requirements.txt</code>.</p> <p>To detect transitive dependencies as well, you need to generate <code>requirements.txt</code> that contains them. Like described above, tou can do it with <code>pip freeze</code> or <code>pip-compile</code>.</p> <pre><code>$ cat requirements.txt # it will only find `requests@2.28.2`.\nrequests==2.28.2 \n$ pip install -r requirements.txt\n...\n\n$ pip freeze &gt; requirements.txt   \n$ cat requirements.txt # it will also find the transitive dependencies of `requests@2.28.2`.\ncertifi==2022.12.7\ncharset-normalizer==3.1.0\nidna==3.4\nPyJWT==2.1.0\nrequests==2.28.2\nurllib3==1.26.15\n</code></pre> <p><code>pip freeze</code> also helps to resolve extras(optional) dependencies (like <code>package[extras]=0.0.0</code>).</p> <p><code>requirements.txt</code> files don't contain information about dependencies used for development. Trivy could detect vulnerabilities on the development packages, which not affect your production environment.</p>"},{"location":"docs/coverage/language/python/#license-detection","title":"License detection","text":"<p><code>requirements.txt</code> files don't contain information about licenses. Therefore, Trivy checks <code>METADATA</code> files from <code>lib/site-packages</code> directory. </p> <p>Trivy uses 3 ways to detect <code>site-packages</code> directory:</p> <ul> <li>Checks <code>VIRTUAL_ENV</code> environment variable.</li> <li>Detects path to <code>python</code><sup>1</sup> binary and checks <code>../lib/pythonX.Y/site-packages</code> directory.</li> <li>Detects path to <code>python</code><sup>1</sup> binary and checks <code>../../lib/site-packages</code> directory.</li> </ul>"},{"location":"docs/coverage/language/python/#pipenv","title":"Pipenv","text":"<p>Trivy parses <code>Pipfile.lock</code>. <code>Pipfile.lock</code> files don't contain information about dependencies used for development. Trivy could detect vulnerabilities on the development packages, which not affect your production environment.</p> <p>License detection is not supported for <code>Pipenv</code>.</p>"},{"location":"docs/coverage/language/python/#poetry","title":"Poetry","text":"<p>Trivy uses <code>poetry.lock</code> to identify dependencies and find vulnerabilities. To build the correct dependency graph, <code>pyproject.toml</code> also needs to be present next to <code>poetry.lock</code>.</p> <p>License detection is not supported for <code>Poetry</code>.</p> <p>By default, Trivy doesn't report development dependencies. Use the <code>--include-dev-deps</code> flag to include them.</p>"},{"location":"docs/coverage/language/python/#uv","title":"uv","text":"<p>Trivy uses <code>uv.lock</code> to identify dependencies and find vulnerabilities.</p> <p>License detection is not supported for <code>uv</code>.</p> <p>By default, Trivy doesn't report development dependencies. Use the <code>--include-dev-deps</code> flag to include them.</p>"},{"location":"docs/coverage/language/python/#packaging","title":"Packaging","text":"<p>Trivy parses the manifest files of installed packages in container image scanning and so on. See here for the detail.</p>"},{"location":"docs/coverage/language/python/#egg","title":"Egg","text":"<p>Trivy looks for <code>*.egg-info</code>, <code>*.egg-info/METADATA</code>, <code>*.egg-info/PKG-INFO</code>, <code>*.egg</code> and <code>EGG-INFO/PKG-INFO</code> to identify Python packages.</p>"},{"location":"docs/coverage/language/python/#wheel","title":"Wheel","text":"<p>Trivy looks for <code>.dist-info/METADATA</code> to identify Python packages.</p> <ol> <li> <p>Trivy checks <code>python</code>, <code>python3</code>, <code>python2</code> and <code>python.exe</code> file names.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/ruby/","title":"Ruby","text":"<p>Trivy supports Bundler and RubyGems. The following scanners are supported for Bundler and RubyGems.</p> Package manager SBOM Vulnerability License Bundler \u2713 \u2713 - RubyGems \u2713 \u2713 \u2713 <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Bundler Gemfile.lock \u2713 Included \u2713 \u2713 RubyGems .gemspec - Included - -"},{"location":"docs/coverage/language/ruby/#bundler","title":"Bundler","text":"<p>Trivy searches for <code>Gemfile.lock</code> to detect dependencies. </p>"},{"location":"docs/coverage/language/ruby/#rubygems","title":"RubyGems","text":"<p><code>.gemspec</code> files doesn't contains transitive dependencies. You need to scan each <code>.gemspec</code> file separately.</p>"},{"location":"docs/coverage/language/rust/","title":"Rust","text":"<p>Trivy supports Cargo, which is the Rust package manager. The following scanners are supported for Cargo.</p> Package manager SBOM Vulnerability License Cargo \u2713 \u2713 - <p>In addition, it supports binaries built with cargo-auditable.</p> Artifact SBOM Vulnerability License Binaries \u2713 \u2713 -"},{"location":"docs/coverage/language/rust/#features","title":"Features","text":"<p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Cargo Cargo.lock \u2713 Excluded<sup>1</sup> \u2713 \u2713 Artifact Transitive dependencies Dev dependencies Dependency graph Position Binaries \u2713 Excluded - -"},{"location":"docs/coverage/language/rust/#cargo","title":"Cargo","text":"<p>Trivy searches for <code>Cargo.lock</code> to detect dependencies.</p> <p>Trivy also supports dependency trees; however, to display an accurate tree, it needs to know whether each package is a direct dependency of the project. Since this information is not included in <code>Cargo.lock</code>, Trivy parses <code>Cargo.toml</code>, which should be located next to <code>Cargo.lock</code>. If you want to see the dependency tree, please ensure that <code>Cargo.toml</code> is present.</p> <p>Scan <code>Cargo.lock</code> and <code>Cargo.toml</code> together also removes developer dependencies.</p>"},{"location":"docs/coverage/language/rust/#binaries","title":"Binaries","text":"<p>Trivy scans binaries built with cargo-auditable. If such a binary exists, Trivy will identify it as being built with cargo-audit and scan it.</p> <ol> <li> <p>When you scan Cargo.lock and Cargo.toml together.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/coverage/language/swift/","title":"Swift","text":"<p>Trivy supports CocoaPods and Swift package managers.</p> <p>The following scanners are supported.</p> Package manager SBOM Vulnerability License Swift \u2713 \u2713 - CocoaPods \u2713 \u2713 - <p>The following table provides an outline of the features Trivy offers.</p> Package manager File Transitive dependencies Dev dependencies Dependency graph Position Swift Package.resolved \u2713 Included - \u2713 CocoaPods Podfile.lock \u2713 Included \u2713 - <p>These may be enabled or disabled depending on the target. See here for the detail.</p>"},{"location":"docs/coverage/language/swift/#swift_1","title":"Swift","text":"<p>Trivy parses Package.resolved file to find dependencies. Don't forget to update (<code>swift package update</code> command) this file before scanning.</p>"},{"location":"docs/coverage/language/swift/#cocoapods","title":"CocoaPods","text":"<p>CocoaPods uses package names in <code>PodFile.lock</code>, but GitHub Advisory Database (GHSA) Trivy relies on uses Git URLs.  We parse the CocoaPods Specs to match package names and links.</p> <p>Limitation</p> <p>Since GHSA holds only Git URLs, such as github.com/apple/swift-nio,  Trivy can't identify affected submodules, and detect all submodules maintained by the same URL. For example, SwiftNIOHTTP1 and SwiftNIOWebSocket both are maintained under <code>github.com/apple/swift-nio</code>, and Trivy detect CVE-2022-3215 for both of them, even though only SwiftNIOHTTP1 is actually affected.</p>"},{"location":"docs/coverage/os/","title":"OS","text":""},{"location":"docs/coverage/os/#scanner","title":"Scanner","text":"<p>Trivy supports operating systems for </p> <ul> <li>SBOM</li> <li>Vulnerabilities</li> <li>Licenses</li> </ul>"},{"location":"docs/coverage/os/#supported-os","title":"Supported OS","text":"OS Supported Versions Package Managers Alpine Linux 2.2 - 2.7, 3.0 - 3.22, edge apk Wolfi Linux (n/a) apk Chainguard (n/a) apk MinimOS (n/a) apk Red Hat Enterprise Linux 6, 7, 8, 9 dnf/yum/rpm Red Hat Enterprise Linux 10 (SBOM only) dnf/yum/rpm CentOS<sup>1</sup> 6, 7, 8 dnf/yum/rpm AlmaLinux 8, 9, 10 dnf/yum/rpm Rocky Linux 8, 9 dnf/yum/rpm Oracle Linux 5, 6, 7, 8 dnf/yum/rpm Azure Linux (CBL-Mariner) 1.0, 2.0, 3.0 tdnf/dnf/yum/rpm Amazon Linux 1, 2, 2023 dnf/yum/rpm openSUSE Leap 42, 15 zypper/rpm openSUSE Tumbleweed (n/a) zypper/rpm SUSE Linux Enterprise 11, 12, 15 zypper/rpm SUSE Linux Enterprise Micro 5, 6 zypper/rpm Photon OS 1.0, 2.0, 3.0, 4.0 tndf/yum/rpm Echo (n/a) apt/dpkg Debian GNU/Linux 7, 8, 9, 10, 11, 12 apt/dpkg Ubuntu All versions supported by Canonical apt/dpkg Bottlerocket 1.7.0 and upper bottlerocket OSs with installed Conda - conda"},{"location":"docs/coverage/os/#supported-container-images","title":"Supported container images","text":"Container image Supported Versions Package Managers Google Distroless<sup>2</sup> Any apt/dpkg Bitnami Any - <p>Each page gives more details.</p> <ol> <li> <p>CentOS Stream is not supported\u00a0\u21a9</p> </li> <li> <p>https://github.com/GoogleContainerTools/distroless \u21a9</p> </li> </ol>"},{"location":"docs/coverage/os/alma/","title":"AlmaLinux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/alma/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/alma/#vulnerability","title":"Vulnerability","text":"<p>AlmaLinux offers its own security advisories, and these are utilized when scanning AlmaLinux for vulnerabilities.</p>"},{"location":"docs/coverage/os/alma/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/alma/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by AlmaLinux. For example, for CVE-2023-0464, the fixed version for AlmaLinux 9 is listed as <code>3.0.7-16.el9_2</code> in their advisory. Note that this is different from the upstream fixed version, which is <code>3.0.9</code>, <code>3.1.1</code>, and son on. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/alma/#severity","title":"Severity","text":"<p>Trivy calculates the severity of an issue based on the severity provided by AlmaLinux. If the severity is not provided or defined yet by AlmaLinux, the severity from the NVD is taken into account.</p> <p>Using CVE-2023-0464 as an example, while it is rated as \"High\" in NVD, AlmaLinux has marked as \"moderate\". As a result, Trivy will display it as \"Medium\".</p> <p>The table below is the mapping of AlmaLinux's severity to Trivy's severity levels.</p> AlmaLinux Trivy Low Low Moderate Medium Important High Critical Critical"},{"location":"docs/coverage/os/alma/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for AlmaLinux.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/alma/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/alpine/","title":"Alpine Linux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/alpine/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through <code>apk</code>.</p>"},{"location":"docs/coverage/os/alpine/#vulnerability","title":"Vulnerability","text":"<p>Alpine Linux offers its own security advisories, and these are utilized when scanning Alpine for vulnerabilities.</p>"},{"location":"docs/coverage/os/alpine/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/alpine/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by Alpine. For example, for CVE-2023-0464, the fixed version for Alpine Linux is listed as <code>3.1.0-r1</code> in the secfixes. Note that this is different from the upstream fixed version, which is <code>3.1.1</code>. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/alpine/#severity","title":"Severity","text":"<p>For Alpine vulnerabilities, the severity is determined using the values set by NVD.</p>"},{"location":"docs/coverage/os/alpine/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Alpine.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/alpine/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of APK packages.</p>"},{"location":"docs/coverage/os/amazon/","title":"Amazon Linux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/amazon/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/amazon/#vulnerability","title":"Vulnerability","text":"<p>Amazon Linux offers its own security advisories, and these are utilized when scanning Amazon Linux for vulnerabilities.</p>"},{"location":"docs/coverage/os/amazon/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/amazon/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by Amazon. For example, for CVE-2023-0464, the fixed version for Amazon Linux 2023 is listed as <code>3.0.8-1.amzn2023.0.2</code> in ALAS2023-2023-181. Note that this is different from the upstream fixed version, which is <code>3.0.9</code>, <code>3.1.1</code>, and so on. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/amazon/#severity","title":"Severity","text":"<p>Trivy determines vulnerability severity based on the severity metric provided by Amazon. For example, the security patch for CVE-2023-0464 in Amazon Linux 2023 is provided as ALAS2023-2023-181. Its severity is rated as \"Medium\". Thus, even though it's evaluated as \"HIGH\" in the NVD, Trivy displays it with a severity of \"MEDIUM\".</p> <p>The table below is the mapping of Amazon's severity to Trivy's severity levels.</p> Amazon Trivy Low Low Medium Medium Important High Critical Critical"},{"location":"docs/coverage/os/amazon/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Amazon Linux.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/amazon/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/azure/","title":"Azure Linux (CBL-Mariner)","text":"<p>CBL-Mariner was rebranded to Azure Linux for version 3.0 onwards.</p> <p>Trivy supports the following scanners for OS packages.</p> Version SBOM Vulnerability License 1.0 \u2714 \u2714 \u2714 1.0 (Distroless) \u2714 \u2714 2.0 \u2714 \u2714 \u2714 2.0 (Distroless) \u2714 \u2714 3.0 \u2714 \u2714 \u2714 3.0 (Distroless) \u2714 \u2714 <p>The following table provides an outline of the targets Trivy supports.</p> Version Container image Virtual machine Arch 1.0 \u2714 \u2714 amd64, arm64 2.0 \u2714 \u2714 amd64, arm64 3.0 \u2714 \u2714 amd64, arm64 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Detect unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/azure/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>tdnf</code>, <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/azure/#vulnerability","title":"Vulnerability","text":"<p>Azure Linux offers its own security advisories, and these are utilized when scanning Azure Linux for vulnerabilities.</p>"},{"location":"docs/coverage/os/azure/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/azure/#fixed-version","title":"Fixed Version","text":"<p>Trivy takes fixed versions from Azure Linux OVAL.</p>"},{"location":"docs/coverage/os/azure/#severity","title":"Severity","text":"<p>Trivy calculates the severity of an issue based on the severity provided in Azure Linux OVAL.</p>"},{"location":"docs/coverage/os/azure/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Azure Linux.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/azure/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p> <p>Note</p> <p>License detection is not supported for Azure Linux Distroless images.</p>"},{"location":"docs/coverage/os/bottlerocket/","title":"Bottlerocket","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability - License - <p>Please see here for supported versions.</p>"},{"location":"docs/coverage/os/bottlerocket/#sbom","title":"SBOM","text":"<p>Trivy detects packages that are listed in the software inventory.</p>"},{"location":"docs/coverage/os/centos/","title":"CentOS","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/centos/#sbom","title":"SBOM","text":"<p>Same as RHEL.</p>"},{"location":"docs/coverage/os/centos/#vulnerability","title":"Vulnerability","text":"<p>CentOS does not provide straightforward machine-readable security advisories. As a result, Trivy utilizes the security advisories from Red Hat Enterprise Linux (RHEL) for detecting vulnerabilities in CentOS. This approach might lead to situations where, even though Trivy displays a fixed version, CentOS might not have the patch available yet. Since patches released for RHEL often become available in CentOS after some time, it's usually just a matter of waiting.</p> <p>Note</p> <p>The case for CentOS Stream, which is not supported by Trivy, is entirely different from CentOS.</p> <p>As Trivy relies on Red Hat's advisories, please refer to Red Hat for details regarding vulnerability severity and status.</p>"},{"location":"docs/coverage/os/centos/#license","title":"License","text":"<p>Same as RHEL.</p>"},{"location":"docs/coverage/os/chainguard/","title":"Chainguard","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Detect unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/chainguard/#sbom","title":"SBOM","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/os/chainguard/#vulnerability","title":"Vulnerability","text":"<p>Chainguard offers its own security advisories, and these are utilized when scanning Chainguard for vulnerabilities. Everything else is the same as Alpine Linux.</p>"},{"location":"docs/coverage/os/chainguard/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/chainguard/#license","title":"License","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/os/debian/","title":"Debian","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/debian/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>apt</code> and <code>dpkg</code>. While there are some exceptions, like Go binaries and JAR files, it's important to note that binaries that have been custom-built using <code>make</code> or tools installed via <code>curl</code> are generally not detected.</p>"},{"location":"docs/coverage/os/debian/#vulnerability","title":"Vulnerability","text":"<p>Debian offers its own security advisories, and these are utilized when scanning Debian for vulnerabilities.</p>"},{"location":"docs/coverage/os/debian/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/debian/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by Debian. For example, for CVE-2023-3269, the fixed version for Debian 12 (bookworm) is listed as <code>6.1.37-1</code> in the Security Tracker. This patch is provided in DSA-5448-1. Note that this is different from the upstream fixed version, which is <code>6.5</code>. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/debian/#severity","title":"Severity","text":"<p>Trivy calculates the severity of an issue based on the 'Urgency' metric found in the Security Tracker. If 'Urgency' isn't provided by Debian, the severity from the NVD is taken into account.</p> <p>Using CVE-2019-15052 as an example, while it is rated as \"Critical\" in NVD, Debian has marked its \"Urgency\" as \"Low\". As a result, Trivy will display it as \"Low\".</p>"},{"location":"docs/coverage/os/debian/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Debian.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred \u2713 End of Life \u2713"},{"location":"docs/coverage/os/debian/#license","title":"License","text":"<p>To identify the license of a package, Trivy checks the copyright file located at <code>/usr/share/doc/*/copyright</code>.</p> <p>However, this method has its limitations as the file isn't machine-readable, leading to situations where the license isn't detected. In such scenarios, the <code>--license-full</code> flag can be passed. It compares the contents of known licenses with the copyright file to discern the license in question. Please be aware that using this flag can increase memory usage, so it's disabled by default for efficiency.</p>"},{"location":"docs/coverage/os/echo/","title":"Echo","text":"<p>Trivy supports these scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/echo/#sbom","title":"SBOM","text":"<p>Same as Debian.</p>"},{"location":"docs/coverage/os/echo/#vulnerability","title":"Vulnerability","text":"<p>Echo offers its own security advisories, and these are utilized when scanning Echo for vulnerabilities.</p>"},{"location":"docs/coverage/os/echo/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/echo/#license","title":"License","text":"<p>Same as Debian.</p>"},{"location":"docs/coverage/os/google-distroless/","title":"Google Distroless Images","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/google-distroless/#sbom","title":"SBOM","text":"<p>Trivy detects packages pre-installed in distroless images.</p>"},{"location":"docs/coverage/os/google-distroless/#vulnerability","title":"Vulnerability","text":"<p>Google Distroless is based on Debian; see there for details.</p>"},{"location":"docs/coverage/os/google-distroless/#license","title":"License","text":"<p>Google Distroless is based on Debian; see there for details.</p>"},{"location":"docs/coverage/os/minimos/","title":"MinimOS","text":"<p>Trivy supports these scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Detect unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/minimos/#sbom","title":"SBOM","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/os/minimos/#vulnerability","title":"Vulnerability","text":"<p>MinimOS offers its own security advisories, and these are utilized when scanning MinimOS for vulnerabilities. Everything else is the same as Alpine Linux.</p>"},{"location":"docs/coverage/os/minimos/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/minimos/#license","title":"License","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/os/oracle/","title":"Oracle Linux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/oracle/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/oracle/#vulnerability","title":"Vulnerability","text":"<p>Oracle Linux offers its own security advisories, and these are utilized when scanning Oracle Linux for vulnerabilities.</p>"},{"location":"docs/coverage/os/oracle/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/oracle/#fixed-version","title":"Fixed Version","text":"<p>Trivy takes fixed versions from Oracle security advisories.</p>"},{"location":"docs/coverage/os/oracle/#flavors","title":"Flavors","text":"<p>Trivy detects the flavor for version of the found package and finds vulnerabilities only for that flavor.</p> Flavor Format Example normal version without <code>fips</code> and <code>ksplice</code> 3.6.16-4.el8 fips <code>*_fips</code> 10:3.6.16-4.0.1.el8_fips ksplice <code>*.ksplice*.*</code> 2:2.34-60.0.3.ksplice1.el9_2.7, 151.0.1.ksplice2.el8 <p>For example Trivy finds CVE-2021-33560 only for the <code>normal</code> and <code>fips</code> flavors.  For the <code>ksplice</code> flavor, CVE-2021-33560 will be skipped.</p>"},{"location":"docs/coverage/os/oracle/#severity","title":"Severity","text":"<p>Trivy determines vulnerability severity based on the severity metric provided in Oracle security advisories. For example, the security patch for CVE-2023-0464 is provided as ELSA-2023-2645. Its severity is rated as \"MODERATE\". Thus, even though it's evaluated as \"HIGH\" in the NVD, Trivy displays it with a severity of \"MEDIUM\".</p> <p>The table below is the mapping of Oracle's threat to Trivy's severity levels.</p> Oracle Trivy Low Low Moderate Medium Important High Critical Critical"},{"location":"docs/coverage/os/oracle/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Oracle Linux.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/oracle/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/photon/","title":"Photon OS","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/photon/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>tdnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/photon/#vulnerability","title":"Vulnerability","text":"<p>Photon OS offers its own security advisories, and these are utilized when scanning Photon OS for vulnerabilities.</p>"},{"location":"docs/coverage/os/photon/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/photon/#fixed-version","title":"Fixed Version","text":"<p>Trivy takes fixed versions from Photon CVE metadata.</p>"},{"location":"docs/coverage/os/photon/#severity","title":"Severity","text":"<p>Trivy determines the severity of vulnerabilities based on the CVSSv3 score provided by Photon OS. See here for the conversion table from CVSS score to severity.</p>"},{"location":"docs/coverage/os/photon/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Photon OS.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/photon/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/rhel/","title":"Red Hat Enterprise Linux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/rhel/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/rhel/#vulnerability","title":"Vulnerability","text":"<p>Red Hat offers its own security advisories, and these are utilized when scanning Red Hat Enterprise Linux (RHEL) for vulnerabilities.</p>"},{"location":"docs/coverage/os/rhel/#content-manifests","title":"Content manifests","text":"<p>Red Hat\u2019s security advisories use CPEs to identify product sets. For example, even packages installed in the same container image can have different CPEs.  For this reason, Red Hat\u2019s container images include stored content manifests, which we convert to CPEs, and perform vulnerability scanning.</p> <p>Since this system ties each content manifest to its packages on a per-layer basis,  if layers get merged (for instance, by using <code>docker run</code> or <code>docker export</code>) we can no longer determine the correct CPE, which may lead to false detection.</p>"},{"location":"docs/coverage/os/rhel/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/rhel/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by Red Hat. For example, for CVE-2023-0464, the fixed version for RHEL 9 is listed as <code>3.0.7-16.el9_2</code> in their advisory. This patch is provided in RHSA-2023:3722. Note that this is different from the upstream fixed version, which is <code>3.0.9</code>, <code>3.1.1</code>, and so on. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/rhel/#severity","title":"Severity","text":"<p>Trivy calculates the severity of a vulnerability based on the 'Impact' metric provided by Red Hat. If the impact is not provided or defined yet by Red Hat, the severity from the NVD is taken into account.</p> <p>Using CVE-2023-0464 as an example, while it is rated as \"HIGH\" in NVD, Red Hat has marked its 'Impact' as \"Low\". As a result, Trivy will display it as \"Low\".</p> <p>The table below is the mapping of Red Hat's impact to Trivy's severity levels.</p> Red Hat Trivy Low Low Moderate Medium Important High Critical Critical"},{"location":"docs/coverage/os/rhel/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for RHEL.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation \u2713 Will Not Fix \u2713 Fix Deferred \u2713 End of Life \u2713 <p>When a vulnerability status is listed as \"End of Life\", it means a vulnerability with the impact level assigned to this CVE is no longer covered by its current support lifecycle phase. The product has been identified to contain the impacted component, but analysis to determine whether it is affected or not by this vulnerability was not performed. Red Hat advises that the product should be assumed to be affected. Therefore, Trivy detects vulnerabilities with this status as \"End of Life\".</p> <p>On the other hand, for those marked \"Under Investigation,\" the impact is unclear as they are still being examined, so Trivy does not detect them. Once the investigation is completed, the status should be updated.</p> <p>Abstract</p> <p>Vulnerabilities with a status of \"End of Life\", where the presence or absence of impact is unclear, are detected by Trivy. However, those with a status of \"Under Investigation\" are not detected.</p>"},{"location":"docs/coverage/os/rhel/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/rocky/","title":"Rocky Linux","text":"<p>Trivy supports the following scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/rocky/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/rocky/#vulnerability","title":"Vulnerability","text":"<p>Rocky Linux offers its own security advisories, and these are utilized when scanning Rocky Linux for vulnerabilities.</p>"},{"location":"docs/coverage/os/rocky/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/rocky/#fixed-version","title":"Fixed Version","text":"<p>Trivy takes fixed versions from Rocky Linux Errata, not NVD or somewhere else. See here for more details.</p> <p>Architectures</p> <p>There are cases when the vulnerability affects packages of not all architectures. For example, vulnerable packages for CVE-2023-0361 are only <code>aarch64</code> packages.</p> <p>Trivy only detects vulnerabilities for packages of your architecture.</p>"},{"location":"docs/coverage/os/rocky/#severity","title":"Severity","text":"<p>Trivy calculates the severity of an issue based on the severity provided in Rocky Linux Errata.</p> <p>The table below is the mapping of Rocky Linux's severity to Trivy's severity levels.</p> Rocky Linux Trivy Low Low Moderate Medium Important High Critical Critical"},{"location":"docs/coverage/os/rocky/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Rocky Linux.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/rocky/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/suse/","title":"SUSE","text":"<p>Trivy supports the following distributions:</p> <ul> <li>openSUSE Leap</li> <li>openSUSE Tumbleweed</li> <li>SUSE Linux Enterprise (SLE)</li> <li>SUSE Linux Enterprise Micro</li> </ul> <p>Please see here for supported versions.</p> <p>Trivy supports these scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/suse/#sbom","title":"SBOM","text":"<p>Trivy detects packages that have been installed through package managers such as <code>dnf</code> and <code>yum</code>.</p>"},{"location":"docs/coverage/os/suse/#vulnerability","title":"Vulnerability","text":"<p>SUSE offers its own security advisories, and these are utilized when scanning openSUSE/SLE for vulnerabilities.</p>"},{"location":"docs/coverage/os/suse/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/suse/#license","title":"License","text":"<p>Trivy identifies licenses by examining the metadata of RPM packages.</p>"},{"location":"docs/coverage/os/ubuntu/","title":"Ubuntu","text":"<p>Trivy supports these scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>Please see here for supported versions.</p> <p>The following table provides an outline of the features Trivy offers.</p> Feature Supported Detect unfixed vulnerabilities \u2713 Dependency graph \u2713"},{"location":"docs/coverage/os/ubuntu/#sbom","title":"SBOM","text":"<p>Same as Debian.</p>"},{"location":"docs/coverage/os/ubuntu/#vulnerability","title":"Vulnerability","text":"<p>Ubuntu offers its own security advisories, and these are utilized when scanning Ubuntu for vulnerabilities.</p>"},{"location":"docs/coverage/os/ubuntu/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/ubuntu/#fixed-version","title":"Fixed Version","text":"<p>When looking at fixed versions, it's crucial to consider the patches supplied by Ubuntu. As an illustration, for CVE-2023-3269, the fixed version for Ubuntu 23.04 (lunar) is listed as <code>6.2.0-26.26</code> in the Security Tracker. It's essential to recognize that this differs from the upstream fixed version, which stands at <code>6.5</code>. Typically, only the upstream information gets listed on NVD, so it's important not to get confused.</p>"},{"location":"docs/coverage/os/ubuntu/#severity","title":"Severity","text":"<p>Trivy calculates the severity of an issue based on the 'Priority' metric found in the Security Tracker. If 'Priority' isn't provided by Ubuntu, the severity from the NVD is taken into account.</p> <p>Using CVE-2019-15052 as an example, while it is rated as \"Critical\" in NVD, Ubuntu has marked its \"Priority\" as \"Medium\". As a result, Trivy will display it as \"Medium\".</p>"},{"location":"docs/coverage/os/ubuntu/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Ubuntu.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/os/ubuntu/#license","title":"License","text":"<p>Same as Debian.</p>"},{"location":"docs/coverage/os/wolfi/","title":"Wolfi Linux","text":"<p>Trivy supports these scanners for OS packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Detect unfixed vulnerabilities - Dependency graph \u2713"},{"location":"docs/coverage/os/wolfi/#sbom","title":"SBOM","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/os/wolfi/#vulnerability","title":"Vulnerability","text":"<p>Wolfi Linux offers its own security advisories, and these are utilized when scanning Wolfi for vulnerabilities. Everything else is the same as Alpine Linux.</p>"},{"location":"docs/coverage/os/wolfi/#data-source","title":"Data Source","text":"<p>See here.</p>"},{"location":"docs/coverage/os/wolfi/#license","title":"License","text":"<p>Same as Alpine Linux.</p>"},{"location":"docs/coverage/others/","title":"Others","text":"<p>In this section we have placed images, package managers and files that we can't assign to existing sections.</p> <p>Trivy supports them for</p> <ul> <li>SBOM</li> <li>Vulnerabilities</li> <li>Licenses</li> </ul>"},{"location":"docs/coverage/others/#supported-elements","title":"Supported elements","text":"Element File Image<sup>1</sup> Rootfs<sup>2</sup> Filesystem<sup>3</sup> Repository<sup>4</sup> Bitnami packages <code>/opt/bitnami/&lt;component&gt;/.spdx-&lt;component&gt;.spdx</code> \u2705 \u2705 - - Conda <code>&lt;conda-root&gt;/envs/&lt;env&gt;/conda-meta/&lt;package&gt;.json</code> \u2705 \u2705 - - <code>environment.yml</code> - - \u2705 \u2705 Root.io images - \u2705 \u2705 - - RPM Archives <code>*.rpm</code> \u2705<sup>5</sup> \u2705<sup>5</sup> \u2705<sup>5</sup> \u2705<sup>5</sup> <ol> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the image scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the rootfs scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the filesystem scanning\u00a0\u21a9</p> </li> <li> <p>\u2705 means \"enabled\" and <code>-</code> means \"disabled\" in the git repository scanning\u00a0\u21a9</p> </li> <li> <p>Only if the <code>TRIVY_EXPERIMENTAL_RPM_ARCHIVE</code> env is set.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/coverage/others/bitnami/","title":"Bitnami Images","text":"<p>EXPERIMENTAL</p> <p>Scanning results may be inaccurate.</p> <p>While it is not an OS, this page describes the details of the container images provided by Bitnami. Bitnami images are based on Debian. Please see the Debian page for OS packages.</p> <p>Trivy supports the following scanners for Bitnami packages.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713 License \u2713 <p>The table below outlines the features offered by Trivy.</p> Feature Supported Unfixed vulnerabilities - Dependency graph -"},{"location":"docs/coverage/others/bitnami/#sbom","title":"SBOM","text":"<p>Trivy analyzes the SBOM information contained within the container images provided by Bitnami. The SBOM files are located at <code>/opt/bitnami/&lt;component&gt;/.spdx-&lt;component&gt;.spdx</code>.</p>"},{"location":"docs/coverage/others/bitnami/#vulnerability","title":"Vulnerability","text":"<p>Since Bitnami has its own vulnerability database, it uses these for vulnerability detection of applications and packages distributed by Bitnami.</p> <p>Note</p> <p>Trivy does not support vulnerability detection of independently compiled binaries, so even if you scan container images like <code>nginx:1.15.2</code>, vulnerabilities in Nginx cannot be detected. This is because main applications like Nginx are not installed by the package manager. However, in the case of Bitnami images, since these SBOMs are stored within the image, scanning <code>bitnami/nginx:1.15.2</code> allows for the detection of vulnerabilities in Nginx.</p>"},{"location":"docs/coverage/others/bitnami/#fixed-version","title":"Fixed Version","text":"<p>Trivy refers to the Bitnami database. Please note that these may differ from the upstream fixed versions.</p>"},{"location":"docs/coverage/others/bitnami/#severity","title":"Severity","text":"<p>Similar to Fixed versions, it follows Bitnami's vulnerability database.</p>"},{"location":"docs/coverage/others/bitnami/#status","title":"Status","text":"<p>Trivy supports the following vulnerability statuses for Bitnami packages.</p> Status Supported Fixed \u2713 Affected \u2713 Under Investigation Will Not Fix Fix Deferred End of Life"},{"location":"docs/coverage/others/bitnami/#license","title":"License","text":"<p>If licenses are included in the SBOM distributed by Bitnami, they will be used for scanning.</p>"},{"location":"docs/coverage/others/conda/","title":"Conda","text":"<p>Trivy supports the following scanners for Conda packages.</p> Scanner Supported SBOM \u2713 Vulnerability - License \u2713 Package manager File Transitive dependencies Dev dependencies Dependency graph Position Detection Priority Conda environment.yml - Include - \u2713 -"},{"location":"docs/coverage/others/conda/#packagejson","title":"<code>&lt;package&gt;.json</code>","text":""},{"location":"docs/coverage/others/conda/#sbom","title":"SBOM","text":"<p>Trivy parses <code>&lt;conda-root&gt;/envs/&lt;env&gt;/conda-meta/&lt;package&gt;.json</code> files to find the dependencies installed in your env.</p>"},{"location":"docs/coverage/others/conda/#license","title":"License","text":"<p>The <code>&lt;package&gt;.json</code> files contain package license information. Trivy includes licenses for the packages it finds without having to parse additional files.</p>"},{"location":"docs/coverage/others/conda/#environmentyml","title":"<code>environment.yml</code><sup>1</sup>","text":""},{"location":"docs/coverage/others/conda/#sbom_1","title":"SBOM","text":"<p>Trivy supports parsing environment.yml<sup>1</sup> files to find dependency list.</p> <p><code>environment.yml</code><sup>1</sup> files supports version range. We can't be sure about versions for these dependencies. Therefore, you need to use <code>conda env export</code> command to get dependency list in <code>Conda</code> default format before scanning <code>environment.yml</code><sup>1</sup> file.</p> <p>Note</p> <p>For dependencies in a non-Conda format, Trivy doesn't include a version of them.</p>"},{"location":"docs/coverage/others/conda/#license_1","title":"License","text":"<p>Trivy parses <code>conda-meta/&lt;package&gt;.json</code> files at the prefix path.</p> <p>To correctly define licenses, make sure your <code>environment.yml</code><sup>1</sup> contains <code>prefix</code> field and <code>prefix</code> directory contains <code>package.json</code> files.</p> <p>Note</p> <p>To get correct <code>environment.yml</code><sup>1</sup> file and fill <code>prefix</code> directory - use <code>conda env export</code> command.</p> <ol> <li> <p>Trivy supports both <code>yaml</code> and <code>yml</code> extensions.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/coverage/others/rootio/","title":"Root.io","text":"<p>EXPERIMENTAL</p> <p>Scanning results may be inaccurate.</p> <p>While it is not an OS, this page describes the details of Root.io patch distribution service. Root.io provides security patches for Debian, Ubuntu, and Alpine-based container images. Root.io patches are detected when Trivy finds packages with specific version suffixes:</p> <ul> <li>Debian/Ubuntu: packages with <code>.root.io</code> in version string</li> <li>Alpine: packages with <code>-r\\d007\\d</code> pattern in version string (e.g., <code>-r10071</code>, <code>-r20072</code>)</li> </ul> <p>When Root.io patches are detected, Trivy automatically switches to Root.io scanning mode for vulnerability detection. Even when the original OS distributor (Debian, Ubuntu, Alpine) has not provided a patch for a vulnerability, Trivy will display Root.io patches if they are available.</p> <p>Note</p> <p>For vulnerabilities, Trivy uses the severity level from the original OS vendor (if the vendor has specified a severity).</p> <p>For detailed information about supported scanners, features, and functionality, please refer to the documentation for the underlying OS:</p> <ul> <li>Debian</li> <li>Ubuntu </li> <li>Alpine</li> </ul>"},{"location":"docs/coverage/others/rpm/","title":"RPM Archives","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy supports the following scanners for RPM archives.</p> Scanner Supported SBOM \u2713 Vulnerability \u2713<sup>1</sup> License \u2713 <p>The table below outlines the features offered by Trivy.</p>"},{"location":"docs/coverage/others/rpm/#sbom","title":"SBOM","text":"<p>Trivy analyzes RPM archives matching <code>*.rpm</code>. This feature is currently disabled by default but can be enabled with an environment variable, <code>TRIVY_EXPERIMENTAL_RPM_ARCHIVE</code>.</p> <pre><code>TRIVY_EXPERIMENTAL_RPM_ARCHIVE=true trivy fs ./rpms --format cyclonedx --output rpms.cdx.json\n</code></pre> <p>Note</p> <p>Currently, it works with <code>--format cyclonedx</code>, <code>--format spdx</code> or <code>--format spdx-json</code>.</p>"},{"location":"docs/coverage/others/rpm/#vulnerability","title":"Vulnerability","text":"<p>Since RPM files don't have OS information, you need to generate SBOM, fill in the OS information manually and then scan the SBOM for vulnerabilities.</p> <p>For example:</p> <pre><code>$ TRIVY_EXPERIMENTAL_RPM_ARCHIVE=true trivy fs ./rpms -f cyclonedx -o rpms.cdx.json\n$ jq '(.components[] | select(.type == \"operating-system\")) |= (.name = \"redhat\" | .version = \"7.9\")' rpms.cdx.json &gt; rpms-res.cdx.json\n$ trivy sbom ./rpms-res.cdx.json\n</code></pre>"},{"location":"docs/coverage/others/rpm/#license","title":"License","text":"<p>If licenses are included in the RPM archive, Trivy extracts it.</p> <ol> <li> <p>Need to generate SBOM first and add OS information to that SBOM\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/plugin/","title":"Plugins","text":"<p>Trivy provides a plugin feature to allow others to extend the Trivy CLI without the need to change the Trivy code base. This plugin system was inspired by the plugin system used in kubectl, Helm, and Conftest.</p>"},{"location":"docs/plugin/#overview","title":"Overview","text":"<p>Trivy plugins are add-on tools that integrate seamlessly with Trivy. They provide a way to extend the core feature set of Trivy, but without requiring every new feature to be written in Go and added to the core tool.</p> <ul> <li>They can be added and removed from a Trivy installation without impacting the core Trivy tool.</li> <li>They can be written in any programming language.</li> <li>They integrate with Trivy, and will show up in Trivy help and subcommands.</li> </ul> <p>Warning</p> <p>Trivy plugins available in public are not audited for security. You should install and run third-party plugins at your own risk, since they are arbitrary programs running on your machine.</p>"},{"location":"docs/plugin/#quickstart","title":"Quickstart","text":"<p>Trivy helps you discover and install plugins on your machine.</p> <p>You can install and use a wide variety of Trivy plugins to enhance your experience.</p> <p>Let\u2019s get started:</p> <ol> <li> <p>Download the plugin list:</p> <pre><code>$ trivy plugin update\n</code></pre> </li> <li> <p>Discover Trivy plugins available on the plugin index:</p> <pre><code>$ trivy plugin search\nNAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT\naqua                 A plugin for integration with Aqua Security SaaS platform    aquasecurity\nkubectl              A plugin scanning the images of a kubernetes resource        aquasecurity\nreferrer             A plugin for OCI referrers                                   aquasecurity           \u2713\n[...]\n</code></pre> </li> <li> <p>Choose a plugin from the list and install it:</p> <pre><code>$ trivy plugin install referrer\n</code></pre> </li> <li> <p>Use the installed plugin:</p> <pre><code>$ trivy referrer --help\n</code></pre> </li> <li> <p>Keep your plugins up-to-date:</p> <pre><code>$ trivy plugin upgrade\n</code></pre> </li> <li> <p>Uninstall a plugin you no longer use:</p> <pre><code>trivy plugin uninstall referrer\n</code></pre> </li> </ol> <p>This is practically all you need to know to start using Trivy plugins.</p>"},{"location":"docs/plugin/developer-guide/","title":"Developer Guide","text":""},{"location":"docs/plugin/developer-guide/#developing-trivy-plugins","title":"Developing Trivy plugins","text":"<p>This section will guide you through the process of developing Trivy plugins. To help you get started quickly, we have published a plugin template repository. You can use this template as a starting point for your plugin development.</p>"},{"location":"docs/plugin/developer-guide/#introduction","title":"Introduction","text":"<p>If you are looking to start developing plugins for Trivy, read the user guide first.</p> <p>The development process involves the following steps:</p> <ul> <li>Create a repository for your plugin, named <code>trivy-plugin-&lt;name&gt;</code>.</li> <li>Create an executable binary that can be invoked as <code>trivy &lt;name&gt;</code>.</li> <li>Place the executable binary in a repository.</li> <li>Create a <code>plugin.yaml</code> file that describes the plugin.</li> <li>(Submit your plugin to the Trivy plugin index.)</li> </ul> <p>After you develop a plugin with a good name following the best practices and publish it, you can submit your plugin to the Trivy plugin index.</p>"},{"location":"docs/plugin/developer-guide/#naming","title":"Naming","text":"<p>This section describes guidelines for naming your plugins.</p>"},{"location":"docs/plugin/developer-guide/#use-trivy-plugin-prefix","title":"Use <code>trivy-plugin-</code> prefix","text":"<p>The name of the plugin repository should be prefixed with <code>trivy-plugin-</code>.</p>"},{"location":"docs/plugin/developer-guide/#use-lowercase-and-hyphens","title":"Use lowercase and hyphens","text":"<p>Plugin names must be all lowercase and separate words with hyphens. Don\u2019t use camelCase, PascalCase, or snake_case; use kebab-case.</p> <ul> <li>NO: <code>trivy OpenSvc</code></li> <li>YES: <code>trivy open-svc</code></li> </ul>"},{"location":"docs/plugin/developer-guide/#be-specific","title":"Be specific","text":"<p>Plugin names should not be verbs or nouns that are generic, already overloaded, or likely to be used for broader purposes by another plugin.</p> <ul> <li>NO: trivy sast (Too broad)</li> <li>YES: trivy govulncheck</li> </ul>"},{"location":"docs/plugin/developer-guide/#be-unique","title":"Be unique","text":"<p>Find a unique name for your plugin that differentiates it from other plugins that perform a similar function.</p> <ul> <li>NO: <code>trivy images</code> (Unclear how it is different from the builtin \u201cimage\" command)</li> <li>YES: <code>trivy registry-images</code> (Unique name).</li> </ul>"},{"location":"docs/plugin/developer-guide/#prefix-vendor-identifiers","title":"Prefix Vendor Identifiers","text":"<p>Use vendor-specific strings as prefix, separated with a dash. This makes it easier to search/group plugins that are about a specific vendor.</p> <ul> <li>NO: `trivy security-hub-aws (Makes it harder to search or locate in a plugin list)</li> <li>YES: `trivy aws-security-hub (Will show up together with other aws-* plugins)</li> </ul>"},{"location":"docs/plugin/developer-guide/#choosing-a-language","title":"Choosing a language","text":"<p>Since Trivy plugins are standalone executables, you can write them in any programming language.</p> <p>If you are planning to write a plugin with Go, check out the Report struct, which is the output of Trivy scan.</p>"},{"location":"docs/plugin/developer-guide/#writing-your-plugin","title":"Writing your plugin","text":"<p>Each plugin has a top-level directory, and then a <code>plugin.yaml</code> file.</p> <pre><code>your-plugin/\n  |\n  |- plugin.yaml\n  |- your-plugin.sh\n</code></pre> <p>In the example above, the plugin is contained inside a directory named <code>your-plugin</code>. It has two files: <code>plugin.yaml</code> (required) and an executable script, <code>your-plugin.sh</code> (optional).</p>"},{"location":"docs/plugin/developer-guide/#writing-a-plugin-manifest","title":"Writing a plugin manifest","text":"<p>The plugin manifest is a simple YAML file named <code>plugin.yaml</code>. Here is an example YAML of trivy-plugin-kubectl plugin that adds support for Kubernetes scanning.</p> <pre><code>name: \"kubectl\"\nversion: \"0.1.0\"\nrepository: github.com/aquasecurity/trivy-plugin-kubectl\nmaintainer: aquasecurity\noutput: false\nsummary: Scan kubectl resources\ndescription: |-\n  A Trivy plugin that scans the images of a kubernetes resource.\n  Usage: trivy kubectl TYPE[.VERSION][.GROUP] NAME\nplatforms:\n  - selector: # optional\n      os: darwin\n      arch: amd64\n    uri: ./trivy-kubectl # where the execution file is (local file, http, git, etc.)\n    bin: ./trivy-kubectl # path to the execution file\n  - selector: # optional\n      os: linux\n      arch: amd64\n    uri: https://github.com/aquasecurity/trivy-plugin-kubectl/releases/download/v0.1.0/trivy-kubectl.tar.gz\n    bin: ./trivy-kubectl\n</code></pre> <p>We encourage you to copy and adapt plugin manifests of existing plugins.</p> <ul> <li>count</li> <li>referrer</li> </ul> <p>The <code>plugin.yaml</code> field should contain the following information:</p> <ul> <li>name: The name of the plugin. This also determines how the plugin will be made available in the Trivy CLI. For example, if the plugin is named kubectl, you can call the plugin with <code>trivy kubectl</code>. (required)</li> <li>version: The version of the plugin. Semantic Versioning should be used. (required)</li> <li>repository: The repository name where the plugin is hosted. (required)</li> <li>maintainer: The name of the maintainer of the plugin. (required)</li> <li>output: Whether the plugin supports the output mode. (optional)</li> <li>usage: Deprecated: use summary instead. (optional)</li> <li>summary: A short usage description. (required)</li> <li>description: A long description of the plugin. This is where you could provide a helpful documentation of your plugin. (required)</li> <li>platforms: (required)<ul> <li>selector: The OS/Architecture specific variations of a execution file. (optional)<ul> <li>os: OS information based on GOOS (linux, darwin, etc.) (optional)</li> <li>arch: The architecture information based on GOARCH (amd64, arm64, etc.) (optional)</li> </ul> </li> <li>uri: Where the executable file is. Relative path from the root directory of the plugin or remote URL such as HTTP and S3. (required)</li> <li>bin: Which file to call when the plugin is executed. Relative path from the root directory of the plugin. (required)</li> </ul> </li> </ul> <p>The following rules will apply in deciding which platform to select:</p> <ul> <li>If both <code>os</code> and <code>arch</code> under <code>selector</code> match the current platform, search will stop and the platform will be used.</li> <li>If <code>selector</code> is not present, the platform will be used.</li> <li>If <code>os</code> matches and there is no more specific <code>arch</code> match, the platform will be used.</li> <li>If no <code>platform</code> match is found, Trivy will exit with an error.</li> </ul> <p>After determining platform, Trivy will download the execution file from <code>uri</code> and store it in the plugin cache. When the plugin is called via Trivy CLI, <code>bin</code> command will be executed.</p>"},{"location":"docs/plugin/developer-guide/#tagging-plugin-repositories","title":"Tagging plugin repositories","text":"<p>If you are hosting your plugin in a Git repository, it is strongly recommended to tag your releases with a version number. By tagging your releases, Trivy can install specific versions of your plugin.</p> <pre><code>$ trivy plugin install referrer@v0.3.0\n</code></pre> <p>When tagging versions, you must follow the Semantic Versioning and prefix the tag with <code>v</code>, like <code>v1.2.3</code>.</p>"},{"location":"docs/plugin/developer-guide/#plugin-argumentsflags","title":"Plugin arguments/flags","text":"<p>The plugin is responsible for handling flags and arguments. Any arguments are passed to the plugin from the <code>trivy</code> command.</p>"},{"location":"docs/plugin/developer-guide/#testing-plugin-installation-locally","title":"Testing plugin installation locally","text":"<p>A plugin should be archived <code>*.tar.gz</code>. After you have archived your plugin into a <code>.tar.gz</code> file, you can verify that your plugin installs correctly with Trivy.</p> <pre><code>$ tar -czvf myplugin.tar.gz plugin.yaml script.py\nplugin.yaml\nscript.py\n\n$ trivy plugin install myplugin.tar.gz\n2023-03-03T19:04:42.026+0600    INFO    Installing the plugin from myplugin.tar.gz...\n2023-03-03T19:04:42.026+0600    INFO    Loading the plugin metadata...\n\n$ trivy myplugin\nHello from Trivy demo plugin!\n</code></pre>"},{"location":"docs/plugin/developer-guide/#publishing-plugins","title":"Publishing plugins","text":"<p>The plugin.yaml file is the core of your plugin, so as long as it is published somewhere, your plugin can be installed. If you choose to publish your plugin on GitHub, you can make it installable by placing the plugin.yaml file in the root directory of your repository. Users can then install your plugin with the command, <code>trivy plugin install github.com/org/repo</code>.</p> <p>While the <code>uri</code> specified in the plugin.yaml file doesn't necessarily need to point to the same repository, it's a good practice to host the executable file within the same repository when using GitHub. You can utilize GitHub Releases to distribute the executable file. For an example of how to structure your plugin repository, refer to the plugin template repository.</p>"},{"location":"docs/plugin/developer-guide/#distributing-plugins-via-the-trivy-plugin-index","title":"Distributing plugins via the Trivy plugin index","text":"<p>Trivy can install plugins directly by specifying a repository, like <code>trivy plugin install github.com/aquasecurity/trivy-plugin-referrer</code>, so you don't necessarily need to register your plugin in the Trivy plugin index. However, we would recommend distributing your plugin via the Trivy plugin index since it makes it easier for other users to find (<code>trivy plugin search</code>) and install your plugin (e.g. <code>trivy plugin install kubectl</code>).</p>"},{"location":"docs/plugin/developer-guide/#pre-submit-checklist","title":"Pre-submit checklist","text":"<ul> <li>Review the plugin naming guide.</li> <li>Ensure the <code>plugin.yaml</code> file has all the required fields.</li> <li>Tag a git release with a semantic version (e.g. v1.0.0).</li> <li>Test your plugin installation locally.</li> </ul>"},{"location":"docs/plugin/developer-guide/#submitting-plugins","title":"Submitting plugins","text":"<p>Submitting your plugin to the plugin index is a straightforward process. All you need to do is create a YAML file for your plugin and place it in the plugins/ directory of the index repository.</p> <p>Once you've done that, create a pull request (PR) and have it reviewed by the maintainers. Once your PR is merged, the index will be updated, and your plugin will be available for installation. The plugin index page will also be automatically updated to list your newly added plugin.</p> <p>The content of the YAML file is very simple. You only need to specify the name of your plugin and the repository where it is distributed.</p> <pre><code>name: referrer\nrepository: github.com/aquasecurity/trivy-plugin-referrer\n</code></pre> <p>After your PR is merged, the CI system will automatically retrieve the <code>plugin.yaml</code> file from your repository and update the index.yaml file. If any required fields are missing from your <code>plugin.yaml</code>, the CI will fail, so make sure your <code>plugin.yaml</code> has all the required fields before creating a PR. Once the index.yaml has been updated, running <code>trivy plugin update</code> will download the updated index to your local machine.</p>"},{"location":"docs/plugin/user-guide/","title":"User Guide","text":""},{"location":"docs/plugin/user-guide/#discovering-plugins","title":"Discovering Plugins","text":"<p>You can find a list of Trivy plugins distributed via trivy-plugin-index here. However, you can find plugins using the command line as well.</p> <p>First, refresh your local copy of the plugin index:</p> <pre><code>$ trivy plugin update\n</code></pre> <p>To list all plugins available, run:</p> <pre><code>$ trivy plugin search\nNAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT\naqua                 A plugin for integration with Aqua Security SaaS platform    aquasecurity\nkubectl              A plugin scanning the images of a kubernetes resource        aquasecurity\nreferrer             A plugin for OCI referrers                                   aquasecurity           \u2713\n</code></pre> <p>You can specify search keywords as arguments:</p> <pre><code>$ trivy plugin search referrer\n\nNAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT\nreferrer             A plugin for OCI referrers                                   aquasecurity           \u2713\n</code></pre> <p>It lists plugins with the keyword in the name or description.</p>"},{"location":"docs/plugin/user-guide/#installing-plugins","title":"Installing  Plugins","text":"<p>Plugins can be installed with the <code>trivy plugin install</code> command:</p> <pre><code>$ trivy plugin install referrer\n</code></pre> <p>This command will download the plugin and install it in the plugin cache.</p> <p>Trivy adheres to the XDG specification, so the location depends on whether XDG_DATA_HOME is set. Trivy will now search XDG_DATA_HOME for the location of the Trivy plugins cache. The preference order is as follows:</p> <ul> <li>XDG_DATA_HOME if set and .trivy/plugins exists within the XDG_DATA_HOME dir</li> <li>~/.trivy/plugins</li> </ul> <p>Furthermore, it is possible to download plugins that are not registered in the index by specifying the URL directly or by specifying the file path.</p> <p><pre><code>$ trivy plugin install github.com/aquasecurity/trivy-plugin-kubectl\n</code></pre> <pre><code>$ trivy plugin install https://github.com/aquasecurity/trivy-plugin-kubectl/archive/refs/heads/main.zip\n</code></pre> <pre><code>$ trivy plugin install ./myplugin.tar.gz\n</code></pre></p> <p>If the plugin's Git repository is properly tagged, you can specify the version to install like this:</p> <pre><code>$ trivy plugin install referrer@v0.3.0\n</code></pre> <p>Note</p> <p>The leading <code>v</code> in the version is required. Also, the version must follow the Semantic Versioning.</p> <p>Under the hood Trivy leverages go-getter to download plugins. This means the following protocols are supported for downloading plugins:</p> <ul> <li>OCI Registries</li> <li>Local Files</li> <li>Git</li> <li>HTTP/HTTPS</li> <li>Mercurial</li> <li>Amazon S3</li> <li>Google Cloud Storage</li> </ul>"},{"location":"docs/plugin/user-guide/#listing-installed-plugins","title":"Listing Installed Plugins","text":"<p>To list all plugins installed, run:</p> <pre><code>$ trivy plugin list\n</code></pre>"},{"location":"docs/plugin/user-guide/#using-plugins","title":"Using Plugins","text":"<p>Once the plugin is installed, Trivy will load all available plugins in the cache on the start of the next Trivy execution. A plugin will be made in the Trivy CLI based on the plugin name. To display all plugins, you can list them by <code>trivy --help</code></p> <pre><code>$ trivy --help\nNAME:\n   trivy - A simple and comprehensive vulnerability scanner for containers\n\nUSAGE:\n   trivy [global options] command [command options] target\n\nVERSION:\n   dev\n\nScanning Commands\n  config      Scan config files for misconfigurations\n  filesystem  Scan local filesystem\n  image       Scan a container image\n\n...\n\nPlugin Commands\n  kubectl     scan kubectl resources\n  referrer    Put referrers to OCI registry\n</code></pre> <p>As shown above, <code>kubectl</code> subcommand exists in the <code>Plugin Commands</code> section. To call the kubectl plugin and scan existing Kubernetes deployments, you can execute the following command:</p> <pre><code>$ trivy kubectl deployment &lt;deployment-id&gt; -- --ignore-unfixed --severity CRITICAL\n</code></pre> <p>Internally the kubectl plugin calls the kubectl binary to fetch information about that deployment and passes the using images to Trivy. You can see the detail here.</p> <p>If you want to omit even the subcommand, you can use <code>TRIVY_RUN_AS_PLUGIN</code> environment variable.</p> <pre><code>$ TRIVY_RUN_AS_PLUGIN=kubectl trivy job your-job -- --format json\n</code></pre>"},{"location":"docs/plugin/user-guide/#installing-and-running-plugins-on-the-fly","title":"Installing and Running Plugins on the fly","text":"<p><code>trivy plugin run</code> installs a plugin and runs it on the fly. If the plugin is already present in the cache, the installation is skipped.</p> <pre><code>trivy plugin run kubectl pod your-pod -- --exit-code 1\n</code></pre>"},{"location":"docs/plugin/user-guide/#upgrading-plugins","title":"Upgrading Plugins","text":"<p>To upgrade all plugins that you have installed to their latest versions, run:</p> <pre><code>$ trivy plugin upgrade\n</code></pre> <p>To upgrade only certain plugins, you can explicitly specify their names:</p> <pre><code>$ trivy plugin upgrade &lt;PLUGIN1&gt; &lt;PLUGIN2&gt;\n</code></pre>"},{"location":"docs/plugin/user-guide/#uninstalling-plugins","title":"Uninstalling Plugins","text":"<p>Specify a plugin name with <code>trivy plugin uninstall</code> command.</p> <pre><code>$ trivy plugin uninstall kubectl\n</code></pre> <p>Here's the revised English documentation based on your requested changes:</p>"},{"location":"docs/plugin/user-guide/#output-mode-support","title":"Output Mode Support","text":"<p>While plugins are typically intended to be used as subcommands of Trivy, plugins supporting the output mode can be invoked as part of Trivy's built-in commands.</p> <p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy supports plugins that are compatible with the output mode, which process Trivy's output, such as by transforming the output format or sending it elsewhere. You can determine whether a plugin supports the output mode by checking the <code>OUTPUT</code> column in the output of <code>trivy plugin search</code> or <code>trivy plugin list</code>.</p> <pre><code>$ trivy plugin search\nNAME                 DESCRIPTION                                                  MAINTAINER           OUTPUT\naqua                 A plugin for integration with Aqua Security SaaS platform    aquasecurity\nkubectl              A plugin scanning the images of a kubernetes resource        aquasecurity\nreferrer             A plugin for OCI referrers                                   aquasecurity           \u2713\n</code></pre> <p>In this case, the <code>referrer</code> plugin supports the output mode.</p> <p>For instance, in the case of image scanning, a plugin supporting the output mode can be called as follows:</p> <pre><code>$ trivy image --format json --output plugin=&lt;plugin_name&gt; [--output-plugin-arg &lt;plugin_flags&gt;] &lt;image_name&gt;\n</code></pre> <p>Since scan results are passed to the plugin via standard input, plugins must be capable of handling standard input.</p> <p>Warning</p> <p>To avoid Trivy hanging, you need to read all data from <code>Stdin</code> before the plugin exits successfully or stops with an error.</p> <p>While the example passes JSON to the plugin, other formats like SBOM can also be passed (e.g., <code>--format cyclonedx</code>).</p> <p>If a plugin requires flags or other arguments, they can be passed using <code>--output-plugin-arg</code>. This is directly forwarded as arguments to the plugin. For example, <code>--output plugin=myplugin --output-plugin-arg \"--foo --bar=baz\"</code> translates to <code>myplugin --foo --bar=baz</code> in execution.</p> <p>An example of a plugin supporting the output mode is available here. It can be used as below:</p> <pre><code># Install the plugin first\n$ trivy plugin install count\n\n# Call the plugin supporting the output mode in image scanning\n$ trivy image --format json --output plugin=count --output-plugin-arg \"--published-after 2023-10-01\" debian:12\n</code></pre>"},{"location":"docs/plugin/user-guide/#example","title":"Example","text":"<ul> <li>kubectl</li> <li>count</li> </ul>"},{"location":"docs/references/abbreviations/","title":"Abbreviation List","text":"<p>This list compiles words that frequently appear in CLI flags or configuration files and are commonly abbreviated in industry and OSS communities. Trivy may use the abbreviation in place of the full spelling for flag names. It is also acceptable to add even shorter aliases if needed.</p> <p>Words not included in this list should be spelled out in full when used in flags.</p> <p>This list is intentionally limited to the most common and widely recognized abbreviations. Excessive use of abbreviations in CLI flags can hinder initial user understanding and create a steeper learning curve.</p> <p>Note</p> <p>This list serves as a guideline rather than a strict requirement. Its purpose is to maintain consistency across the project when naming flags and configuration options. While we strive to follow these abbreviations, there may be exceptions where context or clarity demands a different approach.</p>"},{"location":"docs/references/abbreviations/#scope","title":"Scope","text":"<p>This list focuses on abbreviations of single words commonly used in technical contexts. It does not include:</p> <ol> <li>Acronyms formed from the initial letters of multiple words (e.g., OS for Operating System, HTTP for Hypertext Transfer Protocol)</li> <li>Domain-specific terminology that already has standardized short forms</li> <li>Brand names or product-specific abbreviations</li> </ol> <p>The abbreviations listed here are primarily intended for CLI flags, configuration keys, and similar technical interfaces where brevity is valued while maintaining clarity.</p>"},{"location":"docs/references/abbreviations/#example","title":"Example","text":"<p>For a flag containing multiple words, only abbreviate words that appear in this list. For instance, in <code>--database-repository</code>, \"database\" is in the list so it should be abbreviated to \"db\", but \"repository\" is not in the list so it must be spelled out completely. The correct flag name would be <code>--db-repository</code>. It's acceptable to add a shorter alias like <code>--db-repo</code> if desired.</p>"},{"location":"docs/references/abbreviations/#list","title":"List","text":"Full Name Default Abbreviation Examples application app <code>--app-name</code>, <code>--app-mode</code> authentication auth <code>--auth-method</code>, <code>--auth-token</code> authorization authz <code>--authz-rule</code>, <code>--authz-policy</code> command cmd <code>--cmd-option</code>, <code>--cmd-args</code> configuration config <code>--config</code>, <code>--config-dir</code> database db <code>--db-repository</code>, <code>--db-user</code>, <code>--db-pass</code> development dev <code>--dev-dependencies</code>, <code>--dev-mode</code> directory dir <code>--dir-path</code>, <code>--output-dir</code> environment env <code>--env-file</code>, <code>--env-vars</code> information info <code>--info-level</code>, <code>--show-info</code> initialization init <code>--init-script</code>, <code>--init-config</code> library lib <code>--lib-path</code>, <code>--lib-dir</code> maximum max <code>--max-image-size</code>, <code>--max-depth</code> minimum min <code>--min-value</code>, <code>--min-severity</code> misconfiguration misconfig <code>--misconfig-scanners</code> package pkg <code>--pkg-types</code> production prod <code>--prod-env</code>, <code>--prod-deploy</code> specification spec <code>--spec-file</code>, <code>--spec-version</code> temporary tmp <code>--tmp-dir</code>, <code>--tmp-file</code> utility util <code>--util-script</code>, <code>--util-name</code> vulnerability vuln <code>--vuln-scan</code>, <code>--vuln-report</code>"},{"location":"docs/references/terminology/","title":"Terminology","text":"<p>This page explains the terminology system used in Trivy, helping users understand the specific terms and concepts unique to the Trivy ecosystem.</p> <p>Inclusion Criteria</p> <ol> <li> <p>Core Components of Trivy</p> <ul> <li>Primary features such as Scanner, Target</li> <li>Essential components such as Scan Assets (trivy-db, trivy-java-db)</li> <li>Components that users directly interact with</li> </ul> </li> <li> <p>Trivy-specific Terms</p> <ul> <li>Terms unique to Trivy (e.g., VEX Hub)</li> <li>Terms that have special meaning in Trivy's context (e.g., Plugin, Module)</li> </ul> </li> </ol> <p>Exclusion Criteria</p> <ol> <li> <p>General Terms</p> <ul> <li>Common security/technical terms (e.g., CVE, CVSS, Container, Registry)</li> <li>Standard industry terminology</li> </ul> </li> <li> <p>Implementation Details</p> <ul> <li>Internal workings of components</li> <li>Usage instructions (these belong in feature documentation)</li> </ul> </li> </ol>"},{"location":"docs/references/terminology/#core-concepts","title":"Core Concepts","text":""},{"location":"docs/references/terminology/#target","title":"Target","text":"<p>Types of artifacts that Trivy can scan, like container images and filesystem.</p>"},{"location":"docs/references/terminology/#scanner","title":"Scanner","text":"<p>Trivy's built-in security scanning engines. Trivy has four main scanners:</p> <ul> <li>Vulnerability Scanner</li> <li>Misconfiguration Scanner</li> <li>Secret Scanner</li> <li>License Scanner</li> </ul> <p>Note</p> <p>SBOM is not a scanner but an output format option.</p>"},{"location":"docs/references/terminology/#scan-assets","title":"Scan Assets","text":"<p>External data that Trivy downloads (if needed for scanner) and uses during scanning:</p> <ul> <li>Vulnerability Database (Trivy DB, trivy-db): Database containing vulnerability information</li> <li>Java Index Database (Trivy Java DB, trivy-java-db): Database for Java artifact identification</li> <li>Checks Bundle (trivy-checks): Archive containing misconfiguration detection rules</li> <li>VEX Repository: Repository containing VEX documents</li> </ul>"},{"location":"docs/references/terminology/#vulnerability-scanning","title":"Vulnerability Scanning","text":""},{"location":"docs/references/terminology/#vulnerability-database-trivy-db-trivy-db","title":"Vulnerability Database (Trivy DB, trivy-db)","text":"<p>The core vulnerability database required for vulnerability detection. Contains comprehensive vulnerability information for multiple ecosystems. Distributed via OCI registry.</p> <p>Managed at https://github.com/aquasecurity/trivy-db.</p> <p>The vulnerability database is built from a GitHub repository that collects and stores vulnerability information from various data sources. This repository serves as the foundation for building the Trivy DB.</p> <p>Managed at:</p> <ul> <li>https://github.com/aquasecurity/vuln-list</li> <li>https://github.com/aquasecurity/vuln-list-nvd</li> <li>https://github.com/aquasecurity/vuln-list-redhat</li> <li>https://github.com/aquasecurity/vuln-list-debian</li> <li>etc.</li> </ul>"},{"location":"docs/references/terminology/#java-index-database-trivy-java-db-trivy-java-db","title":"Java Index Database (Trivy Java DB, trivy-java-db)","text":"<p>Specialized database used for identifying Java libraries and their components during JAR/WAR/PAR/EAR scanning. Distributed via OCI registry.</p> <p>Managed at https://github.com/aquasecurity/trivy-java-db.</p>"},{"location":"docs/references/terminology/#misconfiguration-scanning","title":"Misconfiguration Scanning","text":"<p>When the context does not clearly indicate these terms are related to misconfiguration scanning, they may be prefixed with \"Misconfiguration\" for clarity. For example, \"Check\" may be referred to as \"Misconfiguration Check\", and \"Checks Bundle\" as \"Misconfiguration Checks Bundle\".</p>"},{"location":"docs/references/terminology/#check","title":"Check","text":"<p>A Rego file that defines rules for detecting misconfigurations in various types of IaC files.</p>"},{"location":"docs/references/terminology/#built-in-checks","title":"Built-in Checks","text":"<p>Default set of checks distributed through the trivy-checks repository, providing standard security and configuration best practices.</p>"},{"location":"docs/references/terminology/#checks-bundle","title":"Checks Bundle","text":"<p>A tar.gz archive containing the built-in checks, distributed via OCI registry.</p>"},{"location":"docs/references/terminology/#secret-scanning","title":"Secret Scanning","text":""},{"location":"docs/references/terminology/#rule","title":"Rule","text":"<p>Pattern matching rules used to detect hardcoded secrets and sensitive information. Each rule consists of:</p> <ul> <li>Metadata (ID, Category, Title, etc.)</li> <li>Regular expressions for matching sensitive patterns</li> <li>Additional context for detection accuracy</li> </ul>"},{"location":"docs/references/terminology/#kubernetes-integration","title":"Kubernetes Integration","text":""},{"location":"docs/references/terminology/#kbom-kubernetes-bill-of-materials","title":"KBOM (Kubernetes Bill of Materials)","text":"<p>A specialized SBOM format for Kubernetes clusters that includes detailed information about the cluster's components.</p>"},{"location":"docs/references/terminology/#vex-vulnerability-exploitability-exchange","title":"VEX (Vulnerability Exploitability eXchange)","text":""},{"location":"docs/references/terminology/#vex-repository","title":"VEX Repository","text":"<p>A repository system that stores VEX documents following the VEX Repository Specification. VEX repositories help users manage and share information about vulnerability applicability and exploitability.</p> <p>For detailed information about VEX repositories, see the document.</p>"},{"location":"docs/references/terminology/#vex-hub","title":"VEX Hub","text":"<p>The default VEX repository managed by Aqua Security at https://github.com/aquasecurity/vexhub. It primarily aggregates VEX documents published by package maintainers in their source repositories. VEX Hub serves as a central point for collecting and distributing vulnerability applicability information for OSS projects.</p>"},{"location":"docs/references/terminology/#cache-system","title":"Cache System","text":""},{"location":"docs/references/terminology/#cache-types","title":"Cache Types","text":"<p>The cache directory contains several distinct types of data:</p> <ul> <li>Vulnerability Database</li> <li>Java Index Database</li> <li>Misconfiguration Checks</li> <li>VEX Repositories</li> <li>Scan Cache</li> </ul>"},{"location":"docs/references/terminology/#asset-cache","title":"Asset Cache","text":"<p>Downloaded assets like vulnerability databases and Java index databases.</p>"},{"location":"docs/references/terminology/#scan-cache","title":"Scan Cache","text":"<p>A caching mechanism that stores analysis results from previous scans to speed up subsequent scans. For container image scanning, the scan cache stores analysis results including package names and versions per layer.</p> <p>For detailed information about caching, see the document.</p>"},{"location":"docs/references/terminology/#plugin-system","title":"Plugin System","text":""},{"location":"docs/references/terminology/#plugin","title":"Plugin","text":"<p>An add-on tool that integrates with Trivy to extend its core functionality. Plugins can be written in any programming language and integrate seamlessly with Trivy CLI, appearing in Trivy help and subcommands. They can be installed and removed independently without affecting the core Trivy installation.</p> <p>For detailed information about plugins, see the document.</p>"},{"location":"docs/references/terminology/#plugin-index-trivy-plugin-index","title":"Plugin Index (trivy-plugin-index)","text":"<p>A centralized registry that lists available Trivy plugins, managed at https://github.com/aquasecurity/trivy-plugin-index. The index maintains a curated list of official and community plugins, providing metadata such as plugin names, descriptions, and maintainers. It enables plugin discovery through the <code>trivy plugin search</code> command and facilitates automatic plugin installation and updates.</p> <p>For detailed information about the plugin index, see the document.</p>"},{"location":"docs/references/terminology/#module-system","title":"Module System","text":""},{"location":"docs/references/terminology/#module","title":"Module","text":"<p>A WebAssembly-based extension mechanism that allows custom scanning logic without modifying the Trivy binary. Modules can modify scan results by analyzing files or post-processing results.</p> <p>For detailed information about modules, see the document.</p>"},{"location":"docs/references/troubleshooting/","title":"Troubleshooting","text":""},{"location":"docs/references/troubleshooting/#scan","title":"Scan","text":""},{"location":"docs/references/troubleshooting/#timeout","title":"Timeout","text":"<p>Error</p> <pre><code>$ trivy image ...\n...\nanalyze error: timeout: context deadline exceeded\n</code></pre> <p>Your scan may time out. Java takes a particularly long time to scan. Try increasing the value of the ---timeout option such as <code>--timeout 15m</code>.</p>"},{"location":"docs/references/troubleshooting/#unable-to-initialize-an-image-scanner","title":"Unable to initialize an image scanner","text":"<p>Error</p> <pre><code>$ trivy image ...\n...\n2024-01-19T08:15:33.288Z    FATAL   image scan error: scan error: unable to initialize a scanner: unable to initialize an image scanner: 4 errors occurred:\n* docker error: unable to inspect the image (ContainerImageName): Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n* containerd error: containerd socket not found: /run/containerd/containerd.sock\n* podman error: unable to initialize Podman client: no podman socket found: stat podman/podman.sock: no such file or directory\n* remote error: GET https://index.docker.io/v2/ContainerImageName: MANIFEST_UNKNOWN: manifest unknown; unknown tag=0.1\n</code></pre> <p>It means Trivy is unable to find the container image in the following places:</p> <ul> <li>Docker Engine</li> <li>containerd</li> <li>Podman</li> <li>A remote registry</li> </ul> <p>Please see error messages for details of each error.</p> <p>Common mistakes include the following, depending on where you are pulling images from:</p>"},{"location":"docs/references/troubleshooting/#common","title":"Common","text":"<ul> <li>Typos in the image name<ul> <li>Common mistake :)</li> </ul> </li> <li>Forgetting to specify the registry<ul> <li>By default, it is considered to be Docker Hub ( <code>index.docker.io</code> ).</li> </ul> </li> </ul>"},{"location":"docs/references/troubleshooting/#docker-engine","title":"Docker Engine","text":"<ul> <li>Incorrect Docker host<ul> <li>If the Docker daemon's socket path is not <code>/var/run/docker.sock</code>, you need to specify the <code>--docker-host</code> flag or the <code>DOCKER_HOST</code> environment variable.   The same applies when using TCP; you must specify the correct host address.</li> </ul> </li> </ul>"},{"location":"docs/references/troubleshooting/#containerd","title":"containerd","text":"<ul> <li>Incorrect containerd address<ul> <li>If you are using a non-default path, you need to specify the <code>CONTAINERD_ADDRESS</code> environment variable.   Please refer to this documentation.</li> </ul> </li> <li>Incorrect namespace<ul> <li>If you are using a non-default namespace, you need to specify the <code>CONTAINERD_NAMESPACE</code> environment variable.   Please refer to this documentation.</li> <li></li> </ul> </li> </ul>"},{"location":"docs/references/troubleshooting/#podman","title":"Podman","text":"<ul> <li>Podman socket configuration<ul> <li>You need to enable the Podman socket. Please refer to this documentation.</li> </ul> </li> </ul>"},{"location":"docs/references/troubleshooting/#container-registry","title":"Container Registry","text":"<ul> <li>Unauthenticated<ul> <li>If you are using a private container registry, you need to authenticate. Please refer to this documentation.</li> </ul> </li> <li>Using a proxy<ul> <li>If you are using a proxy within your network, you need to correctly set the <code>HTTP_PROXY</code>, <code>HTTPS_PROXY</code>, etc., environment variables.</li> </ul> </li> <li>Use of a self-signed certificate in the registry<ul> <li>Because certificate verification will fail, you need to either trust that certificate or use the <code>--insecure</code> flag (not recommended in production).</li> </ul> </li> </ul>"},{"location":"docs/references/troubleshooting/#certification","title":"Certification","text":"<p>Error</p> <p>Error: x509: certificate signed by unknown authority</p> <p><code>TRIVY_INSECURE</code> can be used to allow insecure connections to a container registry when using SSL.</p> <pre><code>$ TRIVY_INSECURE=true trivy image [YOUR_IMAGE]\n</code></pre> <p>Alternatively, you can specify the location of your certificate using <code>SSL_CERT_FILE</code> or <code>SSL_CERT_DIR</code> environment variables.</p> <pre><code>$ SSL_CERT_FILE=/path/to/cert trivy image [YOUR_IMAGE]\n</code></pre> <pre><code>$ SSL_CERT_DIR=/path/to/certs trivy image [YOUR_IMAGE]\n</code></pre>"},{"location":"docs/references/troubleshooting/#github-rate-limiting","title":"GitHub Rate limiting","text":"<p>Trivy uses GitHub API for VEX repositories.</p> <p>Error</p> <pre><code>$ trivy image --vex repo ...\n...\nAPI rate limit exceeded for xxx.xxx.xxx.xxx.\n</code></pre> <p>Specify GITHUB_TOKEN for authentication</p> <pre><code>$ GITHUB_TOKEN=XXXXXXXXXX trivy image --vex repo [YOUR_IMAGE]\n</code></pre> <p>Note</p> <p><code>GITHUB_TOKEN</code> doesn't help with the rate limit for the vulnerability database and other assets. See https://github.com/aquasecurity/trivy/discussions/8009</p>"},{"location":"docs/references/troubleshooting/#unable-to-open-jar-files","title":"Unable to open JAR files","text":"<p>Error</p> <pre><code>$ trivy image ...\n...\nfailed to analyze file: failed to analyze usr/lib/jvm/java-1.8-openjdk/lib/tools.jar: unable to open usr/lib/jvm/java-1.8-openjdk/lib/tools.jar: failed to open: unable to read the file: stream error: stream ID 9; PROTOCOL_ERROR; received from peer\n</code></pre> <p>Currently, we're investigating this issue. As a temporary mitigation, you may be able to avoid this issue by downloading the Java DB in advance.</p> <pre><code>$ trivy image --download-java-db-only\n2023-02-01T16:57:04.322+0900    INFO    Downloading the Java DB...\n$ trivy image [YOUR_JAVA_IMAGE]\n</code></pre>"},{"location":"docs/references/troubleshooting/#database-and-cache-lock-errors","title":"Database and cache lock errors","text":"<p>Error</p> <pre><code>cache may be in use by another process\n</code></pre> <p>Error</p> <pre><code>vulnerability database may be in use by another process\n</code></pre> <p>By default, Trivy uses BoltDB for its vulnerability database and cache storage. BoltDB creates file locks to prevent data corruption, which means only one process can access the same database file at a time.</p> <p>As stated in the BoltDB documentation:</p> <p>Please note that Bolt obtains a file lock on the data file so multiple processes cannot open the same database at the same time. Opening an already open Bolt database will cause it to hang until the other process closes it.</p> <p>Reference: BoltDB README</p> <p>These errors occur when:</p> <ul> <li>Multiple Trivy processes try to use the same cache directory simultaneously</li> <li>A previous Trivy process did not shut down cleanly</li> <li>Trivy server is running and holding locks on the database and cache</li> </ul>"},{"location":"docs/references/troubleshooting/#important-note","title":"Important Note","text":"<p>Running multiple Trivy processes on the same machine is not recommended. Using the same cache directory for multiple processes does not improve performance and can cause unexpected errors due to BoltDB's locking mechanism.</p>"},{"location":"docs/references/troubleshooting/#solutions","title":"Solutions","text":"<p>Solution 1: Terminate conflicting processes (Recommended)</p> <p>Check for running Trivy processes and terminate them:</p> <pre><code>$ ps aux | grep trivy\n$ kill [process_id]\n</code></pre> <p>Solution 2: Use different cache directories (If multiple processes are absolutely necessary)</p> <p>If you must run multiple Trivy processes on the same machine, specify different cache directories for each process:</p> <pre><code>$ trivy image --cache-dir /tmp/trivy-cache-1 debian:11 &amp;\n$ trivy image --cache-dir /tmp/trivy-cache-2 debian:12 &amp;\n</code></pre> <p>Note that each cache directory will download its own copy of the vulnerability database and other scan assets, which will increase network traffic and storage usage.</p>"},{"location":"docs/references/troubleshooting/#multiple-trivy-servers","title":"Multiple Trivy servers","text":"<p>Error</p> <pre><code>$ trivy image --server http://xxx.com:xxxx test-image\n...\n- twirp error internal: failed scan, test-image: failed to apply layers: layer cache missing: sha256:*****\n</code></pre> <p>To run multiple Trivy servers, you need to use Redis as the cache backend so that those servers can share the cache.  Follow this instruction to do so.</p>"},{"location":"docs/references/troubleshooting/#problems-with-tmp-on-remote-git-repository-scans","title":"Problems with <code>/tmp</code> on remote Git repository scans","text":"<p>Error</p> <p>FATAL repository scan error: scan error: unable to initialize a scanner: unable to initialize a filesystem scanner: git clone error: write /tmp/fanal-remote...</p> <p>Trivy clones remote Git repositories under the <code>/tmp</code> directory before scanning them. If <code>/tmp</code> doesn't work for you, you can change it by setting the <code>TMPDIR</code> environment variable.</p> <p>Try:</p> <pre><code>$ TMPDIR=/my/custom/path trivy repo ...\n</code></pre>"},{"location":"docs/references/troubleshooting/#running-out-of-space-during-image-scans","title":"Running out of space during image scans","text":"<p>Error</p> <pre><code>image scan failed:\nfailed to copy the image:\nwrite /tmp/fanal-3323732142: no space left on device\n</code></pre> <p>Trivy uses a temporary directory during image scans. The directory path would be determined as follows:</p> <ul> <li>On Unix systems: Use <code>$TMPDIR</code> if non-empty, else <code>/tmp</code>.</li> <li>On Windows: Uses GetTempPath, returning the first non-empty value from <code>%TMP%</code>, <code>%TEMP%</code>, <code>%USERPROFILE%</code>, or the Windows directory.</li> </ul> <p>See this documentation for more details.</p> <p>If the image is large or the temporary directory has insufficient space, the scan will fail. You can configure the directory path to redirect Trivy to a directory with adequate storage. On Unix systems, you can set the <code>$TMPDIR</code> environment variable.</p> <pre><code>$ TMPDIR=/my/custom/path trivy image ...\n</code></pre> <p>When scanning images from a container registry, Trivy processes each layer by streaming, loading only the necessary files for the scan into memory and discarding unnecessary files. If a layer contains large files that are necessary for the scan (such as JAR files or binary files), Trivy saves them to a temporary directory (e.g. $TMPDIR) on local storage to avoid increased memory consumption. Although these files are deleted after the scan is complete, they can temporarily increase disk consumption and potentially exhaust storage. In such cases, there are currently three workarounds:</p> <ol> <li> <p>Use a temporary directory with sufficient capacity</p> <p>This is the same as explained above.</p> </li> <li> <p>Specify a small value for <code>--parallel</code></p> <p>By default, multiple layers are processed in parallel. If each layer contains large files, disk space may be consumed rapidly. By specifying a small value such as <code>--parallel 1</code>, parallelism is reduced, which can mitigate the issue.</p> </li> <li> <p>Specify <code>--skip-files</code> or <code>--skip-dirs</code></p> <p>If the container image contains large files that do not need to be scanned, you can skip their processing by specifying --skip-files or --skip-dirs.  For more details, please refer to this documentation.</p> </li> </ol>"},{"location":"docs/references/troubleshooting/#db","title":"DB","text":""},{"location":"docs/references/troubleshooting/#old-db-schema","title":"Old DB schema","text":"<p>Error</p> <p>--skip-update cannot be specified with the old DB schema.</p> <p>Trivy v0.23.0 or later requires Trivy DB v2. Please update your local database or follow the instruction of air-gapped environment.</p>"},{"location":"docs/references/troubleshooting/#error-downloading-vulnerability-db","title":"Error downloading vulnerability DB","text":"<p>Error</p> <p>FATAL failed to download vulnerability DB</p> <p>If Trivy is running behind corporate firewall, refer to the necessary connectivity requirements as described here.</p>"},{"location":"docs/references/troubleshooting/#denied","title":"Denied","text":"<p>Error</p> <p>GET https://ghcr.io/token?scope=repository%3Aaquasecurity%2Ftrivy-db%3Apull&amp;service=ghcr.io: DENIED: denied</p> <p>Your local GHCR (GitHub Container Registry) token might be expired. Please remove the token and try downloading the DB again.</p> <pre><code>docker logout ghcr.io\n</code></pre> <p>or</p> <pre><code>unset GITHUB_TOKEN\n</code></pre>"},{"location":"docs/references/troubleshooting/#homebrew","title":"Homebrew","text":""},{"location":"docs/references/troubleshooting/#scope-error","title":"Scope error","text":"<p>Error</p> <p>Error: Your macOS keychain GitHub credentials do not have sufficient scope!</p> <pre><code>$ brew tap aquasecurity/trivy\nError: Your macOS keychain GitHub credentials do not have sufficient scope!\nScopes they need: none\nScopes they have:\nCreate a personal access token:\nhttps://github.com/settings/tokens/new?scopes=gist,public_repo&amp;description=Homebrew\necho 'export HOMEBREW_GITHUB_API_TOKEN=your_token_here' &gt;&gt; ~/.zshrc\n</code></pre> <p>Try:</p> <pre><code>$ printf \"protocol=https\\nhost=github.com\\n\" | git credential-osxkeychain erase\n</code></pre>"},{"location":"docs/references/troubleshooting/#already-installed","title":"Already installed","text":"<p>Error</p> <p>Error: aquasecurity/trivy/trivy 64 already installed</p> <pre><code>$ brew upgrade\n...\nError: aquasecurity/trivy/trivy 64 already installed\n</code></pre> <p>Try:</p> <pre><code>$ brew unlink trivy &amp;&amp; brew uninstall trivy\n($ rm -rf /usr/local/Cellar/trivy/64)\n$ brew install aquasecurity/trivy/trivy\n</code></pre>"},{"location":"docs/references/troubleshooting/#debugging","title":"Debugging","text":""},{"location":"docs/references/troubleshooting/#http-requestresponse-tracing","title":"HTTP Request/Response Tracing","text":"<p>For debugging network issues, connection problems, or authentication failures, you can enable HTTP request/response tracing using the <code>--trace-http</code> flag.</p> <p>Security Warning</p> <p>While Trivy attempts to redact known sensitive information such as authentication headers and common secrets, the <code>--trace-http</code> flag may still expose sensitive data in HTTP requests and responses.</p> <p>Never use this flag in production environments or CI/CD pipelines. This flag is automatically disabled in CI environments for security.</p> <pre><code># Enable HTTP tracing for debugging registry issues\n$ trivy image --trace-http registry.example.com/my-image:latest\n\n# HTTP tracing with other debugging options\n$ trivy image --trace-http --debug --insecure my-image:tag\n</code></pre>"},{"location":"docs/references/troubleshooting/#others","title":"Others","text":""},{"location":"docs/references/troubleshooting/#unknown-error","title":"Unknown error","text":"<p>Try again after running <code>trivy clean --all</code>:</p> <pre><code>$ trivy clean --all\n</code></pre>"},{"location":"docs/references/configuration/config-file/","title":"Config file","text":"<p>Trivy can be customized by tweaking a <code>trivy.yaml</code> file. The config path can be overridden by the <code>--config</code> flag.</p> <p>An example is here.</p> <p>These samples contain default values for flags.</p>"},{"location":"docs/references/configuration/config-file/#global-options","title":"Global options","text":"<pre><code>cache:\n  # Same as '--cache-dir'\n  dir: \"/path/to/cache\"\n\n# Same as '--debug'\ndebug: false\n\n# Same as '--insecure'\ninsecure: false\n\n# Same as '--quiet'\nquiet: false\n\n# Same as '--timeout'\ntimeout: 5m0s\n</code></pre>"},{"location":"docs/references/configuration/config-file/#cache-options","title":"Cache options","text":"<pre><code>cache:\n  # Same as '--cache-backend'\n  backend: \"fs\"\n\n  redis:\n    # Same as '--redis-ca'\n    ca: \"\"\n\n    # Same as '--redis-cert'\n    cert: \"\"\n\n    # Same as '--redis-key'\n    key: \"\"\n\n    # Same as '--redis-tls'\n    tls: false\n\n  # Same as '--cache-ttl'\n  ttl: 0s\n</code></pre>"},{"location":"docs/references/configuration/config-file/#clean-options","title":"Clean options","text":"<pre><code>clean:\n  # Same as '--all'\n  all: false\n\n  # Same as '--checks-bundle'\n  checks-bundle: false\n\n  # Same as '--java-db'\n  java-db: false\n\n  # Same as '--scan-cache'\n  scan-cache: false\n\n  # Same as '--vex-repo'\n  vex-repo: false\n\n  # Same as '--vuln-db'\n  vuln-db: false\n</code></pre>"},{"location":"docs/references/configuration/config-file/#clientserver-options","title":"Client/Server options","text":"<pre><code>server:\n  # Same as '--server'\n  addr: \"\"\n\n  # Same as '--custom-headers'\n  custom-headers: []\n\n  # Same as '--listen'\n  listen: \"localhost:4954\"\n\n  # Same as '--token'\n  token: \"\"\n\n  # Same as '--token-header'\n  token-header: \"Trivy-Token\"\n</code></pre>"},{"location":"docs/references/configuration/config-file/#db-options","title":"DB options","text":"<pre><code>db:\n  # Same as '--download-java-db-only'\n  download-java-only: false\n\n  # Same as '--download-db-only'\n  download-only: false\n\n  # Same as '--java-db-repository'\n  java-repository:\n   - mirror.gcr.io/aquasec/trivy-java-db:1\n   - ghcr.io/aquasecurity/trivy-java-db:1\n\n  # Same as '--skip-java-db-update'\n  java-skip-update: false\n\n  # Same as '--no-progress'\n  no-progress: false\n\n  # Same as '--db-repository'\n  repository:\n   - mirror.gcr.io/aquasec/trivy-db:2\n   - ghcr.io/aquasecurity/trivy-db:2\n\n  # Same as '--skip-db-update'\n  skip-update: false\n</code></pre>"},{"location":"docs/references/configuration/config-file/#image-options","title":"Image options","text":"<pre><code>image:\n  docker:\n    # Same as '--docker-host'\n    host: \"\"\n\n  # Same as '--image-config-scanners'\n  image-config-scanners: []\n\n  # Same as '--input'\n  input: \"\"\n\n  # Same as '--max-image-size'\n  max-size: \"\"\n\n  # Same as '--platform'\n  platform: \"\"\n\n  podman:\n    # Same as '--podman-host'\n    host: \"\"\n\n  # Same as '--removed-pkgs'\n  removed-pkgs: false\n\n  # Same as '--image-src'\n  source:\n   - docker\n   - containerd\n   - podman\n   - remote\n</code></pre>"},{"location":"docs/references/configuration/config-file/#kubernetes-options","title":"Kubernetes options","text":"<pre><code>kubernetes:\n  # Same as '--burst'\n  burst: 10\n\n  # Same as '--disable-node-collector'\n  disableNodeCollector: false\n\n  exclude:\n    # Same as '--exclude-nodes'\n    nodes: []\n\n    # Same as '--exclude-owned'\n    owned: false\n\n  # Same as '--exclude-kinds'\n  excludeKinds: []\n\n  # Same as '--exclude-namespaces'\n  excludeNamespaces: []\n\n  # Same as '--include-kinds'\n  includeKinds: []\n\n  # Same as '--include-namespaces'\n  includeNamespaces: []\n\n  # Same as '--k8s-version'\n  k8s-version: \"\"\n\n  # Same as '--kubeconfig'\n  kubeconfig: \"\"\n\n  node-collector:\n    # Same as '--node-collector-imageref'\n    imageref: \"ghcr.io/aquasecurity/node-collector:0.3.1\"\n\n    # Same as '--node-collector-namespace'\n    namespace: \"trivy-temp\"\n\n  # Same as '--qps'\n  qps: 5\n\n  # Same as '--skip-images'\n  skipImages: false\n\n  # Same as '--tolerations'\n  tolerations: []\n</code></pre>"},{"location":"docs/references/configuration/config-file/#license-options","title":"License options","text":"<pre><code>license:\n  # Same as '--license-confidence-level'\n  confidenceLevel: 0.9\n\n  forbidden:\n   - AGPL-1.0\n   - AGPL-3.0\n   - CC-BY-NC-1.0\n   - CC-BY-NC-2.0\n   - CC-BY-NC-2.5\n   - CC-BY-NC-3.0\n   - CC-BY-NC-4.0\n   - CC-BY-NC-ND-1.0\n   - CC-BY-NC-ND-2.0\n   - CC-BY-NC-ND-2.5\n   - CC-BY-NC-ND-3.0\n   - CC-BY-NC-ND-4.0\n   - CC-BY-NC-SA-1.0\n   - CC-BY-NC-SA-2.0\n   - CC-BY-NC-SA-2.5\n   - CC-BY-NC-SA-3.0\n   - CC-BY-NC-SA-4.0\n   - Commons-Clause\n   - Facebook-2-Clause\n   - Facebook-3-Clause\n   - Facebook-Examples\n   - WTFPL\n\n  # Same as '--license-full'\n  full: false\n\n  # Same as '--ignored-licenses'\n  ignored: []\n\n  notice:\n   - AFL-1.1\n   - AFL-1.2\n   - AFL-2.0\n   - AFL-2.1\n   - AFL-3.0\n   - Apache-1.0\n   - Apache-1.1\n   - Apache-2.0\n   - Artistic-1.0-cl8\n   - Artistic-1.0-Perl\n   - Artistic-1.0\n   - Artistic-2.0\n   - BSL-1.0\n   - BSD-2-Clause-FreeBSD\n   - BSD-2-Clause-NetBSD\n   - BSD-2-Clause\n   - BSD-3-Clause-Attribution\n   - BSD-3-Clause-Clear\n   - BSD-3-Clause-LBNL\n   - BSD-3-Clause\n   - BSD-4-Clause\n   - BSD-4-Clause-UC\n   - BSD-Protection\n   - CC-BY-1.0\n   - CC-BY-2.0\n   - CC-BY-2.5\n   - CC-BY-3.0\n   - CC-BY-4.0\n   - FTL\n   - ISC\n   - ImageMagick\n   - Libpng\n   - Lil-1.0\n   - Linux-OpenIB\n   - LPL-1.02\n   - LPL-1.0\n   - MS-PL\n   - MIT\n   - NCSA\n   - OpenSSL\n   - PHP-3.01\n   - PHP-3.0\n   - PIL\n   - Python-2.0\n   - Python-2.0-complete\n   - PostgreSQL\n   - SGI-B-1.0\n   - SGI-B-1.1\n   - SGI-B-2.0\n   - Unicode-DFS-2015\n   - Unicode-DFS-2016\n   - Unicode-TOU\n   - UPL-1.0\n   - W3C-19980720\n   - W3C-20150513\n   - W3C\n   - X11\n   - Xnet\n   - Zend-2.0\n   - zlib-acknowledgement\n   - Zlib\n   - ZPL-1.1\n   - ZPL-2.0\n   - ZPL-2.1\n\n  permissive: []\n\n  reciprocal:\n   - APSL-1.0\n   - APSL-1.1\n   - APSL-1.2\n   - APSL-2.0\n   - CDDL-1.0\n   - CDDL-1.1\n   - CPL-1.0\n   - EPL-1.0\n   - EPL-2.0\n   - FreeImage\n   - IPL-1.0\n   - MPL-1.0\n   - MPL-1.1\n   - MPL-2.0\n   - Ruby\n\n  restricted:\n   - BCL\n   - CC-BY-ND-1.0\n   - CC-BY-ND-2.0\n   - CC-BY-ND-2.5\n   - CC-BY-ND-3.0\n   - CC-BY-ND-4.0\n   - CC-BY-SA-1.0\n   - CC-BY-SA-2.0\n   - CC-BY-SA-2.5\n   - CC-BY-SA-3.0\n   - CC-BY-SA-4.0\n   - GPL-1.0\n   - GPL-2.0\n   - GPL-2.0-with-autoconf-exception\n   - GPL-2.0-with-bison-exception\n   - GPL-2.0-with-classpath-exception\n   - GPL-2.0-with-font-exception\n   - GPL-2.0-with-GCC-exception\n   - GPL-3.0\n   - GPL-3.0-with-autoconf-exception\n   - GPL-3.0-with-GCC-exception\n   - LGPL-2.0\n   - LGPL-2.1\n   - LGPL-3.0\n   - NPL-1.0\n   - NPL-1.1\n   - OSL-1.0\n   - OSL-1.1\n   - OSL-2.0\n   - OSL-2.1\n   - OSL-3.0\n   - QPL-1.0\n   - Sleepycat\n\n  unencumbered:\n   - CC0-1.0\n   - Unlicense\n   - 0BSD\n</code></pre>"},{"location":"docs/references/configuration/config-file/#misconfiguration-options","title":"Misconfiguration options","text":"<pre><code>misconfiguration:\n  # Same as '--checks-bundle-repository'\n  checks-bundle-repository: \"mirror.gcr.io/aquasec/trivy-checks:1\"\n\n  cloudformation:\n    # Same as '--cf-params'\n    params: []\n\n  # Same as '--config-file-schemas'\n  config-file-schemas: []\n\n  helm:\n    # Same as '--helm-api-versions'\n    api-versions: []\n\n    # Same as '--helm-kube-version'\n    kube-version: \"\"\n\n    # Same as '--helm-set'\n    set: []\n\n    # Same as '--helm-set-file'\n    set-file: []\n\n    # Same as '--helm-set-string'\n    set-string: []\n\n    # Same as '--helm-values'\n    values: []\n\n  # Same as '--include-non-failures'\n  include-non-failures: false\n\n  # Same as '--raw-config-scanners'\n  raw-config-scanners: []\n\n  # Same as '--render-cause'\n  render-cause: []\n\n  # Same as '--misconfig-scanners'\n  scanners:\n   - azure-arm\n   - cloudformation\n   - dockerfile\n   - helm\n   - kubernetes\n   - terraform\n   - terraformplan-json\n   - terraformplan-snapshot\n\n  terraform:\n    # Same as '--tf-exclude-downloaded-modules'\n    exclude-downloaded-modules: false\n\n    # Same as '--tf-vars'\n    vars: []\n</code></pre>"},{"location":"docs/references/configuration/config-file/#module-options","title":"Module options","text":"<pre><code>module:\n  # Same as '--module-dir'\n  dir: \"$HOME/.trivy/modules\"\n\n  # Same as '--enable-modules'\n  enable-modules: []\n</code></pre>"},{"location":"docs/references/configuration/config-file/#package-options","title":"Package options","text":"<pre><code>pkg:\n  # Same as '--include-dev-deps'\n  include-dev-deps: false\n\n  # Same as '--pkg-relationships'\n  relationships:\n   - unknown\n   - root\n   - workspace\n   - direct\n   - indirect\n\n  # Same as '--pkg-types'\n  types:\n   - os\n   - library\n</code></pre>"},{"location":"docs/references/configuration/config-file/#registry-options","title":"Registry options","text":"<pre><code>registry:\n  mirrors:\n\n  # Same as '--password'\n  password: []\n\n  # Same as '--password-stdin'\n  password-stdin: false\n\n  # Same as '--registry-token'\n  token: \"\"\n\n  # Same as '--username'\n  username: []\n</code></pre>"},{"location":"docs/references/configuration/config-file/#rego-options","title":"Rego options","text":"<pre><code>rego:\n  # Same as '--config-check'\n  check: []\n\n  # Same as '--config-data'\n  data: []\n\n  # Same as '--include-deprecated-checks'\n  include-deprecated-checks: false\n\n  # Same as '--check-namespaces'\n  namespaces: []\n\n  # Same as '--skip-check-update'\n  skip-check-update: false\n\n  # Same as '--trace-rego'\n  trace: false\n</code></pre>"},{"location":"docs/references/configuration/config-file/#report-options","title":"Report options","text":"<pre><code># Same as '--dependency-tree'\ndependency-tree: false\n\n# Same as '--exit-code'\nexit-code: 0\n\n# Same as '--exit-on-eol'\nexit-on-eol: 0\n\n# Same as '--format'\nformat: \"table\"\n\n# Same as '--ignore-policy'\nignore-policy: \"\"\n\n# Same as '--ignorefile'\nignorefile: \".trivyignore\"\n\n# Same as '--list-all-pkgs'\nlist-all-pkgs: false\n\n# Same as '--output'\noutput: \"\"\n\n# Same as '--output-plugin-arg'\noutput-plugin-arg: \"\"\n\n# Same as '--report'\nreport: \"all\"\n\nscan:\n  # Same as '--compliance'\n  compliance: \"\"\n\n  # Same as '--show-suppressed'\n  show-suppressed: false\n\n# Same as '--severity'\nseverity:\n - UNKNOWN\n - LOW\n - MEDIUM\n - HIGH\n - CRITICAL\n\n# Same as '--table-mode'\ntable-mode:\n - summary\n - detailed\n\n# Same as '--template'\ntemplate: \"\"\n</code></pre>"},{"location":"docs/references/configuration/config-file/#repository-options","title":"Repository options","text":"<pre><code>repository:\n  # Same as '--branch'\n  branch: \"\"\n\n  # Same as '--commit'\n  commit: \"\"\n\n  # Same as '--tag'\n  tag: \"\"\n</code></pre>"},{"location":"docs/references/configuration/config-file/#scan-options","title":"Scan options","text":"<pre><code>scan:\n  # Same as '--detection-priority'\n  detection-priority: \"precise\"\n\n  # Same as '--disable-telemetry'\n  disable-telemetry: false\n\n  # Same as '--distro'\n  distro: \"\"\n\n  # Same as '--file-patterns'\n  file-patterns: []\n\n  # Same as '--offline-scan'\n  offline: false\n\n  # Same as '--parallel'\n  parallel: 5\n\n  # Same as '--rekor-url'\n  rekor-url: \"https://rekor.sigstore.dev\"\n\n  # Same as '--sbom-sources'\n  sbom-sources: []\n\n  # Same as '--scanners'\n  scanners:\n   - vuln\n   - secret\n\n  # Same as '--skip-dirs'\n  skip-dirs: []\n\n  # Same as '--skip-files'\n  skip-files: []\n\n  # Same as '--skip-version-check'\n  skip-version-check: false\n</code></pre>"},{"location":"docs/references/configuration/config-file/#secret-options","title":"Secret options","text":"<pre><code>secret:\n  # Same as '--secret-config'\n  config: \"trivy-secret.yaml\"\n</code></pre>"},{"location":"docs/references/configuration/config-file/#vulnerability-options","title":"Vulnerability options","text":"<pre><code>vulnerability:\n  # Same as '--ignore-status'\n  ignore-status: []\n\n  # Same as '--ignore-unfixed'\n  ignore-unfixed: false\n\n  # Same as '--vuln-severity-source'\n  severity-source:\n   - auto\n\n  # Same as '--skip-vex-repo-update'\n  skip-vex-repo-update: false\n\n  # Same as '--vex'\n  vex: []\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy/","title":"Overview","text":""},{"location":"docs/references/configuration/cli/trivy/#trivy","title":"trivy","text":"<p>Unified security scanner</p>"},{"location":"docs/references/configuration/cli/trivy/#synopsis","title":"Synopsis","text":"<p>Scanner for vulnerabilities in container images, file systems, and Git repositories, as well as for configuration issues and hard-coded secrets</p> <pre><code>trivy [global flags] command [flags] target\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy/#examples","title":"Examples","text":"<pre><code>  # Scan a container image\n  $ trivy image python:3.4-alpine\n\n  # Scan a container image from a tar archive\n  $ trivy image --input ruby-3.1.tar\n\n  # Scan local filesystem\n  $ trivy fs .\n\n  # Run in server mode\n  $ trivy server\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy/#options","title":"Options","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n  -f, --format string             version format (json)\n      --generate-default-config   write the default config to trivy-default.yaml\n  -h, --help                      help for trivy\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy clean  - Remove cached files</li> <li>trivy config    - Scan config files for misconfigurations</li> <li>trivy convert  - Convert Trivy JSON report into a different format</li> <li>trivy filesystem    - Scan local filesystem</li> <li>trivy image  - Scan a container image</li> <li>trivy kubernetes    - [EXPERIMENTAL] Scan kubernetes cluster</li> <li>trivy module    - Manage modules</li> <li>trivy plugin    - Manage plugins</li> <li>trivy registry    - Manage registry authentication</li> <li>trivy repository    - Scan a repository</li> <li>trivy rootfs    - Scan rootfs</li> <li>trivy sbom    - Scan SBOM for vulnerabilities and licenses</li> <li>trivy server    - Server mode</li> <li>trivy version  - Print the version</li> <li>trivy vex  - [EXPERIMENTAL] VEX utilities</li> <li>trivy vm    - [EXPERIMENTAL] Scan a virtual machine image</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_clean/","title":"Clean","text":""},{"location":"docs/references/configuration/cli/trivy_clean/#trivy-clean","title":"trivy clean","text":"<p>Remove cached files</p> <pre><code>trivy clean [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_clean/#examples","title":"Examples","text":"<pre><code>  # Remove all caches\n  $ trivy clean --all\n\n  # Remove scan cache\n  $ trivy clean --scan-cache\n\n  # Remove vulnerability database\n  $ trivy clean --vuln-db\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_clean/#options","title":"Options","text":"<pre><code>  -a, --all             remove all caches\n      --checks-bundle   remove checks bundle\n  -h, --help            help for clean\n      --java-db         remove Java database\n      --scan-cache      remove scan cache (container and VM image analysis results)\n      --vex-repo        remove VEX repositories\n      --vuln-db         remove vulnerability database\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_clean/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_clean/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_config/","title":"Config","text":""},{"location":"docs/references/configuration/cli/trivy_config/#trivy-config","title":"trivy config","text":"<p>Scan config files for misconfigurations</p> <pre><code>trivy config [flags] DIR\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_config/#options","title":"Options","text":"<pre><code>      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"memory\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --cf-params strings                 specify paths to override the CloudFormation parameters files\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --compliance string                 compliance report to generate\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for config\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --include-deprecated-checks         include deprecated checks\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --k8s-version string                specify k8s version to validate outdated api by it (example: 1.21.0)\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --report string                     specify a compliance report format for the output (allowed values: all,summary) (default \"all\")\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --skip-check-update                 skip fetching rego check updates\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --tf-vars strings                   specify paths to override the Terraform tfvars files\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_config/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_config/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_convert/","title":"Convert","text":""},{"location":"docs/references/configuration/cli/trivy_convert/#trivy-convert","title":"trivy convert","text":"<p>Convert Trivy JSON report into a different format</p> <pre><code>trivy convert [flags] RESULT_JSON\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_convert/#examples","title":"Examples","text":"<pre><code>  # report conversion\n  $ trivy image --format json --output result.json --list-all-pkgs debian:11\n  $ trivy convert --format cyclonedx --output result.cdx result.json\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_convert/#options","title":"Options","text":"<pre><code>      --compliance string          compliance report to generate\n      --dependency-tree            [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --exit-code int              specify exit code when any security issues are found\n      --exit-on-eol int            exit with the specified code when the OS reaches end of service/life\n  -f, --format string              format\n                                   Allowed values:\n                                     - table\n                                     - json\n                                     - template\n                                     - sarif\n                                     - cyclonedx\n                                     - spdx\n                                     - spdx-json\n                                     - github\n                                     - cosign-vuln\n                                    (default \"table\")\n  -h, --help                       help for convert\n      --ignore-policy string       specify the Rego file path to evaluate each vulnerability\n      --ignorefile string          specify .trivyignore file (default \".trivyignore\")\n      --list-all-pkgs              output all packages in the JSON report regardless of vulnerability\n  -o, --output string              output file name\n      --output-plugin-arg string   [EXPERIMENTAL] output plugin arguments\n      --report string              specify a report format for the output (allowed values: all,summary) (default \"all\")\n      --scanners strings           List of scanners included when generating the json report. Used only for rendering the summary table. (allowed values: vuln,misconfig,secret,license)\n  -s, --severity strings           severities of security issues to be displayed\n                                   Allowed values:\n                                     - UNKNOWN\n                                     - LOW\n                                     - MEDIUM\n                                     - HIGH\n                                     - CRITICAL\n                                    (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed            [EXPERIMENTAL] show suppressed vulnerabilities\n      --table-mode strings         [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string            output template\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_convert/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_convert/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_filesystem/","title":"Filesystem","text":""},{"location":"docs/references/configuration/cli/trivy_filesystem/#trivy-filesystem","title":"trivy filesystem","text":"<p>Scan local filesystem</p> <pre><code>trivy filesystem [flags] PATH\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_filesystem/#examples","title":"Examples","text":"<pre><code>  # Scan a local project including language-specific files\n  $ trivy fs /path/to/your_project\n\n  # Scan a single file\n  $ trivy fs ./trivy-ci-test/Pipfile.lock\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_filesystem/#options","title":"Options","text":"<pre><code>      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"memory\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --cf-params strings                 specify paths to override the CloudFormation parameters files\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --compliance string                 compliance report to generate\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --custom-headers strings            custom headers in client mode\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --distro string                     [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for filesystem\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignored-licenses strings          specify a list of license to ignore\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --include-deprecated-checks         include deprecated checks\n      --include-dev-deps                  include development dependencies in the report (supported: npm, yarn, gradle)\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --license-confidence-level float    specify license classifier's confidence level (default 0.9)\n      --license-full                      eagerly look for licenses in source code headers and license files\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress                       suppress progress bar\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --report string                     specify a compliance report format for the output (allowed values: all,summary) (default \"all\")\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n      --server string                     server address in client mode\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-check-update                 skip fetching rego check updates\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --tf-vars strings                   specify paths to override the Terraform tfvars files\n      --token string                      for authentication in client/server mode\n      --token-header string               specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_filesystem/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_filesystem/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_image/","title":"Image","text":""},{"location":"docs/references/configuration/cli/trivy_image/#trivy-image","title":"trivy image","text":"<p>Scan a container image</p> <pre><code>trivy image [flags] IMAGE_NAME\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_image/#examples","title":"Examples","text":"<pre><code>  # Scan a container image\n  $ trivy image python:3.4-alpine\n\n  # Scan a container image from a tar archive\n  $ trivy image --input ruby-3.1.tar\n\n  # Filter by severities\n  $ trivy image --severity HIGH,CRITICAL alpine:3.15\n\n  # Ignore unfixed/unpatched vulnerabilities\n  $ trivy image --ignore-unfixed alpine:3.15\n\n  # Scan a container image in client mode\n  $ trivy image --server http://127.0.0.1:4954 alpine:latest\n\n  # Generate json result\n  $ trivy image --format json --output result.json alpine:3.15\n\n  # Generate a report in the CycloneDX format\n  $ trivy image --format cyclonedx --output result.cdx alpine:3.15\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_image/#options","title":"Options","text":"<pre><code>      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"fs\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --compliance string                 compliance report to generate (built-in compliance's: docker-cis-1.6.0)\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --custom-headers strings            custom headers in client mode\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --distro string                     [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --docker-host string                unix domain socket path to use for docker scanning\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --exit-on-eol int                   exit with the specified code when the OS reaches end of service/life\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for image\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignored-licenses strings          specify a list of license to ignore\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --image-config-scanners strings     comma-separated list of what security issues to detect on container image configurations (allowed values: misconfig,secret)\n      --image-src strings                 image source(s) to use, in priority order (allowed values: docker,containerd,podman,remote) (default [docker,containerd,podman,remote])\n      --include-deprecated-checks         include deprecated checks\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --input string                      input file path instead of image name\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --license-confidence-level float    specify license classifier's confidence level (default 0.9)\n      --license-full                      eagerly look for licenses in source code headers and license files\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --max-image-size string             [EXPERIMENTAL] maximum image size to process, specified in a human-readable format (e.g., '44kB', '17MB'); an error will be returned if the image exceeds this size\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress                       suppress progress bar\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --platform string                   set platform in the form os/arch if image is multi-platform capable\n      --podman-host string                unix podman socket path to use for podman scanning\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --removed-pkgs                      detect vulnerabilities of removed packages (only for Alpine)\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --report string                     specify a format for the compliance report. (allowed values: all,summary) (default \"summary\")\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n      --server string                     server address in client mode\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-check-update                 skip fetching rego check updates\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --token string                      for authentication in client/server mode\n      --token-header string               specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_image/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_image/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/","title":"Kubernetes","text":""},{"location":"docs/references/configuration/cli/trivy_kubernetes/#trivy-kubernetes","title":"trivy kubernetes","text":"<p>[EXPERIMENTAL] Scan kubernetes cluster</p>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/#synopsis","title":"Synopsis","text":"<p>Default context in kube configuration will be used unless specified</p> <pre><code>trivy kubernetes [flags] [CONTEXT]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/#examples","title":"Examples","text":"<pre><code>  # cluster scanning\n  $ trivy k8s --report summary\n\n  # cluster scanning with specific namespace:\n  $ trivy k8s --include-namespaces kube-system --report summary \n\n  # cluster with specific context:\n  $ trivy k8s kind-kind --report summary \n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/#options","title":"Options","text":"<pre><code>      --burst int                         specify the maximum burst for throttle (default 10)\n      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"fs\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --compliance string                 compliance report to generate\n                                          Built-in compliance's:\n                                            - k8s-nsa-1.0\n                                            - k8s-cis-1.23\n                                            - eks-cis-1.4\n                                            - rke2-cis-1.24\n                                            - k8s-pss-baseline-0.1\n                                            - k8s-pss-restricted-0.1\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-node-collector            When the flag is activated, the node-collector job will not be executed, thus skipping misconfiguration findings on the node.\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --distro string                     [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --exclude-kinds strings             indicate the kinds exclude from scanning (example: node)\n      --exclude-namespaces strings        indicate the namespaces excluded from scanning (example: kube-system)\n      --exclude-nodes strings             indicate the node labels that the node-collector job should exclude from scanning (example: kubernetes.io/arch:arm64,team:dev)\n      --exclude-owned                     exclude resources that have an owner reference\n      --exit-code int                     specify exit code when any security issues are found\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format (allowed values: table,json,cyclonedx) (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for kubernetes\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --image-src strings                 image source(s) to use, in priority order (allowed values: docker,containerd,podman,remote) (default [docker,containerd,podman,remote])\n      --include-deprecated-checks         include deprecated checks\n      --include-kinds strings             indicate the kinds included in scanning (example: node)\n      --include-namespaces strings        indicate the namespaces included in scanning (example: kube-system)\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --k8s-version string                specify k8s version to validate outdated api by it (example: 1.21.0)\n      --kubeconfig string                 specify the kubeconfig file path to use\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --no-progress                       suppress progress bar\n      --node-collector-imageref string    indicate the image reference for the node-collector scan job (default \"ghcr.io/aquasecurity/node-collector:0.3.1\")\n      --node-collector-namespace string   specify the namespace in which the node-collector job should be deployed (default \"trivy-temp\")\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --qps float                         specify the maximum QPS to the master from this client (default 5)\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --report string                     specify a report format for the output (allowed values: all,summary) (default \"all\")\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,rbac) (default [vuln,misconfig,secret,rbac])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-check-update                 skip fetching rego check updates\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-images                       skip the downloading and scanning of images (vulnerabilities and secrets) in the cluster resources\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --tolerations strings               specify node-collector job tolerations (example: key1=value1:NoExecute,key2=value2:NoSchedule)\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_kubernetes/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_module/","title":"Module","text":""},{"location":"docs/references/configuration/cli/trivy_module/#trivy-module","title":"trivy module","text":"<p>Manage modules</p>"},{"location":"docs/references/configuration/cli/trivy_module/#options","title":"Options","text":"<pre><code>      --enable-modules strings   [EXPERIMENTAL] module names to enable\n  -h, --help                     help for module\n      --module-dir string        specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> <li>trivy module install    - Install a module</li> <li>trivy module uninstall    - Uninstall a module</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_module_install/","title":"Module Install","text":""},{"location":"docs/references/configuration/cli/trivy_module_install/#trivy-module-install","title":"trivy module install","text":"<p>Install a module</p> <pre><code>trivy module install [flags] REPOSITORY\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_install/#options","title":"Options","text":"<pre><code>  -h, --help   help for install\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_install/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --enable-modules strings    [EXPERIMENTAL] module names to enable\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n      --module-dir string         specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_install/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy module    - Manage modules</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_module_uninstall/","title":"Module Uninstall","text":""},{"location":"docs/references/configuration/cli/trivy_module_uninstall/#trivy-module-uninstall","title":"trivy module uninstall","text":"<p>Uninstall a module</p> <pre><code>trivy module uninstall [flags] REPOSITORY\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_uninstall/#options","title":"Options","text":"<pre><code>  -h, --help   help for uninstall\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_uninstall/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --enable-modules strings    [EXPERIMENTAL] module names to enable\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n      --module-dir string         specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_module_uninstall/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy module    - Manage modules</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin/","title":"Plugin","text":""},{"location":"docs/references/configuration/cli/trivy_plugin/#trivy-plugin","title":"trivy plugin","text":"<p>Manage plugins</p>"},{"location":"docs/references/configuration/cli/trivy_plugin/#options","title":"Options","text":"<pre><code>  -h, --help   help for plugin\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> <li>trivy plugin info  - Show information about the specified plugin</li> <li>trivy plugin install    - Install a plugin</li> <li>trivy plugin list  - List installed plugin</li> <li>trivy plugin run    - Run a plugin on the fly</li> <li>trivy plugin search  - List Trivy plugins available on the plugin index and search among them</li> <li>trivy plugin uninstall    - Uninstall a plugin</li> <li>trivy plugin update  - Update the local copy of the plugin index</li> <li>trivy plugin upgrade    - Upgrade installed plugins to newer versions</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_info/","title":"Plugin Info","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_info/#trivy-plugin-info","title":"trivy plugin info","text":"<p>Show information about the specified plugin</p> <pre><code>trivy plugin info PLUGIN_NAME\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_info/#options","title":"Options","text":"<pre><code>  -h, --help   help for info\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_info/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_info/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_install/","title":"Plugin Install","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_install/#trivy-plugin-install","title":"trivy plugin install","text":"<p>Install a plugin</p> <pre><code>trivy plugin install NAME | URL | FILE_PATH\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_install/#examples","title":"Examples","text":"<pre><code>  # Install a plugin from the plugin index\n  $ trivy plugin install referrer\n\n  # Specify the version of the plugin to install\n  $ trivy plugin install referrer@v0.3.0\n\n  # Install a plugin from a URL\n  $ trivy plugin install github.com/aquasecurity/trivy-plugin-referrer\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_install/#options","title":"Options","text":"<pre><code>  -h, --help   help for install\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_install/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_install/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_list/","title":"Plugin List","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_list/#trivy-plugin-list","title":"trivy plugin list","text":"<p>List installed plugin</p> <pre><code>trivy plugin list\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_list/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_run/","title":"Plugin Run","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_run/#trivy-plugin-run","title":"trivy plugin run","text":"<p>Run a plugin on the fly</p> <pre><code>trivy plugin run NAME | URL | FILE_PATH\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_run/#options","title":"Options","text":"<pre><code>  -h, --help   help for run\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_run/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_run/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_search/","title":"Plugin Search","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_search/#trivy-plugin-search","title":"trivy plugin search","text":"<p>List Trivy plugins available on the plugin index and search among them</p> <pre><code>trivy plugin search [KEYWORD]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_search/#options","title":"Options","text":"<pre><code>  -h, --help   help for search\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_search/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_search/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_uninstall/","title":"Plugin Uninstall","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_uninstall/#trivy-plugin-uninstall","title":"trivy plugin uninstall","text":"<p>Uninstall a plugin</p> <pre><code>trivy plugin uninstall PLUGIN_NAME\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_uninstall/#options","title":"Options","text":"<pre><code>  -h, --help   help for uninstall\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_uninstall/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_uninstall/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_update/","title":"Plugin Update","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_update/#trivy-plugin-update","title":"trivy plugin update","text":"<p>Update the local copy of the plugin index</p> <pre><code>trivy plugin update\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_update/#options","title":"Options","text":"<pre><code>  -h, --help   help for update\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_update/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_plugin_upgrade/","title":"Plugin Upgrade","text":""},{"location":"docs/references/configuration/cli/trivy_plugin_upgrade/#trivy-plugin-upgrade","title":"trivy plugin upgrade","text":"<p>Upgrade installed plugins to newer versions</p> <pre><code>trivy plugin upgrade [PLUGIN_NAMES]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_upgrade/#options","title":"Options","text":"<pre><code>  -h, --help   help for upgrade\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_upgrade/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_plugin_upgrade/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy plugin    - Manage plugins</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_registry/","title":"Registry","text":""},{"location":"docs/references/configuration/cli/trivy_registry/#trivy-registry","title":"trivy registry","text":"<p>Manage registry authentication</p>"},{"location":"docs/references/configuration/cli/trivy_registry/#options","title":"Options","text":"<pre><code>  -h, --help   help for registry\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> <li>trivy registry login    - Log in to a registry</li> <li>trivy registry logout  - Log out of a registry</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_registry_login/","title":"Registry Login","text":""},{"location":"docs/references/configuration/cli/trivy_registry_login/#trivy-registry-login","title":"trivy registry login","text":"<p>Log in to a registry</p> <pre><code>trivy registry login SERVER [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_login/#examples","title":"Examples","text":"<pre><code>  # Log in to reg.example.com\n  cat ~/my_password.txt | trivy registry login --username foo --password-stdin reg.example.com\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_login/#options","title":"Options","text":"<pre><code>  -h, --help               help for login\n      --password strings   password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin     password from stdin. Comma-separated passwords are not supported.\n      --username strings   username. Comma-separated usernames allowed.\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_login/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_login/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy registry    - Manage registry authentication</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_registry_logout/","title":"Registry Logout","text":""},{"location":"docs/references/configuration/cli/trivy_registry_logout/#trivy-registry-logout","title":"trivy registry logout","text":"<p>Log out of a registry</p> <pre><code>trivy registry logout SERVER [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_logout/#examples","title":"Examples","text":"<pre><code>  # Log out of reg.example.com\n  trivy registry logout reg.example.com\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_logout/#options","title":"Options","text":"<pre><code>  -h, --help   help for logout\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_logout/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_registry_logout/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy registry    - Manage registry authentication</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_repository/","title":"Repository","text":""},{"location":"docs/references/configuration/cli/trivy_repository/#trivy-repository","title":"trivy repository","text":"<p>Scan a repository</p> <pre><code>trivy repository [flags] (REPO_PATH | REPO_URL)\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_repository/#examples","title":"Examples","text":"<pre><code>  # Scan your remote git repository\n  $ trivy repo https://github.com/knqyf263/trivy-ci-test\n  # Scan your local git repository\n  $ trivy repo /path/to/your/repository\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_repository/#options","title":"Options","text":"<pre><code>      --branch string                     pass the branch name to be scanned\n      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"fs\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --cf-params strings                 specify paths to override the CloudFormation parameters files\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --commit string                     pass the commit hash to be scanned\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --custom-headers strings            custom headers in client mode\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for repository\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignored-licenses strings          specify a list of license to ignore\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --include-deprecated-checks         include deprecated checks\n      --include-dev-deps                  include development dependencies in the report (supported: npm, yarn, gradle)\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --license-confidence-level float    specify license classifier's confidence level (default 0.9)\n      --license-full                      eagerly look for licenses in source code headers and license files\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress                       suppress progress bar\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n      --server string                     server address in client mode\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-check-update                 skip fetching rego check updates\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n      --tag string                        pass the tag name to be scanned\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --tf-vars strings                   specify paths to override the Terraform tfvars files\n      --token string                      for authentication in client/server mode\n      --token-header string               specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_repository/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_repository/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_rootfs/","title":"Rootfs","text":""},{"location":"docs/references/configuration/cli/trivy_rootfs/#trivy-rootfs","title":"trivy rootfs","text":"<p>Scan rootfs</p> <pre><code>trivy rootfs [flags] ROOTDIR\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_rootfs/#examples","title":"Examples","text":"<pre><code>  # Scan unpacked filesystem\n  $ docker export $(docker create alpine:3.10.2) | tar -C /tmp/rootfs -xvf -\n  $ trivy rootfs /tmp/rootfs\n\n  # Scan from inside a container\n  $ docker run --rm -it alpine:3.11\n  / # curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n  / # trivy rootfs /\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_rootfs/#options","title":"Options","text":"<pre><code>      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"memory\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --cf-params strings                 specify paths to override the CloudFormation parameters files\n      --check-namespaces strings          Rego namespaces\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --config-check strings              specify the paths to the Rego check files or to the directories containing them, applying config files\n      --config-data strings               specify paths from which data for the Rego checks will be recursively loaded\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --custom-headers strings            custom headers in client mode\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --distro string                     [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --exit-on-eol int                   exit with the specified code when the OS reaches end of service/life\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for rootfs\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignored-licenses strings          specify a list of license to ignore\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --include-deprecated-checks         include deprecated checks\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --license-confidence-level float    specify license classifier's confidence level (default 0.9)\n      --license-full                      eagerly look for licenses in source code headers and license files\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress                       suppress progress bar\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --password strings                  password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                    password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string             registry token\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n      --server string                     server address in client mode\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-check-update                 skip fetching rego check updates\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --tf-vars strings                   specify paths to override the Terraform tfvars files\n      --token string                      for authentication in client/server mode\n      --token-header string               specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --trace-rego                        enable more verbose trace output for custom queries\n      --username strings                  username. Comma-separated usernames allowed.\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_rootfs/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_rootfs/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_sbom/","title":"SBOM","text":""},{"location":"docs/references/configuration/cli/trivy_sbom/#trivy-sbom","title":"trivy sbom","text":"<p>Scan SBOM for vulnerabilities and licenses</p> <pre><code>trivy sbom [flags] SBOM_PATH\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_sbom/#examples","title":"Examples","text":"<pre><code>  # Scan CycloneDX and show the result in tables\n  $ trivy sbom /path/to/report.cdx\n\n  # Scan CycloneDX-type attestation and show the result in tables\n  $ trivy sbom /path/to/report.cdx.intoto.jsonl\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_sbom/#options","title":"Options","text":"<pre><code>      --cache-backend string           [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"memory\")\n      --cache-ttl duration             cache TTL when using redis as cache backend\n      --compliance string              compliance report to generate\n      --custom-headers strings         custom headers in client mode\n      --db-repository strings          OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --detection-priority string      specify the detection priority:\n                                         - \"precise\": Prioritizes precise by minimizing false positives.\n                                         - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                        (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry              disable sending anonymous usage data to Aqua\n      --distro string                  [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --download-db-only               download/update vulnerability database but don't run a scan\n      --download-java-db-only          download/update Java index database but don't run a scan\n      --exit-code int                  specify exit code when any security issues are found\n      --exit-on-eol int                exit with the specified code when the OS reaches end of service/life\n      --file-patterns strings          specify config file patterns\n  -f, --format string                  format\n                                       Allowed values:\n                                         - table\n                                         - json\n                                         - template\n                                         - sarif\n                                         - cyclonedx\n                                         - spdx\n                                         - spdx-json\n                                         - github\n                                         - cosign-vuln\n                                        (default \"table\")\n  -h, --help                           help for sbom\n      --ignore-policy string           specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings          comma-separated list of vulnerability status to ignore\n                                       Allowed values:\n                                         - unknown\n                                         - not_affected\n                                         - affected\n                                         - fixed\n                                         - under_investigation\n                                         - will_not_fix\n                                         - fix_deferred\n                                         - end_of_life\n      --ignore-unfixed                 display only fixed vulnerabilities\n      --ignored-licenses strings       specify a list of license to ignore\n      --ignorefile string              specify .trivyignore file (default \".trivyignore\")\n      --java-db-repository strings     OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --list-all-pkgs                  output all packages in the JSON report regardless of vulnerability\n      --no-progress                    suppress progress bar\n      --offline-scan                   do not issue API requests to identify dependencies\n  -o, --output string                  output file name\n      --output-plugin-arg string       [EXPERIMENTAL] output plugin arguments\n      --password strings               password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin                 password from stdin. Comma-separated passwords are not supported.\n      --pkg-relationships strings      list of package relationships\n                                       Allowed values:\n                                         - unknown\n                                         - root\n                                         - workspace\n                                         - direct\n                                         - indirect\n                                        (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings              list of package types (allowed values: os,library) (default [os,library])\n      --redis-ca string                redis ca file location, if using redis as cache backend\n      --redis-cert string              redis certificate file location, if using redis as cache backend\n      --redis-key string               redis key file location, if using redis as cache backend\n      --redis-tls                      enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string          registry token\n      --rekor-url string               [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --sbom-sources strings           [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings               comma-separated list of what security issues to detect (allowed values: vuln,license) (default [vuln])\n      --server string                  server address in client mode\n  -s, --severity strings               severities of security issues to be displayed\n                                       Allowed values:\n                                         - UNKNOWN\n                                         - LOW\n                                         - MEDIUM\n                                         - HIGH\n                                         - CRITICAL\n                                        (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-db-update                 skip updating vulnerability database\n      --skip-java-db-update            skip updating Java index database\n      --skip-version-check             suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update           [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings             [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                output template\n      --token string                   for authentication in client/server mode\n      --token-header string            specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --username strings               username. Comma-separated usernames allowed.\n      --vex strings                    [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings   order of data sources for selecting vulnerability severity level\n                                       Allowed values:\n                                         - nvd\n                                         - redhat\n                                         - redhat-oval\n                                         - debian\n                                         - ubuntu\n                                         - alpine\n                                         - amazon\n                                         - oracle-oval\n                                         - suse-cvrf\n                                         - photon\n                                         - arch-linux\n                                         - alma\n                                         - rocky\n                                         - cbl-mariner\n                                         - azure\n                                         - ruby-advisory-db\n                                         - php-security-advisories\n                                         - nodejs-security-wg\n                                         - ghsa\n                                         - glad\n                                         - aqua\n                                         - osv\n                                         - k8s\n                                         - wolfi\n                                         - chainguard\n                                         - bitnami\n                                         - govulndb\n                                         - echo\n                                         - minimos\n                                         - rootio\n                                         - auto\n                                        (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_sbom/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_sbom/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_server/","title":"Server","text":""},{"location":"docs/references/configuration/cli/trivy_server/#trivy-server","title":"trivy server","text":"<p>Server mode</p> <pre><code>trivy server [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_server/#examples","title":"Examples","text":"<pre><code>  # Run a server\n  $ trivy server\n\n  # Listen on 0.0.0.0:10000\n  $ trivy server --listen 0.0.0.0:10000\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_server/#options","title":"Options","text":"<pre><code>      --cache-backend string     [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"fs\")\n      --cache-ttl duration       cache TTL when using redis as cache backend\n      --db-repository strings    OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --download-db-only         download/update vulnerability database but don't run a scan\n      --enable-modules strings   [EXPERIMENTAL] module names to enable\n  -h, --help                     help for server\n      --listen string            listen address in server mode (default \"localhost:4954\")\n      --module-dir string        specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress              suppress progress bar\n      --password strings         password. Comma-separated passwords allowed. TRIVY_PASSWORD should be used for security reasons.\n      --password-stdin           password from stdin. Comma-separated passwords are not supported.\n      --redis-ca string          redis ca file location, if using redis as cache backend\n      --redis-cert string        redis certificate file location, if using redis as cache backend\n      --redis-key string         redis key file location, if using redis as cache backend\n      --redis-tls                enable redis TLS with public certificates, if using redis as cache backend\n      --registry-token string    registry token\n      --skip-db-update           skip updating vulnerability database\n      --token string             for authentication in client/server mode\n      --token-header string      specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --username strings         username. Comma-separated usernames allowed.\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_server/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_server/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_version/","title":"Version","text":""},{"location":"docs/references/configuration/cli/trivy_version/#trivy-version","title":"trivy version","text":"<p>Print the version</p> <pre><code>trivy version [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_version/#options","title":"Options","text":"<pre><code>  -f, --format string   version format (json)\n  -h, --help            help for version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_version/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vex/","title":"VEX","text":""},{"location":"docs/references/configuration/cli/trivy_vex/#trivy-vex","title":"trivy vex","text":"<p>[EXPERIMENTAL] VEX utilities</p>"},{"location":"docs/references/configuration/cli/trivy_vex/#options","title":"Options","text":"<pre><code>  -h, --help   help for vex\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> <li>trivy vex repo    - Manage VEX repositories</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vex_repo/","title":"VEX Repo","text":""},{"location":"docs/references/configuration/cli/trivy_vex_repo/#trivy-vex-repo","title":"trivy vex repo","text":"<p>Manage VEX repositories</p>"},{"location":"docs/references/configuration/cli/trivy_vex_repo/#examples","title":"Examples","text":"<pre><code>  # Initialize the configuration file\n  $ trivy vex repo init\n\n  # List VEX repositories\n  $ trivy vex repo list\n\n  # Download the VEX repositories\n  $ trivy vex repo download\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo/#options","title":"Options","text":"<pre><code>  -h, --help   help for repo\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy vex  - [EXPERIMENTAL] VEX utilities</li> <li>trivy vex repo download  - Download the VEX repositories</li> <li>trivy vex repo init  - Initialize a configuration file</li> <li>trivy vex repo list  - List VEX repositories</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/","title":"VEX Download","text":""},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/#trivy-vex-repo-download","title":"trivy vex repo download","text":"<p>Download the VEX repositories</p>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/#synopsis","title":"Synopsis","text":"<p>Downloads enabled VEX repositories. If specific repository names are provided as arguments, only those repositories will be downloaded. Otherwise, all enabled repositories are downloaded.</p> <pre><code>trivy vex repo download [REPO_NAMES] [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/#options","title":"Options","text":"<pre><code>  -h, --help   help for download\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_download/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy vex repo    - Manage VEX repositories</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_init/","title":"VEX Init","text":""},{"location":"docs/references/configuration/cli/trivy_vex_repo_init/#trivy-vex-repo-init","title":"trivy vex repo init","text":"<p>Initialize a configuration file</p> <pre><code>trivy vex repo init [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_init/#options","title":"Options","text":"<pre><code>  -h, --help   help for init\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_init/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_init/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy vex repo    - Manage VEX repositories</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_list/","title":"VEX List","text":""},{"location":"docs/references/configuration/cli/trivy_vex_repo_list/#trivy-vex-repo-list","title":"trivy vex repo list","text":"<p>List VEX repositories</p> <pre><code>trivy vex repo list [flags]\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vex_repo_list/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy vex repo    - Manage VEX repositories</li> </ul>"},{"location":"docs/references/configuration/cli/trivy_vm/","title":"VM","text":""},{"location":"docs/references/configuration/cli/trivy_vm/#trivy-vm","title":"trivy vm","text":"<p>[EXPERIMENTAL] Scan a virtual machine image</p> <pre><code>trivy vm [flags] VM_IMAGE\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vm/#examples","title":"Examples","text":"<pre><code>  # Scan your AWS AMI\n  $ trivy vm --scanners vuln ami:${your_ami_id}\n\n  # Scan your AWS EBS snapshot\n  $ trivy vm ebs:${your_ebs_snapshot_id}\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vm/#options","title":"Options","text":"<pre><code>      --aws-region string                 AWS region to scan\n      --cache-backend string              [EXPERIMENTAL] cache backend (e.g. redis://localhost:6379) (default \"fs\")\n      --cache-ttl duration                cache TTL when using redis as cache backend\n      --checks-bundle-repository string   OCI registry URL to retrieve checks bundle from (default \"mirror.gcr.io/aquasec/trivy-checks:1\")\n      --compliance string                 compliance report to generate\n      --config-file-schemas strings       specify paths to JSON configuration file schemas to determine that a file matches some configuration and pass the schema to Rego checks for type checking\n      --custom-headers strings            custom headers in client mode\n      --db-repository strings             OCI repository(ies) to retrieve trivy-db in order of priority (default [mirror.gcr.io/aquasec/trivy-db:2,ghcr.io/aquasecurity/trivy-db:2])\n      --dependency-tree                   [EXPERIMENTAL] show dependency origin tree of vulnerable packages\n      --detection-priority string         specify the detection priority:\n                                            - \"precise\": Prioritizes precise by minimizing false positives.\n                                            - \"comprehensive\": Aims to detect more security findings at the cost of potential false positives.\n                                           (allowed values: precise,comprehensive) (default \"precise\")\n      --disable-telemetry                 disable sending anonymous usage data to Aqua\n      --distro string                     [EXPERIMENTAL] specify a distribution, &lt;family&gt;/&lt;version&gt;\n      --download-db-only                  download/update vulnerability database but don't run a scan\n      --download-java-db-only             download/update Java index database but don't run a scan\n      --enable-modules strings            [EXPERIMENTAL] module names to enable\n      --exit-code int                     specify exit code when any security issues are found\n      --exit-on-eol int                   exit with the specified code when the OS reaches end of service/life\n      --file-patterns strings             specify config file patterns\n  -f, --format string                     format\n                                          Allowed values:\n                                            - table\n                                            - json\n                                            - template\n                                            - sarif\n                                            - cyclonedx\n                                            - spdx\n                                            - spdx-json\n                                            - github\n                                            - cosign-vuln\n                                           (default \"table\")\n      --helm-api-versions strings         Available API versions used for Capabilities.APIVersions. This flag is the same as the api-versions flag of the helm template command. (can specify multiple or separate values with commas: policy/v1/PodDisruptionBudget,apps/v1/Deployment)\n      --helm-kube-version string          Kubernetes version used for Capabilities.KubeVersion. This flag is the same as the kube-version flag of the helm template command.\n      --helm-set strings                  specify Helm values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-set-file strings             specify Helm values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)\n      --helm-set-string strings           specify Helm string values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)\n      --helm-values strings               specify paths to override the Helm values.yaml files\n  -h, --help                              help for vm\n      --ignore-policy string              specify the Rego file path to evaluate each vulnerability\n      --ignore-status strings             comma-separated list of vulnerability status to ignore\n                                          Allowed values:\n                                            - unknown\n                                            - not_affected\n                                            - affected\n                                            - fixed\n                                            - under_investigation\n                                            - will_not_fix\n                                            - fix_deferred\n                                            - end_of_life\n      --ignore-unfixed                    display only fixed vulnerabilities\n      --ignorefile string                 specify .trivyignore file (default \".trivyignore\")\n      --include-non-failures              include successes, available with '--scanners misconfig'\n      --java-db-repository strings        OCI repository(ies) to retrieve trivy-java-db in order of priority (default [mirror.gcr.io/aquasec/trivy-java-db:1,ghcr.io/aquasecurity/trivy-java-db:1])\n      --list-all-pkgs                     output all packages in the JSON report regardless of vulnerability\n      --misconfig-scanners strings        comma-separated list of misconfig scanners to use for misconfiguration scanning (default [azure-arm,cloudformation,dockerfile,helm,kubernetes,terraform,terraformplan-json,terraformplan-snapshot])\n      --module-dir string                 specify directory to the wasm modules that will be loaded (default \"$HOME/.trivy/modules\")\n      --no-progress                       suppress progress bar\n      --offline-scan                      do not issue API requests to identify dependencies\n  -o, --output string                     output file name\n      --output-plugin-arg string          [EXPERIMENTAL] output plugin arguments\n      --parallel int                      number of goroutines enabled for parallel scanning, set 0 to auto-detect parallelism (default 5)\n      --pkg-relationships strings         list of package relationships\n                                          Allowed values:\n                                            - unknown\n                                            - root\n                                            - workspace\n                                            - direct\n                                            - indirect\n                                           (default [unknown,root,workspace,direct,indirect])\n      --pkg-types strings                 list of package types (allowed values: os,library) (default [os,library])\n      --raw-config-scanners strings       specify the types of scanners that will also scan raw configurations. For example, scanners will scan a non-adapted configuration into a shared state (allowed values: terraform)\n      --redis-ca string                   redis ca file location, if using redis as cache backend\n      --redis-cert string                 redis certificate file location, if using redis as cache backend\n      --redis-key string                  redis key file location, if using redis as cache backend\n      --redis-tls                         enable redis TLS with public certificates, if using redis as cache backend\n      --rekor-url string                  [EXPERIMENTAL] address of rekor STL server (default \"https://rekor.sigstore.dev\")\n      --render-cause strings              specify configuration types for which the rendered causes will be shown in the table report (allowed values: terraform)\n      --sbom-sources strings              [EXPERIMENTAL] try to retrieve SBOM from the specified sources (allowed values: oci,rekor)\n      --scanners strings                  comma-separated list of what security issues to detect (allowed values: vuln,misconfig,secret,license) (default [vuln,secret])\n      --secret-config string              specify a path to config file for secret scanning (default \"trivy-secret.yaml\")\n      --server string                     server address in client mode\n  -s, --severity strings                  severities of security issues to be displayed\n                                          Allowed values:\n                                            - UNKNOWN\n                                            - LOW\n                                            - MEDIUM\n                                            - HIGH\n                                            - CRITICAL\n                                           (default [UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL])\n      --show-suppressed                   [EXPERIMENTAL] show suppressed vulnerabilities\n      --skip-db-update                    skip updating vulnerability database\n      --skip-dirs strings                 specify the directories or glob patterns to skip\n      --skip-files strings                specify the files or glob patterns to skip\n      --skip-java-db-update               skip updating Java index database\n      --skip-version-check                suppress notices about version updates and Trivy announcements\n      --skip-vex-repo-update              [EXPERIMENTAL] Skip VEX Repository update\n      --table-mode strings                [EXPERIMENTAL] tables that will be displayed in 'table' format (allowed values: summary,detailed) (default [summary,detailed])\n  -t, --template string                   output template\n      --tf-exclude-downloaded-modules     exclude misconfigurations for downloaded terraform modules\n      --token string                      for authentication in client/server mode\n      --token-header string               specify a header name for token in client/server mode (default \"Trivy-Token\")\n      --vex strings                       [EXPERIMENTAL] VEX sources (\"repo\", \"oci\" or file path)\n      --vuln-severity-source strings      order of data sources for selecting vulnerability severity level\n                                          Allowed values:\n                                            - nvd\n                                            - redhat\n                                            - redhat-oval\n                                            - debian\n                                            - ubuntu\n                                            - alpine\n                                            - amazon\n                                            - oracle-oval\n                                            - suse-cvrf\n                                            - photon\n                                            - arch-linux\n                                            - alma\n                                            - rocky\n                                            - cbl-mariner\n                                            - azure\n                                            - ruby-advisory-db\n                                            - php-security-advisories\n                                            - nodejs-security-wg\n                                            - ghsa\n                                            - glad\n                                            - aqua\n                                            - osv\n                                            - k8s\n                                            - wolfi\n                                            - chainguard\n                                            - bitnami\n                                            - govulndb\n                                            - echo\n                                            - minimos\n                                            - rootio\n                                            - auto\n                                           (default [auto])\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vm/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --cache-dir string          cache directory (default \"/path/to/cache\")\n  -c, --config string             config path (default \"trivy.yaml\")\n  -d, --debug                     debug mode\n      --generate-default-config   write the default config to trivy-default.yaml\n      --insecure                  allow insecure server connections\n  -q, --quiet                     suppress progress bar and log output\n      --timeout duration          timeout (default 5m0s)\n  -v, --version                   show version\n</code></pre>"},{"location":"docs/references/configuration/cli/trivy_vm/#see-also","title":"SEE ALSO","text":"<ul> <li>trivy  - Unified security scanner</li> </ul>"},{"location":"docs/references/modes/client-server/","title":"Client/Server","text":"<p>Trivy has client/server mode. Trivy server has vulnerability database and Trivy client doesn't have to download vulnerability database. It is useful if you want to scan images or files at multiple locations and do not want to download the database at every location.</p> Client/Server Mode Image Rootfs Filesystem Repository Config K8s Supported \u2705 \u2705 \u2705 \u2705 - - <p>Some scanners run on the client side, even in client/server mode.</p> Scanner Run on Client or Server Vulnerability Server Misconfiguration Client<sup>1</sup> Secret Client<sup>2</sup> License Server <p>Note</p> <p>Scanning of misconfigurations and licenses is performed on the client side (as in standalone mode). Otherwise, the client would need to send files to the server that may contain sensitive information.</p>"},{"location":"docs/references/modes/client-server/#server","title":"Server","text":"<p>At first, you need to launch Trivy server. It downloads vulnerability database automatically and continue to fetch the latest DB in the background. <pre><code>$ trivy server --listen localhost:8080\n2019-12-12T15:17:06.551+0200    INFO    Need to update DB\n2019-12-12T15:17:56.706+0200    INFO    Reopening DB...\n2019-12-12T15:17:56.707+0200    INFO    Listening localhost:8080...\n</code></pre></p> <p>If you want to accept a connection from outside, you have to specify <code>0.0.0.0</code> or your ip address, not <code>localhost</code>.</p> <pre><code>$ trivy server --listen 0.0.0.0:8080\n</code></pre>"},{"location":"docs/references/modes/client-server/#remote-image-scan","title":"Remote image scan","text":"<p>Then, specify the server address for <code>image</code> command. <pre><code>$ trivy image --server http://localhost:8080 alpine:3.10\n</code></pre> Note: It's important to specify the protocol (http or https).</p> Result <pre><code>alpine:3.10 (alpine 3.10.2)\n===========================\nTotal: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 2, HIGH: 0, CRITICAL: 0)\n\n+---------+------------------+----------+-------------------+---------------+\n| LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |\n+---------+------------------+----------+-------------------+---------------+\n| openssl | CVE-2019-1549    | MEDIUM   | 1.1.1c-r0         | 1.1.1d-r0     |\n+         +------------------+          +                   +               +\n|         | CVE-2019-1563    |          |                   |               |\n+         +------------------+----------+                   +               +\n|         | CVE-2019-1547    | LOW      |                   |               |\n+---------+------------------+----------+-------------------+---------------+\n</code></pre>"},{"location":"docs/references/modes/client-server/#remote-scan-of-local-filesystem","title":"Remote scan of local filesystem","text":"<p>Also, there is a way to scan local file system: <pre><code>$ trivy fs --server http://localhost:8080 --severity CRITICAL ./integration/testdata/fixtures/fs/pom/\n</code></pre> Note: It's important to specify the protocol (http or https).</p> Result <pre><code>pom.xml (pom)\n=============\nTotal: 24 (CRITICAL: 24)\n\n+---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+\n|                   LIBRARY                   | VULNERABILITY ID | SEVERITY | INSTALLED VERSION |         FIXED VERSION          |                 TITLE                 |\n+---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+\n| com.fasterxml.jackson.core:jackson-databind | CVE-2017-17485   | CRITICAL | 2.9.1             | 2.8.11, 2.9.4                  | jackson-databind: Unsafe              |\n|                                             |                  |          |                   |                                | deserialization due to                |\n|                                             |                  |          |                   |                                | incomplete black list (incomplete     |\n|                                             |                  |          |                   |                                | fix for CVE-2017-15095)...            |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2017-17485 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2018-11307   |          |                   | 2.7.9.4, 2.8.11.2, 2.9.6       | jackson-databind: Potential           |\n|                                             |                  |          |                   |                                | information exfiltration with         |\n|                                             |                  |          |                   |                                | default typing, serialization         |\n|                                             |                  |          |                   |                                | gadget from MyBatis                   |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-11307 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2018-14718   |          |                   | 2.6.7.2, 2.9.7                 | jackson-databind: arbitrary code      |\n|                                             |                  |          |                   |                                | execution in slf4j-ext class          |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-14718 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2018-14719   |          |                   |                                | jackson-databind: arbitrary           |\n|                                             |                  |          |                   |                                | code execution in blaze-ds-opt        |\n|                                             |                  |          |                   |                                | and blaze-ds-core classes             |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-14719 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2018-14720   |          |                   |                                | jackson-databind: exfiltration/XXE    |\n|                                             |                  |          |                   |                                | in some JDK classes                   |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-14720 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2018-14721   |          |                   |                                | jackson-databind: server-side request |\n|                                             |                  |          |                   |                                | forgery (SSRF) in axis2-jaxws class   |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-14721 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2018-19360   |          |                   | 2.6.7.3, 2.7.9.5, 2.8.11.3,    | jackson-databind: improper            |\n|                                             |                  |          |                   | 2.9.8                          | polymorphic deserialization           |\n|                                             |                  |          |                   |                                | in axis2-transport-jms class          |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-19360 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2018-19361   |          |                   |                                | jackson-databind: improper            |\n|                                             |                  |          |                   |                                | polymorphic deserialization           |\n|                                             |                  |          |                   |                                | in openjpa class                      |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-19361 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2018-19362   |          |                   |                                | jackson-databind: improper            |\n|                                             |                  |          |                   |                                | polymorphic deserialization           |\n|                                             |                  |          |                   |                                | in jboss-common-core class            |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-19362 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2018-7489    |          |                   | 2.7.9.3, 2.8.11.1, 2.9.5       | jackson-databind: incomplete fix      |\n|                                             |                  |          |                   |                                | for CVE-2017-7525 permits unsafe      |\n|                                             |                  |          |                   |                                | serialization via c3p0 libraries      |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2018-7489  |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-14379   |          |                   | 2.7.9.6, 2.8.11.4, 2.9.9.2     | jackson-databind: default             |\n|                                             |                  |          |                   |                                | typing mishandling leading            |\n|                                             |                  |          |                   |                                | to remote code execution              |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-14379 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-14540   |          |                   | 2.9.10                         | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | com.zaxxer.hikari.HikariConfig        |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-14540 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-14892   |          |                   | 2.6.7.3, 2.8.11.5, 2.9.10      | jackson-databind: Serialization       |\n|                                             |                  |          |                   |                                | gadgets in classes of the             |\n|                                             |                  |          |                   |                                | commons-configuration package         |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-14892 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-14893   |          |                   | 2.8.11.5, 2.9.10               | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | classes of the xalan package          |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-14893 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-16335   |          |                   | 2.9.10                         | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | com.zaxxer.hikari.HikariDataSource    |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-16335 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-16942   |          |                   | 2.9.10.1                       | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | org.apache.commons.dbcp.datasources.* |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-16942 |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2019-16943   |          |                   |                                | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | com.p6spy.engine.spy.P6DataSource     |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-16943 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-17267   |          |                   | 2.9.10                         | jackson-databind: Serialization       |\n|                                             |                  |          |                   |                                | gadgets in classes of                 |\n|                                             |                  |          |                   |                                | the ehcache package                   |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-17267 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-17531   |          |                   | 2.9.10.1                       | jackson-databind:                     |\n|                                             |                  |          |                   |                                | Serialization gadgets in              |\n|                                             |                  |          |                   |                                | org.apache.log4j.receivers.db.*       |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-17531 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2019-20330   |          |                   | 2.8.11.5, 2.9.10.2             | jackson-databind: lacks               |\n|                                             |                  |          |                   |                                | certain net.sf.ehcache blocking       |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2019-20330 |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2020-8840    |          |                   | 2.7.9.7, 2.8.11.5, 2.9.10.3    | jackson-databind: Lacks certain       |\n|                                             |                  |          |                   |                                | xbean-reflect/JNDI blocking           |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2020-8840  |\n+                                             +------------------+          +                   +--------------------------------+---------------------------------------+\n|                                             | CVE-2020-9546    |          |                   | 2.7.9.7, 2.8.11.6, 2.9.10.4    | jackson-databind: Serialization       |\n|                                             |                  |          |                   |                                | gadgets in shaded-hikari-config       |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2020-9546  |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2020-9547    |          |                   |                                | jackson-databind: Serialization       |\n|                                             |                  |          |                   |                                | gadgets in ibatis-sqlmap              |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2020-9547  |\n+                                             +------------------+          +                   +                                +---------------------------------------+\n|                                             | CVE-2020-9548    |          |                   |                                | jackson-databind: Serialization       |\n|                                             |                  |          |                   |                                | gadgets in anteros-core               |\n|                                             |                  |          |                   |                                | --&gt;avd.aquasec.com/nvd/cve-2020-9548  |\n+---------------------------------------------+------------------+----------+-------------------+--------------------------------+---------------------------------------+\n</code></pre>"},{"location":"docs/references/modes/client-server/#remote-scan-of-root-filesystem","title":"Remote scan of root filesystem","text":"<p>Also, there is a way to scan root file system: <pre><code>$ trivy rootfs --server http://localhost:8080 --severity CRITICAL /tmp/rootfs\n</code></pre> Note: It's important to specify the protocol (http or https).</p> Result <pre><code>/tmp/rootfs (alpine 3.10.2)\n\nTotal: 1 (CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library  \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                            Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 apk-tools \u2502 CVE-2021-36159 \u2502 CRITICAL \u2502 2.10.4-r2         \u2502 2.10.7-r0     \u2502 libfetch before 2021-07-26, as used in apk-tools, xbps, and \u2502\n\u2502           \u2502                \u2502          \u2502                   \u2502               \u2502 other products, mishandles...                               \u2502\n\u2502           \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2021-36159                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/references/modes/client-server/#remote-scan-of-git-repository","title":"Remote scan of git repository","text":"<p>Also, there is a way to scan remote git repository: <pre><code>$ trivy repo https://github.com/knqyf263/trivy-ci-test --server http://localhost:8080 \n</code></pre> Note: It's important to specify the protocol (http or https).</p> Result <pre><code>Cargo.lock (cargo)\n==================\nTotal: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library  \u2502    Vulnerability    \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                            Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ammonia   \u2502 CVE-2019-15542      \u2502 HIGH     \u2502 1.9.0             \u2502 2.1.0         \u2502 Uncontrolled recursion in ammonia                           \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2019-15542                  \u2502\n\u2502           \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502 CVE-2021-38193      \u2502 MEDIUM   \u2502                   \u2502 2.1.3, 3.1.0  \u2502 An issue was discovered in the ammonia crate before 3.1.0   \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 for Rust....                                                \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2021-38193                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 smallvec  \u2502 CVE-2019-15551      \u2502          \u2502 0.6.9             \u2502 0.6.10        \u2502 An issue was discovered in the smallvec crate before 0.6.10 \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 for Rust....                                                \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2019-15551                  \u2502\n\u2502           \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502 CVE-2018-25023      \u2502 HIGH     \u2502                   \u2502 0.6.13        \u2502 An issue was discovered in the smallvec crate before 0.6.13 \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 for Rust....                                                \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2018-25023                  \u2502\n\u2502           \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u2502               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502           \u2502 GHSA-66p5-j55p-32r9 \u2502 MEDIUM   \u2502                   \u2502               \u2502 smallvec creates uninitialized value of any type            \u2502\n\u2502           \u2502                     \u2502          \u2502                   \u2502               \u2502 https://github.com/advisories/GHSA-66p5-j55p-32r9           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nPipfile.lock (pipenv)\n=====================\nTotal: 8 (UNKNOWN: 0, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Library       \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502     Fixed Version      \u2502                            Title                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 celery              \u2502 CVE-2021-23727 \u2502 HIGH     \u2502 4.3.0             \u2502 5.2.2                  \u2502 celery: stored command injection vulnerability may allow     \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 privileges escalation                                        \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2021-23727                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 django              \u2502 CVE-2019-6975  \u2502          \u2502 2.0.9             \u2502 1.11.19, 2.0.12, 2.1.7 \u2502 python-django: memory exhaustion in                          \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 django.utils.numberformat.format()                           \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2019-6975                    \u2502\n\u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     \u2502 CVE-2019-3498  \u2502 MEDIUM   \u2502                   \u2502 1.11.18, 2.0.10, 2.1.5 \u2502 python-django: Content spoofing via URL path in default 404  \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 page                                                         \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2019-3498                    \u2502\n\u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     \u2502 CVE-2021-33203 \u2502          \u2502                   \u2502 2.2.24, 3.1.12, 3.2.4  \u2502 django: Potential directory traversal via ``admindocs``      \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2021-33203                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 urllib3             \u2502 CVE-2019-11324 \u2502          \u2502 1.24.1            \u2502 1.24.2                 \u2502 python-urllib3: Certification mishandle when error should be \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 thrown                                                       \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2019-11324                   \u2502\n\u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     \u2502 CVE-2021-33503 \u2502          \u2502                   \u2502 1.26.5                 \u2502 python-urllib3: ReDoS in the parsing of authority part of    \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 URL                                                          \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2021-33503                   \u2502\n\u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     \u2502 CVE-2019-11236 \u2502 MEDIUM   \u2502                   \u2502 1.24.3                 \u2502 python-urllib3: CRLF injection due to not encoding the       \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 '\\r\\n' sequence leading to...                                \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2019-11236                   \u2502\n\u2502                     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                     \u2502 CVE-2020-26137 \u2502          \u2502                   \u2502 1.25.9                 \u2502 python-urllib3: CRLF injection via HTTP request method       \u2502\n\u2502                     \u2502                \u2502          \u2502                   \u2502                        \u2502 https://avd.aquasec.com/nvd/cve-2020-26137                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/references/modes/client-server/#authentication","title":"Authentication","text":"<pre><code>$ trivy server --listen localhost:8080 --token dummy\n</code></pre> <pre><code>$ trivy image --server http://localhost:8080 --token dummy alpine:3.10\n</code></pre>"},{"location":"docs/references/modes/client-server/#endpoints","title":"Endpoints","text":""},{"location":"docs/references/modes/client-server/#health","title":"Health","text":"<p>Checks whether the Trivy server is running. Authentication is not required.</p> <p>Example request: <pre><code>curl -s 0.0.0.0:8080/healthz\nok\n</code></pre></p> <p>Returns the <code>200 OK</code> status if the request was successful.</p>"},{"location":"docs/references/modes/client-server/#version","title":"Version","text":"<p>Returns the version of the Trivy and all components (db, policy). Authentication is not required.</p> <p>Example request: <pre><code>curl -s 0.0.0.0:8080/version | jq\n{\n  \"Version\": \"dev\",\n  \"VulnerabilityDB\": {\n    \"Version\": 2,\n    \"NextUpdate\": \"2023-07-25T14:15:29.876639806Z\",\n    \"UpdatedAt\": \"2023-07-25T08:15:29.876640206Z\",\n    \"DownloadedAt\": \"2023-07-25T09:36:25.599004Z\"\n  },\n  \"JavaDB\": {\n    \"Version\": 1,\n    \"NextUpdate\": \"2023-07-28T01:03:52.169192565Z\",\n    \"UpdatedAt\": \"2023-07-25T01:03:52.169192765Z\",\n    \"DownloadedAt\": \"2023-07-25T09:37:48.906152Z\"\n  },\n  \"PolicyBundle\": {\n    \"Digest\": \"sha256:829832357626da2677955e3b427191212978ba20012b6eaa03229ca28569ae43\",\n    \"DownloadedAt\": \"2023-07-23T11:40:33.122462Z\"\n  }\n}\n</code></pre></p> <p>Returns the <code>200 OK</code> status if the request was successful.</p>"},{"location":"docs/references/modes/client-server/#architecture","title":"Architecture","text":"<ol> <li> <p>The checks bundle is also downloaded on the client side.\u00a0\u21a9</p> </li> <li> <p>The scan result with masked secrets is sent to the server\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/references/modes/standalone/","title":"Standalone","text":"<p><code>trivy image</code>, <code>trivy filesystem</code>, and <code>trivy repo</code> works as standalone mode.</p>"},{"location":"docs/references/modes/standalone/#image","title":"Image","text":""},{"location":"docs/references/modes/standalone/#filesystem","title":"Filesystem","text":""},{"location":"docs/references/modes/standalone/#git-repository","title":"Git Repository","text":""},{"location":"docs/scanner/license/","title":"License Scanning","text":"<p>Trivy scans any container image for license files and offers an opinionated view on the risk associated with the license.</p> <p>License are classified using the Google License Classification -</p> <ul> <li>Forbidden</li> <li>Restricted </li> <li>Reciprocal</li> <li>Notice</li> <li>Permissive</li> <li>Unencumbered</li> <li>Unknown</li> </ul> <p>Tip</p> <p>Licenses that Trivy fails to recognize are classified as UNKNOWN. As those licenses may be in violation, it is recommended to check those unknown licenses as well.    </p> <p>By default, Trivy scans licenses for packages installed by <code>apk</code>, <code>apt-get</code>, <code>dnf</code>, <code>npm</code>, <code>pip</code>, <code>gem</code>, etc. Check out the coverage document for details.</p> <p>To enable extended license scanning, you can use <code>--license-full</code>. In addition to package licenses, Trivy scans source code files, Markdown documents, text files and <code>LICENSE</code> documents to identify license usage within the image or filesystem.</p> <p>By default, Trivy only classifies licenses that are matched with a confidence level of 0.9 or more by the classifier. To configure the confidence level, you can use <code>--license-confidence-level</code>. This enables us to classify licenses that might be matched with a lower confidence level by the classifier. </p> <p>Note</p> <p>The full license scanning is expensive. It takes a while.</p> License scanning Image Rootfs Filesystem Repository SBOM Standard \u2705 \u2705 \u2705<sup>1</sup><sup>2</sup> \u2705<sup>1</sup><sup>2</sup> \u2705 Full (--license-full) \u2705 \u2705 \u2705 \u2705 - <p>License checking classifies the identified licenses and map the classification to severity.</p> Classification Severity Forbidden CRITICAL Restricted HIGH Reciprocal MEDIUM Notice LOW Permissive LOW Unencumbered LOW Unknown UNKNOWN"},{"location":"docs/scanner/license/#quick-start","title":"Quick start","text":"<p>This section shows how to scan license in container image and filesystem.</p>"},{"location":"docs/scanner/license/#standard-scanning","title":"Standard scanning","text":"<p>Specify an image name with <code>--scanners license</code>.</p> <pre><code>$ trivy image --scanners license --severity UNKNOWN,HIGH,CRITICAL alpine:3.15\n2022-07-13T17:28:39.526+0300    INFO    License scanning is enabled\n\nOS Packages (license)\n=====================\nTotal: 6 (UNKNOWN: 0, HIGH: 6, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Package      \u2502 License \u2502 Classification \u2502 Severity \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 alpine-baselayout \u2502 GPL-2.0 \u2502 Restricted     \u2502 HIGH     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 apk-tools         \u2502         \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 busybox           \u2502         \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 musl-utils        \u2502         \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 scanelf           \u2502         \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 ssl_client        \u2502         \u2502                \u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/scanner/license/#full-scanning","title":"Full scanning","text":"<p>Specify <code>--license-full</code></p> <pre><code>$ trivy image --scanners license --severity UNKNOWN,HIGH,CRITICAL --license-full grafana/grafana\n2022-07-13T17:48:40.905+0300    INFO    Full license scanning is enabled\n\nOS Packages (license)\n=====================\nTotal: 20 (UNKNOWN: 9, HIGH: 11, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Package      \u2502      License      \u2502 Classification \u2502 Severity \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 alpine-baselayout \u2502 GPL-2.0           \u2502 Restricted     \u2502 HIGH     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                   \u2502                \u2502          \u2502\n\u2502 apk-tools         \u2502                   \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502\n\u2502 bash              \u2502 GPL-3.0           \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 keyutils-libs     \u2502 GPL-2.0           \u2502 Restricted     \u2502 HIGH     \u2502\n\u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   \u2502 LGPL-2.0-or-later \u2502 Non Standard   \u2502 UNKNOWN  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502\n\u2502 libaio            \u2502 LGPL-2.1-or-later \u2502                \u2502          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 libcom_err        \u2502 GPL-2.0           \u2502 Restricted     \u2502 HIGH     \u2502\n\u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                   \u2502 LGPL-2.0-or-later \u2502 Non Standard   \u2502 UNKNOWN  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 tzdata            \u2502 Public-Domain     \u2502 Non Standard   \u2502 UNKNOWN  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nLoose File License(s) (license)\n===============================\nTotal: 6 (UNKNOWN: 4, HIGH: 0, CRITICAL: 2)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Classification \u2502 Severity \u2502   License    \u2502                        File Location                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Forbidden      \u2502 CRITICAL \u2502 AGPL-3.0     \u2502 /usr/share/grafana/LICENSE                                   \u2502\n\u2502                \u2502          \u2502              \u2502                                                              \u2502\n\u2502                \u2502          \u2502              \u2502                                                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Non Standard   \u2502 UNKNOWN  \u2502 BSD-0-Clause \u2502 /usr/share/grafana/public/build/5069.d6aae9dd11d49c741a80.j- \u2502\n\u2502                \u2502          \u2502              \u2502 s.LICENSE.txt                                                \u2502\n\u2502                \u2502          \u2502              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502          \u2502              \u2502 /usr/share/grafana/public/build/6444.d6aae9dd11d49c741a80.j- \u2502\n\u2502                \u2502          \u2502              \u2502 s.LICENSE.txt                                                \u2502\n\u2502                \u2502          \u2502              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502          \u2502              \u2502 /usr/share/grafana/public/build/7889.d6aae9dd11d49c741a80.j- \u2502\n\u2502                \u2502          \u2502              \u2502 s.LICENSE.txt                                                \u2502\n\u2502                \u2502          \u2502              \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502          \u2502              \u2502 /usr/share/grafana/public/build/canvasPanel.d6aae9dd11d49c7- \u2502\n\u2502                \u2502          \u2502              \u2502 41a80.js.LICENSE.txt                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/scanner/license/#configuration","title":"Configuration","text":"<p>Trivy has number of configuration flags for use with license scanning;</p>"},{"location":"docs/scanner/license/#ignored-licenses","title":"Ignored Licenses","text":"<p>Trivy license scanning can ignore licenses that are identified to explicitly remove them from the results using the <code>--ignored-licenses</code> flag;</p> <pre><code>$ trivy image --scanners license --ignored-licenses MPL-2.0,MIT --severity HIGH grafana/grafana:latest\n2022-07-13T18:15:28.605Z        INFO    License scanning is enabled\n\nOS Packages (license)\n=====================\nTotal: 2 (HIGH: 2, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      Package      \u2502 License \u2502 Classification \u2502 Severity \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 alpine-baselayout \u2502 GPL-2.0 \u2502 Restricted     \u2502 HIGH     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524         \u2502                \u2502          \u2502\n\u2502 ssl_client        \u2502         \u2502                \u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/scanner/license/#configuring-classifier-confidence-level","title":"Configuring Classifier Confidence Level","text":"<p>You can use the <code>--license-confidence-level</code> flag to adjust the confidence level between 0.0 to 1.0 (default 0.9). For example, when you run the scanner with the default confidence level on SPDX license list data, it is able to detect only 258 licenses.</p> <pre><code>$ trivy fs --scanners license --license-full &lt;path/to/spdx/list/data&gt;\n2023-04-18T10:05:13.601-0700    INFO    Full license scanning is enabled\n\nLoose File License(s) (license)\n===============================\nTotal: 258 (UNKNOWN: 70, LOW: 90, MEDIUM: 18, HIGH: 58, CRITICAL: 22)\n</code></pre> <p>However, by configuring the confidence level to 0.8, the scanner is now able to detect 282 licenses.</p> <pre><code>$ trivy fs --scanners license --license-full --license-confidence-level 0.8 &lt;path/to/spdx/list/data&gt;\n2023-04-18T10:21:39.637-0700    INFO    Full license scanning is enabled\n\nLoose File License(s) (license)\n===============================\nTotal: 282 (UNKNOWN: 81, LOW: 97, MEDIUM: 24, HIGH: 58, CRITICAL: 22)\n</code></pre>"},{"location":"docs/scanner/license/#custom-classification","title":"Custom Classification","text":"<p>You can generate the default config by the <code>--generate-default-config</code> flag and customize the license classification. For example, if you want to forbid only AGPL-3.0, you can leave it under <code>forbidden</code> and move other licenses to another classification.</p> <pre><code>$ trivy image --generate-default-config\n$ vim trivy.yaml\nlicense:\n  forbidden:\n  - AGPL-3.0\n\n  restricted:\n  - AGPL-1.0\n  - CC-BY-NC-1.0\n  - CC-BY-NC-2.0\n  - CC-BY-NC-2.5\n  - CC-BY-NC-3.0\n  - CC-BY-NC-4.0\n  - CC-BY-NC-ND-1.0\n  - CC-BY-NC-ND-2.0\n  - CC-BY-NC-ND-2.5\n  - CC-BY-NC-ND-3.0\n  - CC-BY-NC-ND-4.0\n  - CC-BY-NC-SA-1.0\n  - CC-BY-NC-SA-2.0\n  - CC-BY-NC-SA-2.5\n  - CC-BY-NC-SA-3.0\n  - CC-BY-NC-SA-4.0\n  - Commons-Clause\n  - Facebook-2-Clause\n  - Facebook-3-Clause\n  - Facebook-Examples\n  - WTFPL\n  - BCL\n  - CC-BY-ND-1.0\n  - CC-BY-ND-2.0\n  - CC-BY-ND-2.5\n  - CC-BY-ND-3.0\n  - CC-BY-ND-4.0\n  - CC-BY-SA-1.0\n  - CC-BY-SA-2.0\n  - CC-BY-SA-2.5\n  - CC-BY-SA-3.0\n  - CC-BY-SA-4.0\n  - GPL-1.0\n  - GPL-2.0\n  - GPL-2.0-with-autoconf-exception\n  - GPL-2.0-with-bison-exception\n  - GPL-2.0-with-classpath-exception\n  - GPL-2.0-with-font-exception\n  - GPL-2.0-with-GCC-exception\n  - GPL-3.0\n  - GPL-3.0-with-autoconf-exception\n  - GPL-3.0-with-GCC-exception\n  - LGPL-2.0\n  - LGPL-2.1\n  - LGPL-3.0\n  - NPL-1.0\n  - NPL-1.1\n  - OSL-1.0\n  - OSL-1.1\n  - OSL-2.0\n  - OSL-2.1\n  - OSL-3.0\n  - QPL-1.0\n  - Sleepycat\n\n  reciprocal:\n  - APSL-1.0\n  - APSL-1.1\n  - APSL-1.2\n  - APSL-2.0\n  - CDDL-1.0\n  - CDDL-1.1\n  - CPL-1.0\n  - EPL-1.0\n  - EPL-2.0\n  - FreeImage\n  - IPL-1.0\n  - MPL-1.0\n  - MPL-1.1\n  - MPL-2.0\n  - Ruby\n\n  notice:\n  - AFL-1.1\n  - AFL-1.2\n  - AFL-2.0\n  - AFL-2.1\n  - AFL-3.0\n  - Apache-1.0\n  - Apache-1.1\n  - Apache-2.0\n  - Artistic-1.0-cl8\n  - Artistic-1.0-Perl\n  - Artistic-1.0\n  - Artistic-2.0\n  - BSL-1.0\n  - BSD-2-Clause-FreeBSD\n  - BSD-2-Clause-NetBSD\n  - BSD-2-Clause\n  - BSD-3-Clause-Attribution\n  - BSD-3-Clause-Clear\n  - BSD-3-Clause-LBNL\n  - BSD-3-Clause\n  - BSD-4-Clause\n  - BSD-4-Clause-UC\n  - BSD-Protection\n  - CC-BY-1.0\n  - CC-BY-2.0\n  - CC-BY-2.5\n  - CC-BY-3.0\n  - CC-BY-4.0\n  - FTL\n  - ISC\n  - ImageMagick\n  - Libpng\n  - Lil-1.0\n  - Linux-OpenIB\n  - LPL-1.02\n  - LPL-1.0\n  - MS-PL\n  - MIT\n  - NCSA\n  - OpenSSL\n  - PHP-3.01\n  - PHP-3.0\n  - PIL\n  - Python-2.0\n  - Python-2.0-complete\n  - PostgreSQL\n  - SGI-B-1.0\n  - SGI-B-1.1\n  - SGI-B-2.0\n  - Unicode-DFS-2015\n  - Unicode-DFS-2016\n  - Unicode-TOU\n  - UPL-1.0\n  - W3C-19980720\n  - W3C-20150513\n  - W3C\n  - X11\n  - Xnet\n  - Zend-2.0\n  - zlib-acknowledgement\n  - Zlib\n  - ZPL-1.1\n  - ZPL-2.0\n  - ZPL-2.1\n\n  unencumbered:\n  - CC0-1.0\n  - Unlicense\n  - 0BSD\n\n  permissive: []\n</code></pre>"},{"location":"docs/scanner/license/#text-licenses","title":"Text licenses","text":"<p>By default, Trivy categorizes a license as UNKNOWN if it cannot determine the license name from the license text.</p> <p>To define a category for a text license, you need to add license with the <code>text://</code> prefix to license classification. For example: <pre><code>license:\n  forbidden:\n    - \"text://Text of Apache Software Foundation License\"\n</code></pre></p> <p>But a text license can by large. So for these cases Trivy supports using <code>regex</code> in license classification. For example: <pre><code>license:\n  forbidden:\n    - \"text://.* Apache Software .*\"\n</code></pre></p> <p>Note</p> <p><code>regex</code> is only used for text licenses and can't be used to configure license IDs.</p>"},{"location":"docs/scanner/license/#enabling-a-subset-of-package-types","title":"Enabling a Subset of Package Types","text":"<p>It's possible to only enable certain package types if you prefer. You can do so by passing the <code>--pkg-types</code> option. This flag takes a comma-separated list of package types.</p> <p>Available values:</p> <ul> <li>os<ul> <li>Scan OS packages managed by the OS package manager (e.g. <code>dpkg</code>, <code>yum</code>, <code>apk</code>).</li> </ul> </li> <li>library<ul> <li>Scan language-specific packages (e.g. packages installed by <code>pip</code>, <code>npm</code>, or <code>gem</code>).</li> </ul> </li> </ul> <pre><code>$ trivy image --pkg-types os ruby:2.4.0\n</code></pre> <ol> <li> <p>See the list of supported language files here.\u00a0\u21a9\u21a9</p> </li> <li> <p>Some lock files require additional files (e.g. files from the cache directory) to detect licenses. Check coverage for more information.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"docs/scanner/secret/","title":"Secret Scanning","text":"<p>Trivy scans any container image, filesystem and git repository to detect exposed secrets like passwords, api keys, and tokens. Secret scanning is enabled by default.</p> <p>Trivy will scan every plaintext file, according to builtin rules or configuration. Also, Trivy can detect secrets in compiled Python files (<code>.pyc</code>).</p> <p>There are plenty of builtin rules:</p> <ul> <li>AWS access key</li> <li>GCP service account</li> <li>GitHub personal access token</li> <li>GitLab personal access token</li> <li>Slack access token</li> <li>etc.</li> </ul> <p>You can see a full list of built-in rules and built-in allow rules.</p> <p>Tip</p> <p>If your secret is not detected properly, please make sure that your file including the secret is not in the allowed paths. You can disable allow rules via disable-allow-rules.</p>"},{"location":"docs/scanner/secret/#quick-start","title":"Quick start","text":"<p>This section shows how to scan secrets in container image and filesystem. Other subcommands should be the same.</p>"},{"location":"docs/scanner/secret/#container-image","title":"Container image","text":"<p>Specify an image name.</p> <pre><code>$ trivy image myimage:1.0.0\n2022-04-21T18:56:44.099+0300    INFO    Detected OS: alpine\n2022-04-21T18:56:44.099+0300    INFO    Detecting Alpine vulnerabilities...\n2022-04-21T18:56:44.101+0300    INFO    Number of language-specific files: 0\n\nmyimage:1.0.0 (alpine 3.15.0)\n=============================\nTotal: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)\n\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n|   LIBRARY    | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |                 TITLE                 |\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n| busybox      | CVE-2022-28391   | CRITICAL | 1.34.1-r3         | 1.34.1-r5     | CVE-2022-28391 affecting              |\n|              |                  |          |                   |               | package busybox 1.35.0                |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2022-28391 |\n+--------------+------------------|          |-------------------+---------------+---------------------------------------+\n| ssl_client   | CVE-2022-28391   |          | 1.34.1-r3         | 1.34.1-r5     | CVE-2022-28391 affecting              |\n|              |                  |          |                   |               | package busybox 1.35.0                |\n|              |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2022-28391 |\n+--------------+------------------+----------+-------------------+---------------+---------------------------------------+\n\napp/secret.sh (secrets)\n=======================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)\n\n+----------+-------------------+----------+---------+--------------------------------+\n| CATEGORY |    DESCRIPTION    | SEVERITY | LINE NO |             MATCH              |\n+----------+-------------------+----------+---------+--------------------------------+\n|   AWS    | AWS Access Key ID | CRITICAL |   10    | export AWS_ACCESS_KEY_ID=***** |\n+----------+-------------------+----------+---------+--------------------------------+\n</code></pre> <p>Tip</p> <p>Trivy tries to detect a base image and skip those layers for secret scanning. A base image usually contains a lot of files and makes secret scanning much slower. If a secret is not detected properly, you can see base layers with the <code>--debug</code> flag.</p>"},{"location":"docs/scanner/secret/#filesystem","title":"Filesystem","text":"<pre><code>$ trivy fs /path/to/your_project\n...(snip)...\n\ncerts/key.pem (secrets)\n========================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\n+----------------------+------------------------+----------+---------+---------------------------------+\n|       CATEGORY       |      DESCRIPTION       | SEVERITY | LINE NO |              MATCH              |\n+----------------------+------------------------+----------+---------+---------------------------------+\n| AsymmetricPrivateKey | Asymmetric Private Key |   HIGH   |    1    | -----BEGIN RSA PRIVATE KEY----- |\n+----------------------+------------------------+----------+---------+---------------------------------+\n</code></pre> <p>Tip</p> <p>Your project may have some secrets for testing. You can skip them with <code>--skip-dirs</code> or <code>--skip-files</code>. We would recommend specifying these options so that the secret scanning can be faster if those files don't need to be scanned. Also, you can specify paths to be allowed in a configuration file. See the detail here.</p>"},{"location":"docs/scanner/secret/#configuration","title":"Configuration","text":"<p>This section describes secret-specific configuration. Other common options are documented here.</p> <p>Trivy has a set of builtin rules for secret scanning, which can be extended or modified by a configuration file. Trivy tries to load <code>trivy-secret.yaml</code> in the current directory by default. If the file doesn't exist, only built-in rules are used. You can customize the config file path via the <code>--secret-config</code> flag.</p> <p>Warning</p> <p>Trivy uses Golang regexp package. To use <code>^</code> and <code>$</code> as symbols of begin and end of line use multi-line mode -<code>(?m)</code>.</p>"},{"location":"docs/scanner/secret/#custom-rules","title":"Custom Rules","text":"<p>Trivy allows defining custom rules.</p> <pre><code>rules:\n  - id: rule1\n    category: general\n    title: Generic Rule\n    severity: HIGH\n    path: .*\\.sh\n    keywords:\n      - secret\n    regex: (?i)(?P&lt;key&gt;(secret))(=|:).{0,5}['\"](?P&lt;secret&gt;[0-9a-zA-Z\\-_=]{8,64})['\"]\n    secret-group-name: secret\n    allow-rules:\n      - id: skip-text\n        description: skip text files\n        path: .*\\.txt\n</code></pre> <code>id</code> (required) <ul> <li>Unique identifier for this rule.</li> </ul> <code>category</code> (required) <ul> <li>String used for metadata and reporting purposes.</li> </ul> <code>title</code> (required) <ul> <li>Short human-readable title of the rule.</li> </ul> <code>severity</code> (required) <ul> <li>How critical this rule is.</li> <li>Allowed values:</li> <li>CRITICAL</li> <li>HIGH</li> <li>MEDIUM</li> <li>LOW</li> </ul> <code>regex</code> (required) <ul> <li>Golang regular expression used to detect secrets.</li> </ul> <code>path</code> (optional) <ul> <li>Golang regular expression used to match paths.</li> </ul> <code>keywords</code> (optional, recommended) <ul> <li>Keywords are used for pre-regex check filtering.</li> <li>Rules that contain keywords will perform a quick string compare check to make sure the keyword(s) are in the content being scanned.</li> <li>Ideally these values should either be part of the identifier or unique strings specific to the rule's regex.</li> <li>It is recommended to define for better performance.</li> </ul> <code>allow-rules</code> (optional) <ul> <li>Allow rules for a single rule to reduce false positives with known secrets.</li> <li>The details are below.</li> </ul>"},{"location":"docs/scanner/secret/#allow-rules","title":"Allow Rules","text":"<p>If the detected secret is matched with the specified <code>regex</code>, then that secret will be skipped and not detected. The same logic applies for <code>path</code>.</p> <p><code>allow-rules</code> can be defined globally and per each rule. The fields are the same.</p> <pre><code>rules:\n  - id: rule1\n    category: general\n    title: Generic Rule\n    severity: HIGH\n    regex: (?i)(?P&lt;key&gt;(secret))(=|:).{0,5}['\"](?P&lt;secret&gt;[0-9a-zA-Z\\-_=]{8,64})['\"]\n    allow-rules:\n      - id: skip-text\n        description: skip text files\n        path: .*\\.txt\nallow-rules:\n  - id: social-security-number\n    description: skip social security number\n    regex: 219-09-9999\n</code></pre> <code>id</code> (required) <ul> <li>Unique identifier for this allow rule.</li> </ul> <code>description</code> (optional) <ul> <li>Short human-readable description of this allow rule.</li> </ul> <code>regex</code> (optional) <ul> <li>Golang regular expression used to allow detected secrets.</li> <li><code>regex</code> or <code>path</code> must be specified.</li> </ul> <code>path</code> (optional) <ul> <li>Golang regular expression used to allow matched paths.</li> <li><code>regex</code> or <code>path</code> must be specified.</li> </ul>"},{"location":"docs/scanner/secret/#enable-rules","title":"Enable Rules","text":"<p>Trivy provides plenty of out-of-box rules and allow rules, but you may not need all of them. In that case, <code>enable-builtin-rules</code> will be helpful. If you just need AWS secret detection, you can enable only relevant rules as shown below. It specifies AWS-related rule IDs in <code>enable-builtin-rules</code>. All other rules are disabled, so the scanning will be much faster. We would strongly recommend using this option if you don't need all rules.</p> <p>You can see a full list of built-in rule IDs and built-in allow rule IDs.</p> <pre><code>enable-builtin-rules:\n  - aws-access-key-id\n  - aws-account-id\n  - aws-secret-access-key\n</code></pre>"},{"location":"docs/scanner/secret/#disable-rules","title":"Disable Rules","text":"<p>Trivy offers built-in rules and allow rules, but you may want to disable some of them. For example, you don't use Slack, so Slack doesn't have to be scanned. You can specify the Slack rule IDs, <code>slack-access-token</code> and <code>slack-web-hook</code> in <code>disable-rules</code> so that those rules will be disabled for less false positives.</p> <p>You should specify either <code>enable-builtin-rules</code> or <code>disable-rules</code>. If they both are specified, <code>disable-rules</code> takes precedence. In case <code>github-pat</code> is specified in <code>enable-builtin-rules</code> and <code>disable-rules</code>, it will be disabled.</p> <p>In addition, there are some allow rules. Markdown files are ignored by default, but you may want to scan markdown files as well. You can disable the allow rule by adding <code>markdown</code> to <code>disable-allow-rules</code>.</p> <p>You can see a full list of built-in rule IDs and built-in allow rule IDs.</p> <pre><code>disable-rules:\n  - slack-access-token\n  - slack-web-hook\ndisable-allow-rules:\n  - markdown\n</code></pre>"},{"location":"docs/scanner/secret/#recommendation","title":"Recommendation","text":"<p>We would recommend specifying <code>--skip-dirs</code> for faster secret scanning. In container image scanning, Trivy walks the file tree rooted  <code>/</code> and scans all the files other than built-in allowed paths. It will take a while if your image contains a lot of files even though Trivy tries to avoid scanning layers from a base image. If you want to make scanning faster, <code>--skip-dirs</code> and <code>--skip-files</code> helps so that Trivy will skip scanning those files and directories. You can see more options here.</p> <p><code>allow-rules</code> is also helpful. See the allow-rules section.</p> <p>In addition, all the built-in rules are enabled by default, so it takes some time to scan all of them. If you don't need all those rules, you can use <code>enable-builtin-rules</code> or <code>disable-rules</code> in the configuration file. You should use <code>enable-builtin-rules</code> if you need only AWS secret detection, for example. All rules are disabled except for the ones you specify, so it runs very fast. On the other hand, you should use <code>disable-rules</code> if you just want to disable some built-in rules. See the enable-rules and disable-rules sections for the detail.</p> <p>If you don't need secret scanning, you can disable it via the <code>--scanners</code> flag.</p> <pre><code>$ trivy image --scanners vuln alpine:3.15\n</code></pre>"},{"location":"docs/scanner/secret/#example","title":"Example","text":"<p><code>trivy-secret.yaml</code> in the working directory is loaded by default.</p> <pre><code>$ cat trivy-secret.yaml\nrules:\n  - id: rule1\n    category: general\n    title: Generic Rule\n    severity: HIGH\n    regex: (?i)(?P&lt;key&gt;(secret))(=|:).{0,5}['\"](?P&lt;secret&gt;[0-9a-zA-Z\\-_=]{8,64})['\"]\nallow-rules:\n  - id: social-security-number\n    description: skip social security number\n    regex: 219-09-9999\n  - id: log-dir\n    description: skip log directory\n    path: ^\\/var\\/log\\/\ndisable-rules:\n  - slack-access-token\n  - slack-web-hook\ndisable-allow-rules:\n  - markdown\n\n# The following command automatically loads the above configuration.\n$ trivy image YOUR_IMAGE\n</code></pre> <p>Also, you can customize the config file path via <code>--secret-config</code>.</p> <pre><code>$ cat ./secret-config/trivy.yaml\nrules:\n  - id: rule1\n    category: general\n    title: Generic Rule\n    severity: HIGH\n    regex: (?i)(?P&lt;key&gt;(secret))(=|:).{0,5}['\"](?P&lt;secret&gt;[0-9a-zA-Z\\-_=]{8,64})['\"]\n    allow-rules:\n      - id: skip-text\n        description: skip text files\n        path: .*\\.txt\nenable-builtin-rules:\n  - aws-access-key-id\n  - aws-account-id\n  - aws-secret-access-key\ndisable-allow-rules:\n  - usr-dirs\n\n# Pass the above config with `--secret-config`.\n$ trivy fs --secret-config ./secret-config/trivy.yaml /path/to/your_project\n</code></pre>"},{"location":"docs/scanner/secret/#credit","title":"Credit","text":"<p>This feature is inspired by gitleaks.</p>"},{"location":"docs/scanner/vulnerability/","title":"Vulnerability Scanning","text":"<p>Trivy detects known vulnerabilities in software components that it finds in the scan target.</p> <p>The following are supported:</p> <ul> <li>OS packages</li> <li>Language-specific packages</li> <li>Non-packaged software</li> <li>Kubernetes components</li> </ul>"},{"location":"docs/scanner/vulnerability/#os-packages","title":"OS Packages","text":"<p>Trivy is capable of automatically detecting installed OS packages when scanning container images, VM images and running hosts.</p> <p>Note</p> <p>Trivy doesn't support third-party/self-compiled packages/binaries, but official packages provided by vendors such as Red Hat and Debian.</p>"},{"location":"docs/scanner/vulnerability/#supported-os","title":"Supported OS","text":"<p>See here for the supported OSes.</p>"},{"location":"docs/scanner/vulnerability/#data-sources","title":"Data Sources","text":"OS Source Arch Linux Vulnerable Issues Alpine Linux secdb Wolfi Linux secdb Chainguard secdb MinimOS secdb Amazon Linux Amazon Linux Security Center Echo Echo Debian Security Bug Tracker / OVAL Ubuntu Ubuntu CVE Tracker RHEL/CentOS OVAL / Security Data AlmaLinux AlmaLinux Product Errata Rocky Linux Rocky Linux UpdateInfo Oracle Linux OVAL Azure Linux (CBL-Mariner) OVAL OpenSUSE/SLES CVRF Photon OS Photon Security Advisory Root.io Root.io Patch Feed"},{"location":"docs/scanner/vulnerability/#data-source-selection","title":"Data Source Selection","text":"<p>Trivy only consumes security advisories from the sources listed in the above table.</p> <p>As for packages installed from OS package managers (<code>dpkg</code>, <code>yum</code>, <code>apk</code>, etc.), Trivy uses the advisory database from the appropriate OS vendor.</p> <p>For example: for a python package installed from <code>yum</code> (Amazon linux), Trivy will only get advisories from ALAS. But for a python package installed from another source (e.g. <code>pip</code>), Trivy will get advisories from the <code>GitLab</code> and <code>GitHub</code> databases.</p> <p>This advisory selection is essential to avoid getting false positives because OS vendors usually backport upstream fixes, and the fixed version can be different from the upstream fixed version.</p>"},{"location":"docs/scanner/vulnerability/#severity-selection","title":"Severity Selection","text":"<p>The severity is taken from the selected data source since the severity from vendors is more accurate. Using CVE-2023-0464 as an example, while it is rated as \"HIGH\" in NVD, Red Hat has marked its 'Impact' as \"Low\". As a result, Trivy will display it as \"Low\".</p> <p>The severity depends on the compile option, the default configuration, etc. NVD doesn't know how the vendor distributes the software. Red Hat evaluates the severity more accurately. That's why Trivy prefers vendor scores over NVD.</p> <p>If the data source does not provide a severity, the severity is determined based on the CVSS score as follows:</p> Base Score Range Severity 0.1-3.9 Low 4.0-6.9 Medium 7.0-8.9 High 9.0-10.0 Critical <p>If the CVSS score is also not provided, it falls back to NVD.</p> <p>NVD and some vendors may delay severity analysis, while other vendors, such as Red Hat, are able to quickly evaluate and announce the severity of vulnerabilities. To avoid marking too many vulnerabilities as \"UNKNOWN\" severity, Trivy uses severity ratings from other vendors when the NVD information is not yet available. The order of preference for vendor severity data can be found here.</p> <p>You can reference <code>SeveritySource</code> in the JSON reporting format to see from where the severity is taken for a given vulnerability.</p> <pre><code>\"SeveritySource\": \"debian\",\n</code></pre> <p>In addition, you can see all the vendor severity ratings.</p> <pre><code>\"VendorSeverity\": {\n  \"amazon\": 2,\n  \"cbl-mariner\": 4,\n  \"ghsa\": 4,\n  \"nvd\": 4,\n  \"photon\": 4,\n  \"redhat\": 2,\n  \"ubuntu\": 2\n}\n</code></pre> <p>Here is the severity mapping in Trivy:</p> Number Severity 0 Unknown 1 Low 2 Medium 3 High 4 Critical <p>If no vendor has a severity, the <code>UNKNOWN</code> severity will be used.</p>"},{"location":"docs/scanner/vulnerability/#unfixed-vulnerabilities","title":"Unfixed Vulnerabilities","text":"<p>The unfixed/unfixable vulnerabilities mean that the patch has not yet been provided on their distribution. To hide unfixed/unfixable vulnerabilities, you can use the <code>--ignore-unfixed</code> flag.</p>"},{"location":"docs/scanner/vulnerability/#language-specific-packages","title":"Language-specific Packages","text":""},{"location":"docs/scanner/vulnerability/#supported-languages","title":"Supported Languages","text":"<p>See here for the supported languages.</p>"},{"location":"docs/scanner/vulnerability/#langpkg-data-sources","title":"Data Sources","text":"Language Source Commercial Use Delay<sup>1</sup> PHP PHP Security Advisories Database \u2705 - GitHub Advisory Database (Composer) \u2705 - Python GitHub Advisory Database (pip) \u2705 - Ruby Ruby Advisory Database \u2705 - GitHub Advisory Database (RubyGems) \u2705 - Node.js Ecosystem Security Working Group \u2705 - GitHub Advisory Database (npm) \u2705 - Java GitHub Advisory Database (Maven) \u2705 - Go GitHub Advisory Database (Go) \u2705 - Go Vulnerability Database \u2705 - Rust Open Source Vulnerabilities (crates.io) \u2705 - .NET GitHub Advisory Database (NuGet) \u2705 - C/C++ GitLab Advisories Community \u2705 1 month Dart GitHub Advisory Database (Pub) \u2705 - Elixir GitHub Advisory Database (Erlang) \u2705 - Swift GitHub Advisory Database (Swift) \u2705 -"},{"location":"docs/scanner/vulnerability/#non-packaged-software","title":"Non-packaged software","text":"<p>If you have software that is not managed by a package manager, Trivy can still detect vulnerabilities in it in some cases:</p> <ul> <li>Using SBOM from Sigstore Rekor</li> <li>Go Binaries with embedded module information</li> <li>Rust Binaries with embedded information</li> <li>SBOM embedded in container images</li> </ul>"},{"location":"docs/scanner/vulnerability/#kubernetes","title":"Kubernetes","text":"<p>Trivy can detect vulnerabilities in Kubernetes clusters and components by scanning a Kubernetes Cluster, or a KBOM (Kubernetes bill of Material). To learn more, see the documentation for Kubernetes scanning.</p>"},{"location":"docs/scanner/vulnerability/#data-sources_1","title":"Data Sources","text":"Vendor Source Kubernetes Kubernetes Official CVE feed<sup>1</sup>"},{"location":"docs/scanner/vulnerability/#databases","title":"Databases","text":"<p>The information from the above sources is collected and stored in databases that Trivy uses for vulnerability scanning. Trivy automatically fetches, maintains, and caches the relevant databases when performing a vulnerability scan For more information about Trivy's Databases mechanism and configurations, refer to the Databases document.</p>"},{"location":"docs/scanner/vulnerability/#detection-behavior","title":"Detection Behavior","text":"<p>Trivy prioritizes precision in vulnerability detection, aiming to minimize false positives while potentially accepting some false negatives. This approach is particularly relevant in two key areas:</p> <ul> <li>Handling Software Installed via OS Packages</li> <li>Handling Packages with Unspecified Versions</li> </ul>"},{"location":"docs/scanner/vulnerability/#handling-software-installed-via-os-packages","title":"Handling Software Installed via OS Packages","text":"<p>For files installed by OS package managers, such as <code>apt</code>, Trivy exclusively uses advisories from the OS vendor. This means that even if a JAR file is present in a container image, if it was installed via an OS package manager (e.g., <code>apt</code>), Trivy will not analyze the JAR file itself and use upstream security advisories.</p> <p>For example, consider the Python <code>requests</code> package in Red Hat Universal Base Image 8:</p> <pre><code>[root@987ee49dc93d /]# head -n 3 /usr/lib/python3.6/site-packages/requests-2.20.0-py3.6.egg-info/PKG-INFO\nMetadata-Version: 2.1\nName: requests\nVersion: 2.20.0\n</code></pre> <p>Version 2.20.0 is installed, and this package is installed by <code>dnf</code>.</p> <pre><code>[root@987ee49dc93d /]# rpm -ql python3-requests | grep PKG-INFO\n/usr/lib/python3.6/site-packages/requests-2.20.0-py3.6.egg-info/PKG-INFO\n</code></pre> <p>At first glance, this might seem vulnerable to CVE-2023-32681, which affects versions of requests prior to v2.31.0. However, Red Hat backported the fix to v2.20.0-3 in RHSA-2023:4520, and the package is not vulnerable.</p> <ul> <li>Upstream (PyPI requests): Fixed in v2.31.0</li> <li>Red Hat (<code>python-requests</code>): Backported fix applied in v2.20.0-3 (RHSA-2023:4520)</li> </ul> <p>If Trivy were to detect CVE-2023-32681 in this case, it would be a false positive. This illustrates why using the correct security advisory is crucial to avoid false detections. To minimize false positives, Trivy trusts the OS vendor's advisory for software installed via OS package managers and does not use upstream advisories for these packages.</p> <p>However, this approach may lead to false negatives if the OS vendor's advisories are delayed or missing. In such cases, using --detection-priority comprehensive allows Trivy to consider upstream advisories (e.g., GitHub Advisory Database), potentially increasing false positives but reducing false negatives.</p>"},{"location":"docs/scanner/vulnerability/#handling-packages-with-unspecified-versions","title":"Handling Packages with Unspecified Versions","text":"<p>When a package version cannot be uniquely determined (e.g., <code>package-a: \"&gt;=3.0\"</code>), Trivy typically skips vulnerability detection for that package to avoid false positives. If a lock file is present with fixed versions, Trivy will use those for detection.</p> <p>To detect potential vulnerabilities even with unspecified versions, use --detection-priority comprehensive. This option makes Trivy use the minimum version in the specified range for vulnerability detection. While this may increase false positives if the actual version used is not the minimum, it helps reduce false negatives.</p>"},{"location":"docs/scanner/vulnerability/#configuration","title":"Configuration","text":"<p>This section describes vulnerability-specific configuration. Other common options are documented here.</p>"},{"location":"docs/scanner/vulnerability/#enabling-a-subset-of-package-types","title":"Enabling a Subset of Package Types","text":"<p>It's possible to only enable certain package types if you prefer. You can do so by passing the <code>--pkg-types</code> option. This flag takes a comma-separated list of package types.</p> <p>Available values:</p> <ul> <li>os<ul> <li>Scan OS packages managed by the OS package manager (e.g. <code>dpkg</code>, <code>yum</code>, <code>apk</code>).</li> </ul> </li> <li>library<ul> <li>Scan language-specific packages (e.g. packages installed by <code>pip</code>, <code>npm</code>, or <code>gem</code>).</li> </ul> </li> </ul> <pre><code>$ trivy image --pkg-types os ruby:2.4.0\n</code></pre> Result <pre><code>2019-05-22T19:36:50.530+0200    \u001b[34mINFO\u001b[0m    Updating vulnerability database...\n2019-05-22T19:36:51.681+0200    \u001b[34mINFO\u001b[0m    Detecting Alpine vulnerabilities...\n2019-05-22T19:36:51.685+0200    \u001b[34mINFO\u001b[0m    Updating npm Security DB...\n2019-05-22T19:36:52.389+0200    \u001b[34mINFO\u001b[0m    Detecting npm vulnerabilities...\n2019-05-22T19:36:52.390+0200    \u001b[34mINFO\u001b[0m    Updating pipenv Security DB...\n2019-05-22T19:36:53.406+0200    \u001b[34mINFO\u001b[0m    Detecting pipenv vulnerabilities...\n\nruby:2.4.0 (debian 8.7)\n=======================\nTotal: 7 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 3, CRITICAL: 2)\n\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |              TITLE               |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| curl    | CVE-2018-14618   | CRITICAL | 7.61.0-r0         | 7.61.1-r0     | curl: NTLM password overflow     |\n|         |                  |          |                   |               | via integer overflow             |\n+         +------------------+----------+                   +---------------+----------------------------------+\n|         | CVE-2018-16839   | HIGH     |                   | 7.61.1-r1     | curl: Integer overflow leading   |\n|         |                  |          |                   |               | to heap-based buffer overflow in |\n|         |                  |          |                   |               | Curl_sasl_create_plain_message() |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| git     | CVE-2018-17456   | HIGH     | 2.15.2-r0         | 2.15.3-r0     | git: arbitrary code execution    |\n|         |                  |          |                   |               | via .gitmodules                  |\n+         +------------------+          +                   +               +----------------------------------+\n|         | CVE-2018-19486   |          |                   |               | git: Improper handling of        |\n|         |                  |          |                   |               | PATH allows for commands to be   |\n|         |                  |          |                   |               | executed from...                 |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| libssh2 | CVE-2019-3855    | CRITICAL | 1.8.0-r2          | 1.8.1-r0      | libssh2: Integer overflow in     |\n|         |                  |          |                   |               | transport read resulting in      |\n|         |                  |          |                   |               | out of bounds write...           |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| sqlite  | CVE-2018-20346   | MEDIUM   | 3.21.0-r1         | 3.25.3-r0     | CVE-2018-20505 CVE-2018-20506    |\n|         |                  |          |                   |               | sqlite: Multiple flaws in        |\n|         |                  |          |                   |               | sqlite which can be triggered    |\n|         |                  |          |                   |               | via...                           |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n| tar     | CVE-2018-20482   | LOW      | 1.29-r1           | 1.31-r0       | tar: Infinite read loop in       |\n|         |                  |          |                   |               | sparse_dump_region function in   |\n|         |                  |          |                   |               | sparse.c                         |\n+---------+------------------+----------+-------------------+---------------+----------------------------------+\n</code></pre> <p>Info</p> <p>This flag filters the packages themselves, so it also affects the <code>--list-all-pkgs</code> option and SBOM generation.</p>"},{"location":"docs/scanner/vulnerability/#filtering-by-package-relationships","title":"Filtering by Package Relationships","text":"<p>Trivy supports filtering vulnerabilities based on the relationship of packages within a project. This is achieved through the <code>--pkg-relationships</code> flag. This feature allows you to focus on vulnerabilities in specific types of dependencies, such as only those in direct dependencies.</p> <p>In Trivy, there are four types of package relationships:</p> <ol> <li><code>root</code>: The root package being scanned</li> <li><code>workspace</code>: Workspaces of the root package (Currently only <code>pom.xml</code>, <code>yarn.lock</code> and <code>cargo.lock</code> files are supported)</li> <li><code>direct</code>: Direct dependencies of the root/workspace package</li> <li><code>indirect</code>: Transitive dependencies</li> <li><code>unknown</code>: Packages whose relationship cannot be determined</li> </ol> <p>The available relationships may vary depending on the ecosystem. To see which relationships are supported for a particular project, you can use the JSON output format and check the <code>Relationship</code> field:</p> <pre><code>$ trivy repo -f json --list-all-pkgs /path/to/project\n</code></pre> <p>To scan only the root package and its direct dependencies, you can use the flag as follows:</p> <pre><code>$ trivy repo --pkg-relationships root,direct /path/to/project\n</code></pre> <p>By default, all relationships are included in the scan.</p> <p>Info</p> <p>This flag filters the packages themselves, so it also affects the <code>--list-all-pkgs</code> option and SBOM generation.</p> <p>Warning</p> <p>As it may not provide a complete package list, <code>--pkg-relationships</code> cannot be used with <code>--dependency-tree</code>, <code>--vex</code> or SBOM generation.</p>"},{"location":"docs/scanner/vulnerability/#detection-priority","title":"Detection Priority","text":"<p>Trivy provides a <code>--detection-priority</code> flag to control the balance between false positives and false negatives in vulnerability detection. This concept is similar to the relationship between precision and recall in machine learning evaluation.</p> <pre><code>$ trivy image --detection-priority {precise|comprehensive} alpine:3.15\n</code></pre> <ul> <li><code>precise</code>: This mode prioritizes reducing false positives. It results in less noisy vulnerability reports but may miss some potential vulnerabilities.</li> <li><code>comprehensive</code>: This mode aims to detect more vulnerabilities, potentially including some that might be false positives.   It provides broader coverage but may increase the noise in the results.</li> </ul> <p>The default value is <code>precise</code>. Also refer to the detection behavior section for more information.</p> <p>Regardless of the chosen mode, user review of detected vulnerabilities is crucial:</p> <ul> <li><code>precise</code>: Review thoroughly, considering potential missed vulnerabilities.</li> <li><code>comprehensive</code>: Carefully investigate each reported vulnerability due to increased false positive possibility.</li> </ul>"},{"location":"docs/scanner/vulnerability/#overriding-os-version","title":"Overriding OS version","text":"<p>By default, Trivy automatically detects the OS during container image scanning and performs vulnerability detection based on that OS. However, in some cases, you may want to scan an image with a different OS version than the one detected. Also, you may want to specify the OS version when OS is not detected. For these cases, Trivy supports a <code>--distro</code> flag using the <code>&lt;family&gt;/&lt;version&gt;</code> format (e.g. <code>alpine/3.20</code>) to set the desired OS version.</p>"},{"location":"docs/scanner/vulnerability/#severity-selection_1","title":"Severity selection","text":"<p>By default, Trivy automatically detects severity (as described here). But there are cases when you may want to use your own source priority. Trivy supports the <code>--vuln-severity-source</code> flag for this.</p> <p>Fill in a list of required sources, and Trivy will check the sources in that order until it finds an existing severity. If no source has the severity - Trivy will use the <code>UNKNOWN</code> severity.</p> <p>Note</p> <p>To use the default logic in combination with your sources - use the <code>auto</code> value.</p> <p>Example logic for the following vendor severity levels when scanning an Alpine image:</p> <pre><code>\"VendorSeverity\": {\n  \"ghsa\": 3,\n  \"nvd\": 4,\n}\n</code></pre> <ul> <li><code>--vuln-severity-source auto,nvd</code> - severity is <code>CRITICAL</code>, got from <code>auto</code>.</li> <li><code>--vuln-severity-source alpine,auto</code> - severity is <code>CRITICAL</code>, got from <code>auto</code>.</li> <li><code>--vuln-severity-source alpine,ghsa</code> - severity is <code>HIGH</code>, got from <code>ghsa</code>.</li> <li><code>--vuln-severity-source alpine,alma</code> - severity is <code>UNKNOWN</code>.</li> </ul> <ol> <li> <p>https://github.com/GoogleContainerTools/distroless \u21a9\u21a9</p> </li> </ol>"},{"location":"docs/scanner/misconfiguration/","title":"Misconfiguration Scanning","text":"<p>Trivy provides built-in checks to detect configuration issues in popular Infrastructure as Code files, such as: Docker, Kubernetes, Terraform, CloudFormation, and more.  In addition to built-in checks, you can write your own custom checks, as you can see here.</p>"},{"location":"docs/scanner/misconfiguration/#quick-start","title":"Quick start","text":"<p>Simply specify a directory containing IaC files such as Terraform, CloudFormation, Azure ARM templates, Helm Charts and Dockerfile.</p> <pre><code>$ trivy config [YOUR_IaC_DIRECTORY]\n</code></pre> <p>Example</p> <pre><code>$ ls build/\nDockerfile\n$ trivy config ./build\n2022-05-16T13:29:29.952+0100    INFO    Detected config files: 1\n\nDockerfile (dockerfile)\n=======================\nTests: 23 (SUCCESSES: 22, FAILURES: 1)\nFailures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)\n\nMEDIUM: Specify a tag in the 'FROM' statement for image 'alpine'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nWhen using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.\n\nSee https://avd.aquasec.com/misconfig/ds001\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nDockerfile:1\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1 [ FROM alpine:latest\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>You can also enable misconfiguration detection in container image, filesystem and git repository scanning via <code>--scanners misconfig</code>.</p> <pre><code>$ trivy image --scanners misconfig IMAGE_NAME\n</code></pre> <pre><code>$ trivy fs --scanners misconfig /path/to/dir\n</code></pre> <p>Note</p> <p>Misconfiguration detection is not enabled by default in <code>image</code>, <code>fs</code> and <code>repo</code> subcommands.</p> <p>Unlike the <code>config</code> subcommand, <code>image</code>, <code>fs</code> and <code>repo</code> subcommands can also scan for vulnerabilities and secrets at the same time.  You can specify <code>--scanners vuln,misconfig,secret</code> to enable vulnerability and secret detection as well as misconfiguration detection.</p> <p>Example</p> <pre><code>$ ls myapp/\nDockerfile Pipfile.lock\n$ trivy fs --scanners vuln,misconfig,secret --severity HIGH,CRITICAL myapp/\n2022-05-16T13:42:21.440+0100    INFO    Number of language-specific files: 1\n2022-05-16T13:42:21.440+0100    INFO    Detecting pipenv vulnerabilities...\n2022-05-16T13:42:21.440+0100    INFO    Detected config files: 1\n\nPipfile.lock (pipenv)\n=====================\nTotal: 1 (HIGH: 1, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Library  \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 httplib2 \u2502 CVE-2021-21240 \u2502 HIGH     \u2502 0.12.1            \u2502 0.19.0        \u2502 python-httplib2: Regular expression denial of service via \u2502\n\u2502          \u2502                \u2502          \u2502                   \u2502               \u2502 malicious header                                          \u2502\n\u2502          \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2021-21240                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nDockerfile (dockerfile)\n=======================\nTests: 17 (SUCCESSES: 16, FAILURES: 1)\nFailures: 1 (HIGH: 1, CRITICAL: 0)\n\nHIGH: Last USER command in Dockerfile should not be 'root'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n\nSee https://avd.aquasec.com/misconfig/ds002\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nDockerfile:3\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3 [ USER root\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>In the above example, Trivy detected vulnerabilities of Python dependencies and misconfigurations in Dockerfile.</p>"},{"location":"docs/scanner/misconfiguration/#type-detection","title":"Type detection","text":"<p>The specified directory can contain mixed types of IaC files. Trivy automatically detects config types and applies relevant checks.</p> <p>For example, the following example holds IaC files for Terraform, CloudFormation, Kubernetes, Helm Charts, and Dockerfile in the same directory.</p> <pre><code>$ ls iac/\nDockerfile  deployment.yaml  main.tf mysql-8.8.26.tar\n$ trivy config --severity HIGH,CRITICAL ./iac\n</code></pre> Result <pre><code>2022-06-06T11:01:21.142+0100    INFO    Detected config files: 8\n\nDockerfile (dockerfile)\n\nTests: 21 (SUCCESSES: 20, FAILURES: 1)\nFailures: 1 (MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\nHIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n\nSee https://avd.aquasec.com/misconfig/ds002\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\ndeployment.yaml (kubernetes)\n\nTests: 20 (SUCCESSES: 15, FAILURES: 5)\nFailures: 5 (MEDIUM: 4, HIGH: 1, CRITICAL: 0)\n\nMEDIUM: Container 'hello-kubernetes' of Deployment 'hello-kubernetes' should set 'securityContext.allowPrivilegeEscalation' to false\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\n\nSee https://avd.aquasec.com/misconfig/ksv001\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n deployment.yaml:16-19\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  16 \u250c       - name: hello-kubernetes\n  17 \u2502         image: hello-kubernetes:1.5\n  18 \u2502         ports:\n  19 \u2514         - containerPort: 8080\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nHIGH: Deployment 'hello-kubernetes' should not specify '/var/run/docker.socker' in 'spec.template.volumes.hostPath.path'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nMounting docker.sock from the host can give the container full root access to the host.\n\nSee https://avd.aquasec.com/misconfig/ksv006\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n deployment.yaml:6-29\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   6 \u250c   replicas: 3\n   7 \u2502   selector:\n   8 \u2502     matchLabels:\n   9 \u2502       app: hello-kubernetes\n  10 \u2502   template:\n  11 \u2502     metadata:\n  12 \u2502       labels:\n  13 \u2502         app: hello-kubernetes\n  14 \u2514     spec:\n  ..   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nMEDIUM: Container 'hello-kubernetes' of Deployment 'hello-kubernetes' should set 'securityContext.runAsNonRoot' to true\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.\n\nSee https://avd.aquasec.com/misconfig/ksv012\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n deployment.yaml:16-19\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  16 \u250c       - name: hello-kubernetes\n  17 \u2502         image: hello-kubernetes:1.5\n  18 \u2502         ports:\n  19 \u2514         - containerPort: 8080\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nMEDIUM: Deployment 'hello-kubernetes' should not set 'spec.template.volumes.hostPath'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nHostPath volumes must be forbidden.\n\nSee https://avd.aquasec.com/misconfig/ksv023\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n deployment.yaml:6-29\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   6 \u250c   replicas: 3\n   7 \u2502   selector:\n   8 \u2502     matchLabels:\n   9 \u2502       app: hello-kubernetes\n  10 \u2502   template:\n  11 \u2502     metadata:\n  12 \u2502       labels:\n  13 \u2502         app: hello-kubernetes\n  14 \u2514     spec:\n  ..   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nMEDIUM: Deployment 'hello-kubernetes' should set 'securityContext.sysctl' to the allowed values\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nSysctls can disable security mechanisms or affect all containers on a host, and should be disallowed except for an allowed 'safe' subset. A sysctl is considered safe if it is namespaced in the container or the Pod, and it is isolated from other Pods or processes on the same Node.\n\nSee https://avd.aquasec.com/misconfig/ksv026\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n deployment.yaml:6-29\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   6 \u250c   replicas: 3\n   7 \u2502   selector:\n   8 \u2502     matchLabels:\n   9 \u2502       app: hello-kubernetes\n  10 \u2502   template:\n  11 \u2502     metadata:\n  12 \u2502       labels:\n  13 \u2502         app: hello-kubernetes\n  14 \u2514     spec:\n  ..   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\nmysql-8.8.26.tar:templates/primary/statefulset.yaml (helm)\n\nTests: 20 (SUCCESSES: 18, FAILURES: 2)\nFailures: 2 (MEDIUM: 2, HIGH: 0, CRITICAL: 0)\n\nMEDIUM: Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nA program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\n\nSee https://avd.aquasec.com/misconfig/ksv001\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n mysql-8.8.26.tar:templates/primary/statefulset.yaml:56-130\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  56 \u250c         - name: mysql\n  57 \u2502           image: docker.io/bitnami/mysql:8.0.28-debian-10-r23\n  58 \u2502           imagePullPolicy: \"IfNotPresent\"\n  59 \u2502           securityContext:\n  60 \u2502             runAsUser: 1001\n  61 \u2502           env:\n  62 \u2502             - name: BITNAMI_DEBUG\n  63 \u2502               value: \"false\"\n  64 \u2514             - name: MYSQL_ROOT_PASSWORD\n  ..   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nMEDIUM: Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n'runAsNonRoot' forces the running image to run as a non-root user to ensure least privileges.\n\nSee https://avd.aquasec.com/misconfig/ksv012\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n mysql-8.8.26.tar:templates/primary/statefulset.yaml:56-130\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  56 \u250c         - name: mysql\n  57 \u2502           image: docker.io/bitnami/mysql:8.0.28-debian-10-r23\n  58 \u2502           imagePullPolicy: \"IfNotPresent\"\n  59 \u2502           securityContext:\n  60 \u2502             runAsUser: 1001\n  61 \u2502           env:\n  62 \u2502             - name: BITNAMI_DEBUG\n  63 \u2502               value: \"false\"\n  64 \u2514             - name: MYSQL_ROOT_PASSWORD\n  ..   \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>You can see the config type next to each file name.</p> <p>Example</p> <pre><code>Dockerfile (dockerfile)\n=======================\nTests: 23 (SUCCESSES: 22, FAILURES: 1)\nFailures: 1 (HIGH: 1, CRITICAL: 0)\n\n...\n\ndeployment.yaml (kubernetes)\n============================\nTests: 28 (SUCCESSES: 15, FAILURES: 13)\nFailures: 13 (MEDIUM: 4, HIGH: 1, CRITICAL: 0)\n\n...\n\nmain.tf (terraform)\n===================\nTests: 23 (SUCCESSES: 14, FAILURES: 9)\nFailures: 9 (HIGH: 6, CRITICAL: 1)\n\n...\n\nbucket.yaml (cloudformation)\n============================\nTests: 9 (SUCCESSES: 3, FAILURES: 6)\nFailures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 4, CRITICAL: 0)\n\n...\n\nmysql-8.8.26.tar:templates/primary/statefulset.yaml (helm)\n==========================================================\nTests: 20 (SUCCESSES: 18, FAILURES: 2)\nFailures: 2 (MEDIUM: 2, HIGH: 0, CRITICAL: 0)\n</code></pre>"},{"location":"docs/scanner/misconfiguration/#external-connectivity","title":"External connectivity","text":"<p>Trivy needs to connect to the internet to download the checks bundle. If you are running Trivy in an air-gapped environment, or an tightly controlled network, please refer to the Advanced Network Scenarios document.</p>"},{"location":"docs/scanner/misconfiguration/#configuration","title":"Configuration","text":"<p>More misconfiguration scanning specific configurations can be found here.</p>"},{"location":"docs/scanner/misconfiguration/check/builtin/","title":"Built-in Checks","text":""},{"location":"docs/scanner/misconfiguration/check/builtin/#checks-sources","title":"Checks Sources","text":"<p>Trivy has an extensive library of misconfiguration checks that is maintained at https://github.com/aquasecurity/trivy-checks. Trivy checks are mainly written in Rego, while some checks are written in Go. See here for the list of supported config types.</p>"},{"location":"docs/scanner/misconfiguration/check/builtin/#checks-bundle","title":"Checks Bundle","text":"<p>When performing a misconfiguration scan, Trivy will automatically download the relevant Checks bundle. The bundle is cached locally and Trivy will reuse it for subsequent scans on the same machine. Trivy takes care of updating the cache automatically, so normally users can be oblivious to it.</p>"},{"location":"docs/scanner/misconfiguration/check/builtin/#checks-distribution","title":"Checks Distribution","text":"<p>Trivy checks are distributed as an OPA bundle hosted in the following GitHub Container Registry: https://ghcr.io/aquasecurity/trivy-checks. Trivy checks for updates to OPA bundle on GHCR every 24 hours and pulls it if there are any updates.</p>"},{"location":"docs/scanner/misconfiguration/check/builtin/#external-connectivity","title":"External connectivity","text":"<p>Trivy needs to connect to the internet to download the bundle. If you are running Trivy in an air-gapped environment, or an tightly controlled network, please refer to the Advanced Network Scenarios document. The Checks bundle is also embedded in the Trivy binary (at build time), and will be used as a fallback if Trivy is unable to download the bundle. This means that you can still scan for misconfigurations in an air-gapped environment using the Checks from the time of the Trivy release you are using.</p>"},{"location":"docs/scanner/misconfiguration/config/config/","title":"Configuration","text":"<p>This page describes misconfiguration-specific configuration.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#enabling-a-subset-of-misconfiguration-scanners","title":"Enabling a subset of misconfiguration scanners","text":"<p>It's possible to only enable certain misconfiguration scanners if you prefer. You can do so by passing the <code>--misconfig-scanners</code> option. This flag takes a comma-separated list of configuration scanner types.</p> <pre><code>trivy config --misconfig-scanners=terraform,dockerfile .\n</code></pre> <p>Will only scan for misconfigurations that pertain to Terraform and Dockerfiles.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#loading-custom-checks","title":"Loading custom checks","text":"<p>You can load check files or directories including your custom checks using the <code>--config-check</code> flag. This can be repeated for specifying multiple files or directories.</p> <pre><code>trivy config --config-check custom-policy/policy --config-check combine/policy --config-check policy.rego --namespaces user myapp\n</code></pre> <p>You can load checks bundle as OCI Image from a Container Registry using the <code>--checks-bundle-repository</code> flag.</p> <pre><code>trivy config --checks-bundle-repository myregistry.local/mychecks --namespaces user myapp\n</code></pre>"},{"location":"docs/scanner/misconfiguration/config/config/#passing-custom-data","title":"Passing custom data","text":"<p>You can pass directories including your custom data through <code>--data</code> option. This can be repeated for specifying multiple directories.</p> <pre><code>cd examples/misconf/custom-data\ntrivy config --config-check ./my-check --data ./data --namespaces user ./configs\n</code></pre> <p>For more details, see Custom Data.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#passing-namespaces","title":"Passing namespaces","text":"<p>By default, Trivy evaluates checks defined in <code>builtin.*</code>. If you want to evaluate custom checks in other packages, you have to specify package prefixes through <code>--namespaces</code> option. This can be repeated for specifying multiple packages.</p> <pre><code>trivy config --config-check ./my-check --namespaces main --namespaces user ./configs\n</code></pre>"},{"location":"docs/scanner/misconfiguration/config/config/#private-terraform-registries","title":"Private Terraform registries","text":"<p>Trivy can download Terraform code from private registries. To pass credentials you must use the <code>TF_TOKEN_</code> environment variables. You cannot use a <code>.terraformrc</code> or <code>terraform.rc</code> file, these are not supported by trivy yet.</p> <p>From the Terraform docs:</p> <p>Environment variable names should have the prefix TF_TOKEN_ added to the domain name, with periods encoded as underscores. For example, the value of a variable named <code>TF_TOKEN_app_terraform_io</code> will be used as a bearer authorization token when the CLI makes service requests to the hostname <code>app.terraform.io</code>.</p> <p>You must convert domain names containing non-ASCII characters to their punycode equivalent with an ACE prefix. For example, token credentials for <code>\u4f8b\u3048\u3070.com</code> must be set in a variable called <code>TF_TOKEN_xn--r8j3dr99h_com</code>.</p> <p>Hyphens are also valid within host names but usually invalid as variable names and may be encoded as double underscores. For example, you can set a token for the domain name caf\u00e9.fr as TF_TOKEN_xn--caf-dma_fr or TF_TOKEN_xn_cafdmafr.</p> <p>If multiple variables evaluate to the same hostname, Trivy will choose the environment variable name where the dashes have not been encoded as double underscores.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#scan-arbitrary-json-and-yaml-configurations","title":"Scan arbitrary JSON and YAML configurations","text":"<p>By default, scanning JSON and YAML configurations is disabled, since Trivy does not contain built-in checks for these configurations. To enable it, pass the <code>json</code> or <code>yaml</code> to <code>--misconfig-scanners</code>. See Enabling a subset of misconfiguration scanners for more information. Trivy will pass each file as is to the checks input.</p> <p>Example</p> <pre><code>$ cat iac/serverless.yaml\nservice: serverless-rest-api-with-pynamodb\n\nframeworkVersion: \"&gt;=2.24.0\"\n\nplugins:\n  - serverless-python-requirements\n...\n\n$ cat serverless.rego\n# METADATA\n# title: Serverless Framework service name not starting with \"aws-\"\n# description: Ensure that Serverless Framework service names start with \"aws-\"\n# schemas:\n#   - input: schema[\"serverless-schema\"]\n# custom:\n#   avd_id: AVD-SF-0001\n#   severity: LOW\npackage user.serverless001\n\ndeny[res] {\n    not startswith(input.service, \"aws-\")\n    res := result.new(\n        sprintf(\"Service name %q is not allowed\", [input.service]),\n        input.service\n    )\n}\n\n$ trivy config --misconfig-scanners=json,yaml --config-check ./serverless.rego --check-namespaces user ./iac\nserverless.yaml (yaml)\n\nTests: 4 (SUCCESSES: 3, FAILURES: 1)\nFailures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\nLOW: Service name \"serverless-rest-api-with-pynamodb\" is not allowed\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nEnsure that Serverless Framework service names start with \"aws-\"\n</code></pre> <p>Note</p> <p>In the case above, the custom check specified has a metadata annotation for the input schema <code>input: schema[\"serverless-schema\"]</code>. This allows Trivy to type check the input IaC files provided.</p> <p>Optionally, you can also pass schemas using the <code>config-file-schemas</code> flag. Trivy will use these schemas for file filtering and type checking in Rego checks.</p> <p>Example</p> <pre><code>$ trivy config --misconfig-scanners=json,yaml --config-check ./serverless.rego --check-namespaces user --config-file-schemas ./serverless-schema.json ./iac\n</code></pre> <p>If the <code>--config-file-schemas</code> flag is specified Trivy ensures that each input IaC config file being scanned is type-checked against the schema. If the input file does not match any of the passed schemas, it will be ignored.</p> <p>If the schema is specified in the check metadata and is in the directory specified in the <code>--config-check</code> argument, it will be automatically loaded as specified here, and will only be used for type checking in Rego.</p> <p>Note</p> <p>If a user specifies the <code>--config-file-schemas</code> flag, all input IaC config files are ensured that they pass type-checking. It is not required to pass an input schema in case type checking is not required. This is helpful for scenarios where you simply want to write a Rego check and pass in IaC input for it. Such a use case could include scanning for a new service which Trivy might not support just yet.</p> <p>Tip</p> <p>It is also possible to specify multiple input schemas with <code>--config-file-schema</code> flag as it can accept a comma separated list of file paths or a directory as input. In the case of multiple schemas being specified, all of them will be evaluated against all the input files.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#filtering-resources-by-inline-comments","title":"Filtering resources by inline comments","text":"<p>Trivy supports ignoring misconfigured resources by inline comments for Terraform, CloudFormation and Helm configuration files only.</p> <p>In cases where Trivy can detect comments of a specific format immediately adjacent to resource definitions, it is possible to ignore findings from a single source of resource definition (in contrast to <code>.trivyignore</code>, which has a directory-wide scope on all of the files scanned). The format for these comments is <code>trivy:ignore:&lt;rule&gt;</code> immediately following the format-specific line-comment token.</p> <p>The ignore rule must contain one of the possible check IDs that can be found in its metadata: ID, short code or alias. The <code>id</code> from the metadata is not case-sensitive, so you can specify, for example, <code>AVD-AWS-0089</code> or <code>avd-aws-0089</code>.</p> <p>For example, to ignore a misconfiguration ID <code>AVD-GCP-0051</code> in a Terraform HCL file:</p> <pre><code>#trivy:ignore:AVD-GCP-0051\nresource \"google_container_cluster\" \"example\" {\n  name     = var.cluster_name\n  location = var.region\n}\n</code></pre> <p>You can add multiple ignores on the same comment line: <pre><code>#trivy:ignore:AVD-GCP-0051 trivy:ignore:AVD-GCP-0053\nresource \"google_container_cluster\" \"example\" {\n  name     = var.cluster_name\n  location = var.region\n}\n</code></pre></p> <p>You can also specify a long ID, which is formed as follows: <code>&lt;provider&gt;-&lt;service&gt;-&lt;short-code&gt;</code>.</p> <p>As an example, consider the following check metadata:</p> <p><pre><code># custom:\n  # id: AVD-AWS-0089\n  # avd_id: AVD-AWS-0089\n  # provider: aws\n  # service: s3\n  # severity: LOW\n  # short_code: enable-logging\n</code></pre> Long ID would look like the following: <code>aws-s3-enable-logging</code>.</p> <p>Example for CloudFromation: <pre><code>AWSTemplateFormatVersion: \"2010-09-09\"\nResources:\n#trivy:ignore:*\n  S3Bucket:\n    Type: 'AWS::S3::Bucket'\n    Properties:\n      BucketName: test-bucket\n</code></pre></p> <p>Note</p> <p>Ignore rules for Helm files should be placed before the YAML object, since only it contains the location data needed for ignoring.</p> <p>Example for Helm: <pre><code>      serviceAccountName: \"testchart.serviceAccountName\"\n      containers:\n        # trivy:ignore:KSV018\n        - name: \"testchart\"\n          securityContext:\n            runAsUser: 1000\n            runAsGroup: 3000\n          image: \"your-repository/your-image:your-tag\"\n          imagePullPolicy: \"Always\"\n</code></pre></p>"},{"location":"docs/scanner/misconfiguration/config/config/#expiration-date","title":"Expiration Date","text":"<p>You can specify the expiration date of the ignore rule in <code>yyyy-mm-dd</code> format. This is a useful feature when you want to make sure that an ignored issue is not forgotten and worth revisiting in the future. For example: <pre><code>#trivy:ignore:aws-s3-enable-logging:exp:2024-03-10\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"test\"\n}\n</code></pre></p> <p>The <code>aws-s3-enable-logging</code> check will be ignored until <code>2024-03-10</code> until the ignore rule expires.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#ignoring-by-attributes","title":"Ignoring by attributes","text":"<p>You can ignore a resource by its attribute value. This is useful when using the <code>for-each</code> meta-argument. For example:</p> <pre><code>locals {\n  ports = [\"3306\", \"5432\"]\n}\n\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=3306]\nresource \"aws_security_group_rule\" \"example\" {\n  for_each                 = toset(local.ports)\n  type                     = \"ingress\"\n  from_port                = each.key\n  to_port                  = each.key\n  protocol                 = \"TCP\"\n  cidr_blocks              = [\"0.0.0.0/0\"]\n  security_group_id        = aws_security_group.example.id\n  source_security_group_id = aws_security_group.example.id\n}\n</code></pre> <p>The <code>aws-ec2-no-public-ingress-sgr</code> check will be ignored only for the <code>aws_security_group_rule</code> resource with port number <code>5432</code>. It is important to note that the ignore rule should not enclose the attribute value in quotes, despite the fact that the port is represented as a string.</p> <p>If you want to ignore multiple resources on different attributes, you can specify multiple ignore rules:</p> <pre><code>#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=3306]\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=5432]\n</code></pre> <p>You can also ignore a resource on multiple attributes in the same rule: <pre><code>locals {\n  rules = {\n    first = {\n      port = 1000\n      type = \"ingress\"\n    },\n    second = {\n      port = 1000\n      type = \"egress\"\n    }\n  }\n}\n\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=1000,type=egress]\nresource \"aws_security_group_rule\" \"example\" {\n  for_each = { for k, v in local.rules : k =&gt; v }\n\n  type                     = each.value.type\n  from_port                = each.value.port\n  to_port                  = each.value.port\n  protocol                 = \"TCP\"\n  cidr_blocks              = [\"0.0.0.0/0\"]\n  security_group_id        = aws_security_group.example.id\n  source_security_group_id = aws_security_group.example.id\n}\n</code></pre></p> <p>Checks can also be ignored by nested attributes:</p> <pre><code>#trivy:ignore:*[logging_config.prefix=myprefix]\nresource \"aws_cloudfront_distribution\" \"example\" {\n  logging_config {\n    include_cookies = false\n    bucket          = \"mylogs.s3.amazonaws.com\"\n    prefix          = \"myprefix\"\n  }\n}\n</code></pre>"},{"location":"docs/scanner/misconfiguration/config/config/#ignoring-module-issues","title":"Ignoring module issues","text":"<p>Issues in third-party modules cannot be ignored using the method described above, because you may not have access to modify the module source code. In such a situation you can add ignore rules above the module block, for example:</p> <pre><code>#trivy:ignore:aws-s3-enable-logging\nmodule \"s3_bucket\" {\n  source = \"terraform-aws-modules/s3-bucket/aws\"\n\n  bucket = \"my-s3-bucket\"\n}\n</code></pre> <p>An example of ignoring checks for a specific bucket in a module: <pre><code>locals {\n  bucket = [\"test1\", \"test2\"]\n}\n\n#trivy:ignore:*[bucket=test1]\nmodule \"s3_bucket\" {\n  for_each = toset(local.bucket)\n  source   = \"terraform-aws-modules/s3-bucket/aws\"\n  bucket   = each.value\n}\n</code></pre></p>"},{"location":"docs/scanner/misconfiguration/config/config/#support-for-wildcards","title":"Support for Wildcards","text":"<p>You can use wildcards in the <code>ws</code> (workspace) and <code>ignore</code> sections of the ignore rules.</p> <pre><code># trivy:ignore:aws-s3-*:ws:dev-*\n</code></pre> <p>This example ignores all checks starting with <code>aws-s3-</code> for workspaces matching the pattern <code>dev-*</code>.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#expiration-date_1","title":"Expiration Date","text":"<p>You can specify the expiration date of the ignore rule in <code>yyyy-mm-dd</code> format. This is a useful feature when you want to make sure that an ignored issue is not forgotten and worth revisiting in the future. For example: <pre><code>#trivy:ignore:aws-s3-enable-logging:exp:2024-03-10\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"test\"\n}\n</code></pre></p> <p>The <code>aws-s3-enable-logging</code> check will be ignored until <code>2024-03-10</code> until the ignore rule expires.</p>"},{"location":"docs/scanner/misconfiguration/config/config/#ignoring-by-attributes_1","title":"Ignoring by attributes","text":"<p>You can ignore a resource by its attribute value. This is useful when using the <code>for-each</code> meta-argument. For example:</p> <pre><code>locals {\n  ports = [\"3306\", \"5432\"]\n}\n\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=3306]\nresource \"aws_security_group_rule\" \"example\" {\n  for_each                 = toset(local.ports)\n  type                     = \"ingress\"\n  from_port                = each.key\n  to_port                  = each.key\n  protocol                 = \"TCP\"\n  cidr_blocks              = [\"0.0.0.0/0\"]\n  security_group_id        = aws_security_group.example.id\n  source_security_group_id = aws_security_group.example.id\n}\n</code></pre> <p>The <code>aws-ec2-no-public-ingress-sgr</code> check will be ignored only for the <code>aws_security_group_rule</code> resource with port number <code>5432</code>. It is important to note that the ignore rule should not enclose the attribute value in quotes, despite the fact that the port is represented as a string.</p> <p>If you want to ignore multiple resources on different attributes, you can specify multiple ignore rules:</p> <pre><code>#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=3306]\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=5432]\n</code></pre> <p>You can also ignore a resource on multiple attributes in the same rule: <pre><code>locals {\n  rules = {\n    first = {\n      port = 1000\n      type = \"ingress\"\n    },\n    second = {\n      port = 1000\n      type = \"egress\"\n    }\n  }\n}\n\n#trivy:ignore:aws-ec2-no-public-ingress-sgr[from_port=1000,type=egress]\nresource \"aws_security_group_rule\" \"example\" {\n  for_each = { for k, v in local.rules : k =&gt; v }\n\n  type                     = each.value.type\n  from_port                = each.value.port\n  to_port                  = each.value.port\n  protocol                 = \"TCP\"\n  cidr_blocks              = [\"0.0.0.0/0\"]\n  security_group_id        = aws_security_group.example.id\n  source_security_group_id = aws_security_group.example.id\n}\n</code></pre></p> <p>Checks can also be ignored by nested attributes:</p> <pre><code>#trivy:ignore:*[logging_config.prefix=myprefix]\nresource \"aws_cloudfront_distribution\" \"example\" {\n  logging_config {\n    include_cookies = false\n    bucket          = \"mylogs.s3.amazonaws.com\"\n    prefix          = \"myprefix\"\n  }\n}\n</code></pre>"},{"location":"docs/scanner/misconfiguration/config/config/#ignoring-module-issues_1","title":"Ignoring module issues","text":"<p>Issues in third-party modules cannot be ignored using the method described above, because you may not have access to modify the module source code. In such a situation you can add ignore rules above the module block, for example:</p> <pre><code>#trivy:ignore:aws-s3-enable-logging\nmodule \"s3_bucket\" {\n  source = \"terraform-aws-modules/s3-bucket/aws\"\n\n  bucket = \"my-s3-bucket\"\n}\n</code></pre> <p>An example of ignoring checks for a specific bucket in a module: <pre><code>locals {\n  bucket = [\"test1\", \"test2\"]\n}\n\n#trivy:ignore:*[bucket=test1]\nmodule \"s3_bucket\" {\n  for_each = toset(local.bucket)\n  source   = \"terraform-aws-modules/s3-bucket/aws\"\n  bucket   = each.value\n}\n</code></pre></p>"},{"location":"docs/scanner/misconfiguration/config/config/#support-for-wildcards_1","title":"Support for Wildcards","text":"<p>You can use wildcards in the <code>ws</code> (workspace) and <code>ignore</code> sections of the ignore rules.</p> <pre><code># trivy:ignore:aws-s3-*:ws:dev-*\n</code></pre> <p>This example ignores all checks starting with <code>aws-s3-</code> for workspaces matching the pattern <code>dev-*</code>.</p>"},{"location":"docs/scanner/misconfiguration/custom/","title":"Custom Checks","text":""},{"location":"docs/scanner/misconfiguration/custom/#overview","title":"Overview","text":"<p>You can write custom checks in Rego. Once you finish writing custom checks, you can pass the check files or the directory where those checks are stored with --config-check` option.</p> <pre><code>trivy config --config-check /path/to/policy.rego --config-check /path/to/custom_checks --namespaces user /path/to/config_dir\n</code></pre> <p>As for <code>--namespaces</code> option, the detail is described as below.</p>"},{"location":"docs/scanner/misconfiguration/custom/#file-formats","title":"File formats","text":"<p>If a file name matches the following file patterns, Trivy will parse the file and pass it as input to your Rego policy.</p> File format File pattern JSON <code>*.json</code> YAML <code>*.yaml</code> and <code>*.yml</code> Dockerfile <code>Dockerfile</code>, <code>Dockerfile.*</code>, and <code>*.Dockerfile</code> Containerfile <code>Containerfile</code>, <code>Containerfile.*</code>, and <code>*.Containerfile</code> Terraform <code>*.tf</code> and <code>*.tf.json</code>"},{"location":"docs/scanner/misconfiguration/custom/#configuration-languages","title":"Configuration languages","text":"<p>In the above general file formats, Trivy automatically identifies the following types of configuration files:</p> <ul> <li>CloudFormation (JSON/YAML)</li> <li>Kubernetes (JSON/YAML)</li> <li>Helm (YAML)</li> <li>Terraform Plan (JSON/Snapshot)</li> </ul> <p>This is useful for filtering inputs, as described below.</p>"},{"location":"docs/scanner/misconfiguration/custom/#rego-format","title":"Rego format","text":"<p>A single package must contain only one policy.</p> <p>Example</p> <pre><code># METADATA\n# title: Deployment not allowed\n# description: Deployments are not allowed because of some reasons.\n# schemas:\n#   - input: schema[\"kubernetes\"]\n# custom:\n#   id: ID001\n#   severity: LOW\n#   input:\n#     selector: \n#     - type: kubernetes\npackage user.kubernetes.ID001\n\ndeny[res] {\n    input.kind == \"Deployment\"\n    msg := sprintf(\"Found deployment '%s' but deployments are not allowed\", [input.metadata.name])\n    res := result.new(msg, input.kind)\n}\n</code></pre> <p>In this example, ID001 \"Deployment not allowed\" is defined under <code>user.kubernetes.ID001</code>. If you add a new custom policy, it must be defined under a new package like <code>user.kubernetes.ID002</code>.</p>"},{"location":"docs/scanner/misconfiguration/custom/#policy-structure","title":"Policy structure","text":"<code># METADATA</code> (optional unless the check will be contributed into Trivy) <ul> <li>SHOULD be defined for clarity since these values will be displayed in the scan results</li> <li><code>custom.input</code> SHOULD be set to indicate the input type the policy should be applied to. See list of available types</li> </ul> <code>package</code> (required) <ul> <li>MUST follow the Rego's specification</li> <li>MUST be unique per policy</li> <li>SHOULD include policy id for uniqueness</li> <li>MAY include the group name such as <code>kubernetes</code> for clarity<ul> <li>Group name has no effect on policy evaluation</li> </ul> </li> </ul> <code>deny</code> (required) <ul> <li>SHOULD be <code>deny</code> or start with <code>deny_</code><ul> <li>Although <code>warn</code>, <code>warn_*</code>, <code>violation</code>, <code>violation_</code> also work for compatibility, <code>deny</code> is recommended as severity can be defined in <code>__rego_metadata__</code>.</li> </ul> </li> <li>SHOULD return ONE OF:<ul> <li>The result of a call to <code>result.new(msg, cause)</code>. The <code>msg</code> is a <code>string</code> describing the issue occurrence, and the <code>cause</code> is the property/object where the issue occurred. Providing this allows Trivy to ascertain line numbers and highlight code in the output. </li> <li>A <code>string</code> denoting the detected issue<ul> <li>Although <code>object</code> with <code>msg</code> field is accepted, other fields are dropped and <code>string</code> is recommended if <code>result.new()</code> is not utilised.</li> <li>e.g. <code>{\"msg\": \"deny message\", \"details\": \"something\"}</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"docs/scanner/misconfiguration/custom/#package","title":"Package","text":"<p>A package name must be unique per policy.</p> <p>Example</p> <pre><code>package user.kubernetes.ID001\n</code></pre> <p>By default, only <code>builtin.*</code> packages will be evaluated. If you define custom packages, you have to specify the package prefix via <code>--namespaces</code> option. By default, Trivy only runs in its own namespace, unless specified by the user. Note that the custom namespace does not have to be <code>user</code> as in this example. It could be anything user-defined.</p> <pre><code>trivy config --config-check /path/to/custom_checks --namespaces user /path/to/config_dir\n</code></pre> <p>In this case, <code>user.*</code> will be evaluated. Any package prefixes such as <code>main</code> and <code>user</code> are allowed.</p>"},{"location":"docs/scanner/misconfiguration/custom/#metadata","title":"Metadata","text":"<p>The check must contain a Rego Metadata section. Trivy uses standard rego metadata to define the new policy and general information about it.</p> <p>Trivy supports extra fields in the <code>custom</code> section as described below.</p> <p>Example</p> <pre><code># METADATA\n# title: Deployment not allowed\n# description: Deployments are not allowed because of some reasons.\n# custom:\n#   id: ID001\n#   severity: LOW\n#   input:\n#     selector:\n#     - type: kubernetes\n</code></pre> <p>If you are creating checks for your Trivy misconfiguration scans, some fields are optional as referenced in the table below. The <code>schemas</code> field should be used to enable policy validation using a built-in schema. It is recommended to use this to ensure your checks are  correct and do not reference incorrect properties/values.</p> Field name Allowed values Default value In table In JSON title Any characters N/A \u2705 \u2705 description Any characters - \u2705 schemas.input <code>schema[\"kubernetes\"]</code>, <code>schema[\"dockerfile\"]</code>, <code>schema[\"cloud\"]</code> (applied to all input types) - - custom.id Any characters N/A \u2705 \u2705 custom.severity <code>LOW</code>, <code>MEDIUM</code>, <code>HIGH</code>, <code>CRITICAL</code> UNKNOWN \u2705 \u2705 custom.recommended_actions Any characters - \u2705 custom.deprecated <code>true</code>, <code>false</code> <code>false</code> - \u2705 custom.input.selector.type Any item(s) in this list - \u2705 custom.minimum_trivy_version The minimum version of Trivy that's required to evaluate this check - \u2705 url Any characters - \u2705"},{"location":"docs/scanner/misconfiguration/custom/#customavd_id-and-customid","title":"custom.avd_id and custom.id","text":"<p>The AVD_ID can be used to link the check to the Aqua Vulnerability Database (AVD) entry. For example, the <code>avd_id</code> <code>AVD-AWS-0176</code> is the ID of the check in the AWS Vulnerability Database. If you are contributing your check to trivy-checks, you need to generate an ID using <code>make id</code> in the trivy-checks repository. The output of the command will provide you the next free IDs for the different providers in Trivy.</p> <p>The ID is based on the AVD_ID. For instance if the <code>avd_id</code> is <code>AVD-AWS-0176</code>, the ID is <code>ID0176</code>.</p>"},{"location":"docs/scanner/misconfiguration/custom/#customprovider","title":"custom.provider","text":"<p>The <code>provider</code> field references the provider available in Trivy. This should be the same as the provider name in the <code>pkg/iac/providers</code> directory, e.g. <code>aws</code>. </p>"},{"location":"docs/scanner/misconfiguration/custom/#customservice","title":"custom.service","text":"<p>Services are defined within a provider. For instance, RDS is a service and AWS is a provider. This should be the same as the service name in one of the provider directories. (Link), e.g. <code>aws/rds</code>.</p>"},{"location":"docs/scanner/misconfiguration/custom/#custominput","title":"custom.input","text":"<p>The <code>input</code> tells Trivy what inputs this check should be applied to. Cloud provider checks should always use the <code>selector</code> input, and should always use the <code>type</code> selector with <code>cloud</code>. Check targeting Kubernetes yaml can use <code>kubernetes</code>, RBAC can use <code>rbac</code>, and so on.</p>"},{"location":"docs/scanner/misconfiguration/custom/#subtypes-in-the-custom-data","title":"Subtypes in the custom data","text":"<p>Subtypes currently only need to be defined for cloud providers as detailed in the documentation.</p>"},{"location":"docs/scanner/misconfiguration/custom/#scan-result","title":"Scan Result","text":"<p>Some fields are displayed in scan results.</p> <pre><code>k.yaml (kubernetes)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nTests: 32 (SUCCESSES: 31, FAILURES: 1)\nFailures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\nLOW: Found deployment 'my-deployment' but deployments are not allowed\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nDeployments are not allowed because of some reasons.\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n k.yaml:1-2\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 \u250c apiVersion: v1\n   2 \u2514 kind: Deployment\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/#input","title":"Input","text":"<p>You can specify input format via the <code>custom.input</code> annotation.</p> <p>Example</p> <pre><code># METADATA\n# custom:\n#   input:\n#     combine: false\n#     selector:\n#     - type: kubernetes\n</code></pre> <code>combine</code> (boolean) The details are here. <code>selector</code> (array) <p>This option filters the input by file format or configuration language.  In the above example, Trivy passes only Kubernetes files to this policy. Even if a Dockerfile exists in the specified directory, it will not be passed to the policy as input.</p> <p>Possible values for input types are:</p> <ul> <li><code>dockerfile</code> (Dockerfile)</li> <li><code>kubernetes</code> (Kubernetes YAML/JSON)</li> <li><code>rbac</code> (Kubernetes RBAC YAML/JSON)</li> <li><code>cloud</code> (Cloud format, as defined by Trivy - this is used for Terraform, CloudFormation, and Cloud/AWS scanning)</li> <li><code>yaml</code> (Generic YAML)</li> <li><code>json</code> (Generic JSON)</li> <li><code>toml</code> (Generic TOML)</li> <li><code>terraform-raw</code> (Terraform configuration is not converted to common state as for the Cloud format, allowing for more flexible and direct checks on the original code)</li> </ul> <p>When configuration languages such as Kubernetes are not identified, file formats such as JSON will be used as <code>type</code>. When a configuration language is identified, it will overwrite <code>type</code>.</p> <p>Example</p> <p><code>pod.yaml</code> including Kubernetes Pod will be handled as <code>kubernetes</code>, not <code>yaml</code>. <code>type</code> is overwritten by <code>kubernetes</code> from <code>yaml</code>.</p> <p><code>type</code> accepts <code>kubernetes</code>, <code>dockerfile</code>, <code>cloudformation</code>, <code>terraform</code>, <code>terraformplan</code>, <code>json</code>, or <code>yaml</code>.</p>"},{"location":"docs/scanner/misconfiguration/custom/#schemas","title":"Schemas","text":"<p>See here for the detail.</p>"},{"location":"docs/scanner/misconfiguration/custom/combine/","title":"Combined input","text":""},{"location":"docs/scanner/misconfiguration/custom/combine/#overview","title":"Overview","text":"<p>Trivy usually scans each configuration file individually.  Sometimes it might be useful to compare values from different configuration files simultaneously.</p> <p>When <code>combine</code> is set to true, all config files under the specified directory are combined into one input data structure.</p> <p>Example</p> <pre><code>__rego_input__ := {\n    \"combine\": false,\n}\n</code></pre> <p>In \"combine\" mode, the <code>input</code> document becomes an array, where each element is an object with two fields:</p> <ul> <li><code>\"path\": \"path/to/file\"</code>: the relative file path of the respective file</li> <li><code>\"contents\": ...</code>: the parsed content of the respective file</li> </ul> <p>Now you can ensure that duplicate values match across the entirety of your configuration files.</p>"},{"location":"docs/scanner/misconfiguration/custom/combine/#return-value","title":"Return value","text":"<p>In \"combine\" mode, the <code>deny</code> entrypoint must return an object with two keys</p> <code>filepath</code> (required) the relative file path of the file being evaluated <code>msg</code> (required) the message describing an issue <p>Example</p> <pre><code>deny[res] {\n    resource := input[i].contents\n    ... some logic ...\n\n    res := {\n        \"filepath\": input[i].path,\n        \"msg\": \"something bad\",\n    }\n}\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/contribute-checks/","title":"Contribute Checks","text":""},{"location":"docs/scanner/misconfiguration/custom/contribute-checks/#contribute-rego-checks","title":"Contribute Rego Checks","text":"<p>The contributing section provides detailed information on how to contribute custom checks to the trivy-checks repository</p> <p>This way, they become accessible as default checks.</p>"},{"location":"docs/scanner/misconfiguration/custom/data/","title":"Custom Data","text":"<p>Custom checks may require additional data in order to make a resolution. You can pass arbitrary data files to Trivy to be used when evaluating rego checks using the <code>--config-data</code> flag.  Trivy recursively searches the specified data paths for JSON (<code>*.json</code>) and YAML (<code>*.yaml</code>) files.</p> <p>For example, consider an allowed list of resources that can be created.  Instead of hardcoding this information inside your check, you can maintain the list in a separate file.</p> <p>Example data file:</p> <pre><code>services:\n  ports:\n    - \"20\"\n    - \"20/tcp\"\n    - \"20/udp\"\n    - \"23\"\n    - \"23/tcp\"\n</code></pre> <p>Example usage in a Rego check:</p> <pre><code>import data.services\n\nports := services.ports\n</code></pre> <p>Example loading the data file:</p> <pre><code>trivy config --config-check ./checks --config-data ./data --namespaces user ./configs\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/data/#customizing-default-checks-data","title":"Customizing default checks data","text":"<p>Some checks allow you to customize the default data values. To do this, simply pass a data file via <code>--config-data</code> (see the section above).</p> <p>Table of supported data for customizing and their paths:</p> Check ID Data path Description KSV0125 <code>ksv0125.trusted_registries</code> List of trusted container registries DS031 <code>ds031.included_envs</code> List of allowed environment variables (merged with defaults) <p>Example of overriding trusted registries for <code>KSV0125</code>:</p> <pre><code>ksv0125:\n  trusted_registries:\n    - \"my-registry.example.com\"\n    - \"registry.internal.local\"\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/debug/","title":"Debugging checks","text":"<p>When working on more complex queries (or when learning Rego), it's useful to see exactly how the policy is applied. For this purpose you can use the <code>--trace-rego</code> flag. This will output a large trace from Open Policy Agent like the following:</p> <p>Tip</p> <p>Only failed checks show traces. If you want to debug a passed check, you need to make it fail on purpose.</p> <pre><code>$ trivy config --trace-rego configs/\n2022-05-16T13:47:58.853+0100    INFO    Detected config files: 1\n\nDockerfile (dockerfile)\n=======================\nTests: 23 (SUCCESSES: 21, FAILURES: 2)\nFailures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)\n\nMEDIUM: Specify a tag in the 'FROM' statement for image 'alpine'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nWhen using a 'FROM' statement you should use a specific tag to avoid uncontrolled behavior when the image is updated.\n\nSee https://avd.aquasec.com/misconfig/ds001\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Dockerfile:1\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 [ FROM alpine:latest\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nHIGH: Last USER command in Dockerfile should not be 'root'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n\nSee https://avd.aquasec.com/misconfig/ds002\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n Dockerfile:3\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   3 [ USER root\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\n\nID: DS001\nFile: Dockerfile\nNamespace: builtin.dockerfile.DS001\nQuery: data.builtin.dockerfile.DS001.deny\nMessage: Specify a tag in the 'FROM' statement for image 'alpine'\nTRACE  Enter data.builtin.dockerfile.DS001.deny = _\nTRACE  | Eval data.builtin.dockerfile.DS001.deny = _\nTRACE  | Index data.builtin.dockerfile.DS001.deny (matched 1 rule)\nTRACE  | Enter data.builtin.dockerfile.DS001.deny\nTRACE  | | Eval output = data.builtin.dockerfile.DS001.fail_latest[_]\nTRACE  | | Index data.builtin.dockerfile.DS001.fail_latest (matched 1 rule)\nTRACE  | | Enter data.builtin.dockerfile.DS001.fail_latest\nTRACE  | | | Eval output = data.builtin.dockerfile.DS001.image_tags[_]\nTRACE  | | | Index data.builtin.dockerfile.DS001.image_tags (matched 2 rules)\nTRACE  | | | Enter data.builtin.dockerfile.DS001.image_tags\nTRACE  | | | | Eval from = data.lib.docker.from[_]\nTRACE  | | | | Index data.lib.docker.from (matched 1 rule)\nTRACE  | | | | Enter data.lib.docker.from\nTRACE  | | | | | Eval instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"from\"\nTRACE  | | | | | Exit data.lib.docker.from\nTRACE  | | | | Redo data.lib.docker.from\nTRACE  | | | | | Redo instruction.Cmd = \"from\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"from\"\nTRACE  | | | | | Fail instruction.Cmd = \"from\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"from\"\nTRACE  | | | | | Fail instruction.Cmd = \"from\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | Eval name = from.Value[0]\nTRACE  | | | | Eval not startswith(name, \"$\")\nTRACE  | | | | Enter startswith(name, \"$\")\nTRACE  | | | | | Eval startswith(name, \"$\")\nTRACE  | | | | | Fail startswith(name, \"$\")\nTRACE  | | | | Eval data.builtin.dockerfile.DS001.parse_tag(name, __local505__)\nTRACE  | | | | Index data.builtin.dockerfile.DS001.parse_tag (matched 2 rules)\nTRACE  | | | | Enter data.builtin.dockerfile.DS001.parse_tag\nTRACE  | | | | | Eval split(name, \":\", __local504__)\nTRACE  | | | | | Eval [img, tag] = __local504__\nTRACE  | | | | | Exit data.builtin.dockerfile.DS001.parse_tag\nTRACE  | | | | Eval [img, tag] = __local505__\nTRACE  | | | | Eval output = {\"cmd\": from, \"img\": img, \"tag\": tag}\nTRACE  | | | | Exit data.builtin.dockerfile.DS001.image_tags\nTRACE  | | | Redo data.builtin.dockerfile.DS001.image_tags\nTRACE  | | | | Redo output = {\"cmd\": from, \"img\": img, \"tag\": tag}\nTRACE  | | | | Redo [img, tag] = __local505__\nTRACE  | | | | Redo data.builtin.dockerfile.DS001.parse_tag(name, __local505__)\nTRACE  | | | | Redo data.builtin.dockerfile.DS001.parse_tag\nTRACE  | | | | | Redo [img, tag] = __local504__\nTRACE  | | | | | Redo split(name, \":\", __local504__)\nTRACE  | | | | Enter data.builtin.dockerfile.DS001.parse_tag\nTRACE  | | | | | Eval tag = \"latest\"\nTRACE  | | | | | Eval not contains(img, \":\")\nTRACE  | | | | | Enter contains(img, \":\")\nTRACE  | | | | | | Eval contains(img, \":\")\nTRACE  | | | | | | Exit contains(img, \":\")\nTRACE  | | | | | Redo contains(img, \":\")\nTRACE  | | | | | | Redo contains(img, \":\")\nTRACE  | | | | | Fail not contains(img, \":\")\nTRACE  | | | | | Redo tag = \"latest\"\nTRACE  | | | | Redo name = from.Value[0]\nTRACE  | | | | Redo from = data.lib.docker.from[_]\nTRACE  | | | Enter data.builtin.dockerfile.DS001.image_tags\nTRACE  | | | | Eval from = data.lib.docker.from[i]\nTRACE  | | | | Index data.lib.docker.from (matched 1 rule)\nTRACE  | | | | Eval name = from.Value[0]\nTRACE  | | | | Eval cmd_obj = input.stages[j][k]\nTRACE  | | | | Eval possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Eval cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Fail cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Redo possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Redo cmd_obj = input.stages[j][k]\nTRACE  | | | | Eval possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Eval cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Fail cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Redo possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Redo cmd_obj = input.stages[j][k]\nTRACE  | | | | Eval possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Eval cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Fail cmd_obj.Cmd = possibilities[l]\nTRACE  | | | | Redo possibilities = {\"arg\", \"env\"}\nTRACE  | | | | Redo cmd_obj = input.stages[j][k]\nTRACE  | | | | Redo name = from.Value[0]\nTRACE  | | | | Redo from = data.lib.docker.from[i]\nTRACE  | | | Eval __local752__ = output.img\nTRACE  | | | Eval neq(__local752__, \"scratch\")\nTRACE  | | | Eval __local753__ = output.img\nTRACE  | | | Eval not data.builtin.dockerfile.DS001.is_alias(__local753__)\nTRACE  | | | Enter data.builtin.dockerfile.DS001.is_alias(__local753__)\nTRACE  | | | | Eval data.builtin.dockerfile.DS001.is_alias(__local753__)\nTRACE  | | | | Index data.builtin.dockerfile.DS001.is_alias (matched 1 rule, early exit)\nTRACE  | | | | Enter data.builtin.dockerfile.DS001.is_alias\nTRACE  | | | | | Eval img = data.builtin.dockerfile.DS001.get_aliases[_]\nTRACE  | | | | | Index data.builtin.dockerfile.DS001.get_aliases (matched 1 rule)\nTRACE  | | | | | Enter data.builtin.dockerfile.DS001.get_aliases\nTRACE  | | | | | | Eval from_cmd = data.lib.docker.from[_]\nTRACE  | | | | | | Index data.lib.docker.from (matched 1 rule)\nTRACE  | | | | | | Eval __local749__ = from_cmd.Value\nTRACE  | | | | | | Eval data.builtin.dockerfile.DS001.get_alias(__local749__, __local503__)\nTRACE  | | | | | | Index data.builtin.dockerfile.DS001.get_alias (matched 1 rule)\nTRACE  | | | | | | Enter data.builtin.dockerfile.DS001.get_alias\nTRACE  | | | | | | | Eval __local748__ = values[i]\nTRACE  | | | | | | | Eval lower(__local748__, __local501__)\nTRACE  | | | | | | | Eval \"as\" = __local501__\nTRACE  | | | | | | | Fail \"as\" = __local501__\nTRACE  | | | | | | | Redo lower(__local748__, __local501__)\nTRACE  | | | | | | | Redo __local748__ = values[i]\nTRACE  | | | | | | Fail data.builtin.dockerfile.DS001.get_alias(__local749__, __local503__)\nTRACE  | | | | | | Redo __local749__ = from_cmd.Value\nTRACE  | | | | | | Redo from_cmd = data.lib.docker.from[_]\nTRACE  | | | | | Fail img = data.builtin.dockerfile.DS001.get_aliases[_]\nTRACE  | | | | Fail data.builtin.dockerfile.DS001.is_alias(__local753__)\nTRACE  | | | Eval output.tag = \"latest\"\nTRACE  | | | Exit data.builtin.dockerfile.DS001.fail_latest\nTRACE  | | Redo data.builtin.dockerfile.DS001.fail_latest\nTRACE  | | | Redo output.tag = \"latest\"\nTRACE  | | | Redo __local753__ = output.img\nTRACE  | | | Redo neq(__local752__, \"scratch\")\nTRACE  | | | Redo __local752__ = output.img\nTRACE  | | | Redo output = data.builtin.dockerfile.DS001.image_tags[_]\nTRACE  | | Eval __local754__ = output.img\nTRACE  | | Eval sprintf(\"Specify a tag in the 'FROM' statement for image '%s'\", [__local754__], __local509__)\nTRACE  | | Eval msg = __local509__\nTRACE  | | Eval __local755__ = output.cmd\nTRACE  | | Eval data.lib.docker.result(msg, __local755__, __local510__)\nTRACE  | | Index data.lib.docker.result (matched 1 rule)\nTRACE  | | Enter data.lib.docker.result\nTRACE  | | | Eval object.get(cmd, \"EndLine\", 0, __local470__)\nTRACE  | | | Eval object.get(cmd, \"Path\", \"\", __local471__)\nTRACE  | | | Eval object.get(cmd, \"StartLine\", 0, __local472__)\nTRACE  | | | Eval result = {\"endline\": __local470__, \"filepath\": __local471__, \"msg\": msg, \"startline\": __local472__}\nTRACE  | | | Exit data.lib.docker.result\nTRACE  | | Eval res = __local510__\nTRACE  | | Exit data.builtin.dockerfile.DS001.deny\nTRACE  | Redo data.builtin.dockerfile.DS001.deny\nTRACE  | | Redo res = __local510__\nTRACE  | | Redo data.lib.docker.result(msg, __local755__, __local510__)\nTRACE  | | Redo data.lib.docker.result\nTRACE  | | | Redo result = {\"endline\": __local470__, \"filepath\": __local471__, \"msg\": msg, \"startline\": __local472__}\nTRACE  | | | Redo object.get(cmd, \"StartLine\", 0, __local472__)\nTRACE  | | | Redo object.get(cmd, \"Path\", \"\", __local471__)\nTRACE  | | | Redo object.get(cmd, \"EndLine\", 0, __local470__)\nTRACE  | | Redo __local755__ = output.cmd\nTRACE  | | Redo msg = __local509__\nTRACE  | | Redo sprintf(\"Specify a tag in the 'FROM' statement for image '%s'\", [__local754__], __local509__)\nTRACE  | | Redo __local754__ = output.img\nTRACE  | | Redo output = data.builtin.dockerfile.DS001.fail_latest[_]\nTRACE  | Exit data.builtin.dockerfile.DS001.deny = _\nTRACE  Redo data.builtin.dockerfile.DS001.deny = _\nTRACE  | Redo data.builtin.dockerfile.DS001.deny = _\nTRACE\n\n\nID: DS002\nFile: Dockerfile\nNamespace: builtin.dockerfile.DS002\nQuery: data.builtin.dockerfile.DS002.deny\nMessage: Last USER command in Dockerfile should not be 'root'\nTRACE  Enter data.builtin.dockerfile.DS002.deny = _\nTRACE  | Eval data.builtin.dockerfile.DS002.deny = _\nTRACE  | Index data.builtin.dockerfile.DS002.deny (matched 2 rules)\nTRACE  | Enter data.builtin.dockerfile.DS002.deny\nTRACE  | | Eval data.builtin.dockerfile.DS002.fail_user_count\nTRACE  | | Index data.builtin.dockerfile.DS002.fail_user_count (matched 1 rule, early exit)\nTRACE  | | Enter data.builtin.dockerfile.DS002.fail_user_count\nTRACE  | | | Eval __local771__ = data.builtin.dockerfile.DS002.get_user\nTRACE  | | | Index data.builtin.dockerfile.DS002.get_user (matched 1 rule)\nTRACE  | | | Enter data.builtin.dockerfile.DS002.get_user\nTRACE  | | | | Eval user = data.lib.docker.user[_]\nTRACE  | | | | Index data.lib.docker.user (matched 1 rule)\nTRACE  | | | | Enter data.lib.docker.user\nTRACE  | | | | | Eval instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"user\"\nTRACE  | | | | | Fail instruction.Cmd = \"user\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"user\"\nTRACE  | | | | | Exit data.lib.docker.user\nTRACE  | | | | Redo data.lib.docker.user\nTRACE  | | | | | Redo instruction.Cmd = \"user\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | | Eval instruction.Cmd = \"user\"\nTRACE  | | | | | Fail instruction.Cmd = \"user\"\nTRACE  | | | | | Redo instruction = input.stages[_][_]\nTRACE  | | | | Eval username = user.Value[_]\nTRACE  | | | | Exit data.builtin.dockerfile.DS002.get_user\nTRACE  | | | Redo data.builtin.dockerfile.DS002.get_user\nTRACE  | | | | Redo username = user.Value[_]\nTRACE  | | | | Redo user = data.lib.docker.user[_]\nTRACE  | | | Eval count(__local771__, __local536__)\nTRACE  | | | Eval lt(__local536__, 1)\nTRACE  | | | Fail lt(__local536__, 1)\nTRACE  | | | Redo count(__local771__, __local536__)\nTRACE  | | | Redo __local771__ = data.builtin.dockerfile.DS002.get_user\nTRACE  | | Fail data.builtin.dockerfile.DS002.fail_user_count\nTRACE  | Enter data.builtin.dockerfile.DS002.deny\nTRACE  | | Eval cmd = data.builtin.dockerfile.DS002.fail_last_user_root[_]\nTRACE  | | Index data.builtin.dockerfile.DS002.fail_last_user_root (matched 1 rule)\nTRACE  | | Enter data.builtin.dockerfile.DS002.fail_last_user_root\nTRACE  | | | Eval stage_users = data.lib.docker.stage_user[_]\nTRACE  | | | Index data.lib.docker.stage_user (matched 1 rule)\nTRACE  | | | Enter data.lib.docker.stage_user\nTRACE  | | | | Eval stage = input.stages[stage_name]\nTRACE  | | | | Eval users = [cmd | cmd = stage[_]; cmd.Cmd = \"user\"]\nTRACE  | | | | Enter cmd = stage[_]; cmd.Cmd = \"user\"\nTRACE  | | | | | Eval cmd = stage[_]\nTRACE  | | | | | Eval cmd.Cmd = \"user\"\nTRACE  | | | | | Fail cmd.Cmd = \"user\"\nTRACE  | | | | | Redo cmd = stage[_]\nTRACE  | | | | | Eval cmd.Cmd = \"user\"\nTRACE  | | | | | Exit cmd = stage[_]; cmd.Cmd = \"user\"\nTRACE  | | | | Redo cmd = stage[_]; cmd.Cmd = \"user\"\nTRACE  | | | | | Redo cmd.Cmd = \"user\"\nTRACE  | | | | | Redo cmd = stage[_]\nTRACE  | | | | | Eval cmd.Cmd = \"user\"\nTRACE  | | | | | Fail cmd.Cmd = \"user\"\nTRACE  | | | | | Redo cmd = stage[_]\nTRACE  | | | | Exit data.lib.docker.stage_user\nTRACE  | | | Redo data.lib.docker.stage_user\nTRACE  | | | | Redo users = [cmd | cmd = stage[_]; cmd.Cmd = \"user\"]\nTRACE  | | | | Redo stage = input.stages[stage_name]\nTRACE  | | | Eval count(stage_users, __local537__)\nTRACE  | | | Eval len = __local537__\nTRACE  | | | Eval minus(len, 1, __local538__)\nTRACE  | | | Eval last = stage_users[__local538__]\nTRACE  | | | Eval user = last.Value[0]\nTRACE  | | | Eval user = \"root\"\nTRACE  | | | Exit data.builtin.dockerfile.DS002.fail_last_user_root\nTRACE  | | Redo data.builtin.dockerfile.DS002.fail_last_user_root\nTRACE  | | | Redo user = \"root\"\nTRACE  | | | Redo user = last.Value[0]\nTRACE  | | | Redo last = stage_users[__local538__]\nTRACE  | | | Redo minus(len, 1, __local538__)\nTRACE  | | | Redo len = __local537__\nTRACE  | | | Redo count(stage_users, __local537__)\nTRACE  | | | Redo stage_users = data.lib.docker.stage_user[_]\nTRACE  | | Eval msg = \"Last USER command in Dockerfile should not be 'root'\"\nTRACE  | | Eval data.lib.docker.result(msg, cmd, __local540__)\nTRACE  | | Index data.lib.docker.result (matched 1 rule)\nTRACE  | | Enter data.lib.docker.result\nTRACE  | | | Eval object.get(cmd, \"EndLine\", 0, __local470__)\nTRACE  | | | Eval object.get(cmd, \"Path\", \"\", __local471__)\nTRACE  | | | Eval object.get(cmd, \"StartLine\", 0, __local472__)\nTRACE  | | | Eval result = {\"endline\": __local470__, \"filepath\": __local471__, \"msg\": msg, \"startline\": __local472__}\nTRACE  | | | Exit data.lib.docker.result\nTRACE  | | Eval res = __local540__\nTRACE  | | Exit data.builtin.dockerfile.DS002.deny\nTRACE  | Redo data.builtin.dockerfile.DS002.deny\nTRACE  | | Redo res = __local540__\nTRACE  | | Redo data.lib.docker.result(msg, cmd, __local540__)\nTRACE  | | Redo data.lib.docker.result\nTRACE  | | | Redo result = {\"endline\": __local470__, \"filepath\": __local471__, \"msg\": msg, \"startline\": __local472__}\nTRACE  | | | Redo object.get(cmd, \"StartLine\", 0, __local472__)\nTRACE  | | | Redo object.get(cmd, \"Path\", \"\", __local471__)\nTRACE  | | | Redo object.get(cmd, \"EndLine\", 0, __local470__)\nTRACE  | | Redo msg = \"Last USER command in Dockerfile should not be 'root'\"\nTRACE  | | Redo cmd = data.builtin.dockerfile.DS002.fail_last_user_root[_]\nTRACE  | Exit data.builtin.dockerfile.DS002.deny = _\nTRACE  Redo data.builtin.dockerfile.DS002.deny = _\nTRACE  | Redo data.builtin.dockerfile.DS002.deny = _\nTRACE\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/schema/","title":"Input Schema","text":""},{"location":"docs/scanner/misconfiguration/custom/schema/#overview","title":"Overview","text":"<p>Schemas are declarative documents that define the structure, data types and constraints of inputs being scanned. Trivy provides certain schemas out of the box as seen in the explorer here. You can also find the source code for the schemas here.</p> <p>It is not required to pass in schemas, in order to scan inputs by Trivy but are required if type-checking is needed. </p> <p>Checks can be defined with custom schemas that allow inputs to be verified against them. Adding an input schema enables Trivy to show more detailed error messages when an invalid input is encountered.</p>"},{"location":"docs/scanner/misconfiguration/custom/schema/#unified-schema","title":"Unified Schema","text":"<p>One of the unique advantages of Trivy is to take a variety of inputs, such as IaC files (e.g. CloudFormation, Terraform etc.) and also live cloud scanning (e.g. Trivy AWS plugin) and normalize them into a standard structure, as defined by the schema.</p> <p>An example of such an application would be scanning AWS resources. You can scan them prior to deployment via the Trivy misconfiguration scanner and also  scan them after they've been deployed in the cloud with Trivy AWS scanning. Both scan methods should yield the same result as resources are gathered into  a unified representation as defined by the Cloud schema. </p>"},{"location":"docs/scanner/misconfiguration/custom/schema/#supported-schemas","title":"Supported Schemas","text":"<p>Currently out of the box the following schemas are supported natively:</p> <ol> <li>Docker</li> <li>Kubernetes</li> <li>Cloud</li> <li>Terraform Raw Format</li> </ol> <p>You can interactively view these schemas with the Trivy Schema Explorer</p>"},{"location":"docs/scanner/misconfiguration/custom/schema/#example","title":"Example","text":"<p>As mentioned earlier, amongst other built-in schemas, Trivy offers a built in-schema for scanning Dockerfiles. It is available here Without input schemas, a check would be as follows:</p> <p>Example</p> <pre><code># METADATA\npackage mypackage\n\ndeny {\n    input.evil == \"foo bar\"\n}\n</code></pre> <p>If this check is run against an offending Dockerfile(s), there will not be any issues as the check will fail to evaluate. Although the check's failure to evaluate is legitimate, this should not result in a positive result for the scan.</p> <p>For instance if we have a check that checks for misconfigurations in a <code>Dockerfile</code>, we could define the schema as such</p> <p>Example</p> <pre><code># METADATA\n# schemas:\n# - input: schema[\"dockerfile\"]\npackage mypackage\n\ndeny {\n    input.evil == \"foo bar\"\n}\n</code></pre> <p>Here <code>input: schema[\"dockerfile\"]</code> points to a schema that expects a valid <code>Dockerfile</code> as input. An example of this can be found here.</p> <p>Now if this check is evaluated against, a more descriptive error will be available to help fix the problem.</p> <pre><code>1 error occurred: testcheck.rego:8: rego_type_error: undefined ref: input.evil\n        input.evil\n              ^\n              have: \"evil\"\n              want (one of): [\"Stages\"]\n</code></pre>"},{"location":"docs/scanner/misconfiguration/custom/schema/#custom-checks-with-custom-schemas","title":"Custom Checks with Custom Schemas","text":"<p>You can also bring a custom check that defines one or more custom schema. </p> <p>Example</p> <pre><code># METADATA\n# schemas:\n# - input: schema[\"fooschema\"]\n# - input: schema[\"barschema\"]\npackage mypackage\n\ndeny {\n    input.evil == \"foo bar\"\n}\n</code></pre> <p>The checks can be placed in a structure as follows</p> <p>Example</p> <pre><code>/Users/user/my-custom-checks\n\u251c\u2500\u2500 my_check.rego\n\u2514\u2500\u2500 schemas\n    \u2514\u2500\u2500 fooschema.json\n    \u2514\u2500\u2500 barschema.json\n</code></pre> <p>To use such a check with Trivy, use the <code>--config-check</code> flag that points to the check file or to the directory where the schemas and checks are contained.</p> <pre><code>$ trivy --config-check=/Users/user/my-custom-checks &lt;path/to/iac&gt;\n</code></pre> <p>For more details on how to define schemas within Rego checks, please see the OPA guide that describes it in more detail.</p>"},{"location":"docs/scanner/misconfiguration/custom/schema/#scan-arbitrary-json-and-yaml-configurations","title":"Scan arbitrary JSON and YAML configurations","text":"<p>By default, scanning JSON and YAML configurations is disabled, since Trivy does not contain built-in checks for these configurations. To enable it, pass the <code>json</code> or <code>yaml</code> to <code>--misconfig-scanners</code>. Trivy will pass each file as is to the checks input.</p> <p>Example</p> <pre><code>$ cat iac/serverless.yaml\nservice: serverless-rest-api-with-pynamodb\n\nframeworkVersion: \"&gt;=2.24.0\"\n\nplugins:\n  - serverless-python-requirements\n...\n\n$ cat serverless.rego\n# METADATA\n# title: Serverless Framework service name not starting with \"aws-\"\n# description: Ensure that Serverless Framework service names start with \"aws-\"\n# schemas:\n#   - input: schema[\"serverless-schema\"]\n# custom:\n#   id: SF001\n#   severity: LOW\npackage user.serverless001\n\ndeny[res] {\n    not startswith(input.service, \"aws-\")\n    res := result.new(\n        sprintf(\"Service name %q is not allowed\", [input.service]),\n        input.service\n    )\n}\n\n$ trivy config --misconfig-scanners=json,yaml --config-check ./serverless.rego --check-namespaces user ./iac\nserverless.yaml (yaml)\n\nTests: 4 (SUCCESSES: 3, FAILURES: 1)\nFailures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\nLOW: Service name \"serverless-rest-api-with-pynamodb\" is not allowed\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nEnsure that Serverless Framework service names start with \"aws-\"\n</code></pre> <p>Note</p> <p>In the case above, the custom check specified has a metadata annotation for the input schema <code>input: schema[\"serverless-schema\"]</code>. This allows Trivy to type check the input IaC files provided.</p> <p>Optionally, you can also pass schemas using the <code>config-file-schemas</code> flag. Trivy will use these schemas for file filtering and type checking in Rego checks.</p> <p>Example</p> <pre><code>$ trivy config --misconfig-scanners=json,yaml --config-check ./serverless.rego --check-namespaces user --config-file-schemas ./serverless-schema.json ./iac\n</code></pre> <p>If the <code>--config-file-schemas</code> flag is specified Trivy ensures that each input IaC config file being scanned is type-checked against the schema. If the input file does not match any of the passed schemas, it will be ignored.</p> <p>If the schema is specified in the check metadata and is in the directory specified in the <code>--config-check</code> argument, it will be automatically loaded as specified here, and will only be used for type checking in Rego.</p> <p>Note</p> <p>If a user specifies the <code>--config-file-schemas</code> flag, all input IaC config files are ensured that they pass type-checking. It is not required to pass an input schema in case type checking is not required. This is helpful for scenarios where you simply want to write a Rego check and pass in IaC input for it. Such a use case could include scanning for a new service which Trivy might not support just yet.</p> <p>Tip</p> <p>It is also possible to specify multiple input schemas with <code>--config-file-schema</code> flag as it can accept a comma seperated list of file paths or a directory as input. In the case of multiple schemas being specified, all of them will be evaluated against all the input files.</p>"},{"location":"docs/scanner/misconfiguration/custom/selectors/","title":"Input Selectors","text":""},{"location":"docs/scanner/misconfiguration/custom/selectors/#overview","title":"Overview","text":"<p>Sometimes you might want to limit a certain policy to only be run on certain resources. This can be achieved with input selectors.</p>"},{"location":"docs/scanner/misconfiguration/custom/selectors/#use-case","title":"Use case","text":"<p>For instance, if you have a custom policy that you only want to be evaluated if a certain resource type is being scanned. In such a case you could utilize input selectors to limit its evaluation on only those resources.</p> <p>Example</p> <pre><code>    # METADATA\n    # title: \"RDS Publicly Accessible\"\n    # description: \"Ensures RDS instances are not launched into the public cloud.\"\n    # custom:\n    #   input:\n    #     selector:\n    #     - type: cloud\n    #       subtypes:\n    #         - provider: aws\n    #           service: rds\n    package builtin.aws.rds.aws0999\n\n    deny[res] {\n    instance := input.aws.rds.instances[_]\n    instance.publicaccess.value\n    res := result.new(\"Instance has Public Access enabled\", instance.publicaccess)\n</code></pre> <p>Observe the following <code>subtypes</code> defined: <pre><code>        #       subtypes:\n        #         - provider: aws\n        #           service: rds\n</code></pre></p> <p>They will ensure that the policy is only run when the input to such a policy contains an <code>RDS</code> instance. </p>"},{"location":"docs/scanner/misconfiguration/custom/selectors/#enabling-selectors-and-subtypes","title":"Enabling selectors and subtypes","text":"<p>Currently, the following are supported:</p> Selector Subtype fields required Example Cloud (AWS, Azure, etc.) <code>provider</code>, <code>service</code> <code>provider: aws</code>, <code>service: rds</code> Kubernetes <code>type: kubernetes</code> Dockerfile <code>type: dockerfile</code>"},{"location":"docs/scanner/misconfiguration/custom/selectors/#default-behaviour","title":"Default behaviour","text":"<p>If no subtypes or selectors are specified, the policy will be evaluated regardless of input.</p>"},{"location":"docs/scanner/misconfiguration/custom/testing/","title":"Testing","text":"<p>It is highly recommended to write tests for your custom checks.</p>"},{"location":"docs/scanner/misconfiguration/custom/testing/#rego-testing","title":"Rego testing","text":"<p>To help you verify the correctness of your custom checks, OPA gives you a framework that you can use to write tests for your checks.  By writing tests for your custom checks you can speed up the development process of new rules and reduce the amount of time it takes to modify rules as requirements evolve.</p> <p>For more details, see Policy Testing.</p> <p>Example</p> <pre><code>package user.dockerfile.ID002\n\ntest_add_denied {\n    r := deny with input as {\"stages\": {\"alpine:3.13\": [\n        {\"Cmd\": \"add\", \"Value\": [\"/target/resources.tar.gz\", \"resources.jar\"]},\n        {\"Cmd\": \"add\", \"Value\": [\"/target/app.jar\", \"app.jar\"]},\n    ]}}\n\n    count(r) == 1\n    r[_] == \"Consider using 'COPY /target/app.jar app.jar' command instead of 'ADD /target/app.jar app.jar'\"\n}\n</code></pre> <p>To write tests for custom checks, you can refer to existing tests under [trivy-checks][trivy-checks].</p>"},{"location":"docs/scanner/misconfiguration/custom/testing/#go-testing","title":"Go testing","text":"<p>Fanal which is a core library of Trivy can be imported as a Go library. You can scan config files in Go and test your custom checks using Go's testing methods, such as table-driven tests. This allows you to use the actual configuration file as input, making it easy to prepare test data and ensure that your custom checks work in practice.</p> <p>In particular, Dockerfile and HCL need to be converted to structural data as input, which may be different from the expected input format.</p> <p>Tip</p> <p>We recommend writing OPA and Go tests both since they have different roles, like unit tests and integration tests.</p> <p>The following example stores allowed and denied configuration files in a directory. <code>Successes</code> contains the result of successes, and <code>Failures</code> contains the result of failures.</p> <pre><code>{\n    name:  \"disallowed ports\",\n    input: \"configs/\",\n    fields: fields{\n        policyPaths: []string{\"policy\"},\n        dataPaths:   []string{\"data\"},\n        namespaces:  []string{\"user\"},\n    },\n    want: []types.Misconfiguration{\n        {\n            FileType: types.Dockerfile,\n            FilePath: \"Dockerfile.allowed\",\n            Successes: types.MisconfResults{\n                {\n                    Namespace: \"user.dockerfile.ID002\",\n                    PolicyMetadata: types.PolicyMetadata{\n                        ID:          \"ID002\",\n                        Type:        \"Docker Custom Check\",\n                        Title:       \"Disallowed ports exposed\",\n                        Severity:    \"HIGH\",\n                    },\n                },\n            },\n        },\n        {\n            FileType: types.Dockerfile,\n            FilePath: \"Dockerfile.denied\",\n            Failures: types.MisconfResults{\n                {\n                    Namespace: \"user.dockerfile.ID002\",\n                    Message:   \"Port 23 should not be exposed\",\n                    PolicyMetadata: types.PolicyMetadata{\n                        ID:          \"ID002\",\n                        Type:        \"Docker Custom Check\",\n                        Title:       \"Disallowed ports exposed\",\n                        Severity:    \"HIGH\",\n                    },\n                },\n            },\n        },\n    },\n},\n</code></pre> <p><code>Dockerfile.allowed</code> has one successful result in <code>Successes</code>, while <code>Dockerfile.denied</code> has one failure result in <code>Failures</code>.</p>"},{"location":"docs/supply-chain/sbom/","title":"SBOM","text":""},{"location":"docs/supply-chain/sbom/#generating","title":"Generating","text":"<p>Trivy can generate the following SBOM formats.</p> <ul> <li>CycloneDX</li> <li>SPDX</li> </ul>"},{"location":"docs/supply-chain/sbom/#cli-commands","title":"CLI commands","text":"<p>To generate SBOM, you can use the <code>--format</code> option for each subcommand such as <code>image</code>, <code>fs</code> and <code>vm</code>.</p> <pre><code>$ trivy image --format spdx-json --output result.json alpine:3.15\n</code></pre> <pre><code>$ trivy fs --format cyclonedx --output result.json /app/myproject\n</code></pre> Result <pre><code>{\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.3\",\n  \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\",\n  \"version\": 1,\n  \"metadata\": {\n    \"timestamp\": \"2022-02-22T15:11:40.270597Z\",\n    \"tools\": [\n      {\n        \"vendor\": \"aquasecurity\",\n        \"name\": \"trivy\",\n        \"version\": \"dev\"\n      }\n    ],\n    \"component\": {\n      \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"type\": \"container\",\n      \"name\": \"alpine:3.15\",\n      \"version\": \"\",\n      \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SchemaVersion\",\n          \"value\": \"2\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:ImageID\",\n          \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:RepoDigest\",\n          \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:DiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:RepoTag\",\n          \"value\": \"alpine:3.15\"\n        }\n      ]\n    }\n  },\n  \"components\": [\n    {\n      \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n      \"type\": \"library\",\n      \"name\": \"alpine-baselayout\",\n      \"version\": \"3.2.0-r18\",\n      \"licenses\": [\n        {\n          \"expression\": \"GPL-2.0-only\"\n        }\n      ],\n      \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SrcName\",\n          \"value\": \"alpine-baselayout\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:SrcVersion\",\n          \"value\": \"3.2.0-r18\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDigest\",\n          \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        }\n      ]\n    },\n    ...(snip)...\n    {\n      \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\",\n      \"type\": \"library\",\n      \"name\": \"zlib\",\n      \"version\": \"1.2.11-r3\",\n      \"licenses\": [\n        {\n          \"expression\": \"Zlib\"\n        }\n      ],\n      \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SrcName\",\n          \"value\": \"zlib\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:SrcVersion\",\n          \"value\": \"1.2.11-r3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDigest\",\n          \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\",\n      \"type\": \"operating-system\",\n      \"name\": \"alpine\",\n      \"version\": \"3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:Type\",\n          \"value\": \"alpine\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:Class\",\n          \"value\": \"os-pkgs\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\",\n      \"dependsOn\": [\n        \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n        \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\",\n        \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\",\n        \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\",\n        \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\"\n      ]\n    },\n    {\n      \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"dependsOn\": [\n        \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"docs/supply-chain/sbom/#supported-packages","title":"Supported packages","text":"<p>Trivy supports the following packages.</p> <ul> <li>OS packages</li> <li>Language-specific packages</li> </ul>"},{"location":"docs/supply-chain/sbom/#formats","title":"Formats","text":""},{"location":"docs/supply-chain/sbom/#cyclonedx","title":"CycloneDX","text":"<p>Trivy can generate SBOM in the CycloneDX format. Note that XML format is not supported at the moment.</p> <p>You can use the regular subcommands (like <code>image</code>, <code>fs</code> and <code>rootfs</code>) and specify <code>cyclonedx</code> with the <code>--format</code> option.</p> <p>CycloneDX can represent either or both SBOM or BOV.</p> <ul> <li>Software Bill of Materials (SBOM)</li> <li>Bill of Vulnerabilities (BOV)</li> </ul> <p>By default, <code>--format cyclonedx</code> represents SBOM and doesn't include vulnerabilities in the CycloneDX output.</p> <pre><code>$ trivy image --format cyclonedx --output result.json alpine:3.15\n2022-07-19T07:47:27.624Z        INFO    \"--format cyclonedx\" disables security scanning. Specify \"--scanners vuln\" explicitly if you want to include vulnerabilities in the CycloneDX report.\n</code></pre> Result <pre><code>$ cat result.json | jq .\n{\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.5\",\n  \"serialNumber\": \"urn:uuid:2be5773d-7cd3-4b4b-90a5-e165474ddace\",\n  \"version\": 1,\n  \"metadata\": {\n    \"timestamp\": \"2022-02-22T15:11:40.270597Z\",\n    \"tools\": {\n      \"components\": [\n        {\n          \"type\": \"application\",\n          \"group\": \"aquasecurity\",\n          \"name\": \"trivy\",\n          \"version\": \"dev\"\n        }\n      ]\n    },\n    \"component\": {\n      \"bom-ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"type\": \"container\",\n      \"name\": \"alpine:3.15\",\n      \"version\": \"\",\n      \"purl\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SchemaVersion\",\n          \"value\": \"2\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:ImageID\",\n          \"value\": \"sha256:c059bfaa849c4d8e4aecaeb3a10c2d9b3d85f5165c66ad3a4d937758128c4d18\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:RepoDigest\",\n          \"value\": \"alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:DiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:RepoTag\",\n          \"value\": \"alpine:3.15\"\n        }\n      ]\n    }\n  },\n  \"components\": [\n    {\n      \"bom-ref\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n      \"type\": \"library\",\n      \"name\": \"alpine-baselayout\",\n      \"version\": \"3.2.0-r18\",\n      \"licenses\": [\n        {\n          \"expression\": \"GPL-2.0-only\"\n        }\n      ],\n      \"purl\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SrcName\",\n          \"value\": \"alpine-baselayout\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:SrcVersion\",\n          \"value\": \"3.2.0-r18\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDigest\",\n          \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        }\n      ]\n    },\n    ...(snip)...\n    {\n      \"bom-ref\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\",\n      \"type\": \"library\",\n      \"name\": \"zlib\",\n      \"version\": \"1.2.11-r3\",\n      \"licenses\": [\n        {\n          \"expression\": \"Zlib\"\n        }\n      ],\n      \"purl\": \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:SrcName\",\n          \"value\": \"zlib\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:SrcVersion\",\n          \"value\": \"1.2.11-r3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDigest\",\n          \"value\": \"sha256:59bf1c3509f33515622619af21ed55bbe26d24913cedbca106468a5fb37a50c3\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:LayerDiffID\",\n          \"value\": \"sha256:8d3ac3489996423f53d6087c81180006263b79f206d3fdec9e66f0e27ceb8759\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\",\n      \"type\": \"operating-system\",\n      \"name\": \"alpine\",\n      \"version\": \"3.15.0\",\n      \"properties\": [\n        {\n          \"name\": \"aquasecurity:trivy:Type\",\n          \"value\": \"alpine\"\n        },\n        {\n          \"name\": \"aquasecurity:trivy:Class\",\n          \"value\": \"os-pkgs\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": [\n    {\n      \"ref\": \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\",\n      \"dependsOn\": [\n        \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?distro=3.15.0\",\n        \"pkg:apk/alpine/alpine-keys@2.4-r1?distro=3.15.0\",\n        \"pkg:apk/alpine/apk-tools@2.12.7-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/busybox@1.34.1-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/ca-certificates-bundle@20191127-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/libc-utils@0.7.2-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/libcrypto1.1@1.1.1l-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/libretls@3.3.4-r2?distro=3.15.0\",\n        \"pkg:apk/alpine/libssl1.1@1.1.1l-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/musl@1.2.2-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/musl-utils@1.2.2-r7?distro=3.15.0\",\n        \"pkg:apk/alpine/scanelf@1.3.3-r0?distro=3.15.0\",\n        \"pkg:apk/alpine/ssl_client@1.34.1-r3?distro=3.15.0\",\n        \"pkg:apk/alpine/zlib@1.2.11-r3?distro=3.15.0\"\n      ]\n    },\n    {\n      \"ref\": \"pkg:oci/alpine@sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300?repository_url=index.docker.io%2Flibrary%2Falpine&amp;arch=amd64\",\n      \"dependsOn\": [\n        \"3da6a469-964d-4b4e-b67d-e94ec7c88d37\"\n      ]\n    }\n  ],\n  \"vulnerabilities\": [\n    {\n      \"id\": \"CVE-2021-42386\",\n      \"source\": {\n        \"name\": \"alpine\",\n        \"url\": \"https://secdb.alpinelinux.org/\"\n      },\n      \"ratings\": [\n        {\n          \"source\": {\n            \"name\": \"nvd\"\n          },\n          \"score\": 7.2,\n          \"severity\": \"high\",\n          \"method\": \"CVSSv31\",\n          \"vector\": \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H\"\n        },\n        {\n          \"source\": {\n            \"name\": \"nvd\"\n          },\n          \"score\": 6.5,\n          \"severity\": \"medium\",\n          \"method\": \"CVSSv2\",\n          \"vector\": \"AV:N/AC:L/Au:S/C:P/I:P/A:P\"\n        },\n        {\n          \"source\": {\n            \"name\": \"redhat\"\n          },\n          \"score\": 6.6,\n          \"severity\": \"medium\",\n          \"method\": \"CVSSv31\",\n          \"vector\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H\"\n        }\n      ],\n      \"cwes\": [\n        416\n      ],\n      \"description\": \"A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function\",\n      \"advisories\": [\n        {\n          \"url\": \"https://access.redhat.com/security/cve/CVE-2021-42386\"\n        },\n        {\n          \"url\": \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42386\"\n        }\n      ],\n      \"published\": \"2021-11-15 21:15:00 +0000 UTC\",\n      \"updated\": \"2022-01-04 17:14:00 +0000 UTC\",\n      \"affects\": [\n        {\n          \"ref\": \"pkg:apk/alpine/busybox@1.33.1-r3?distro=3.14.2\"\n        },\n        {\n          \"ref\": \"pkg:apk/alpine/ssl_client@1.33.1-r3?distro=3.14.2\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre> <p>If you want to include vulnerabilities, you can enable vulnerability scanning via <code>--scanners vuln</code>.</p> <pre><code>$ trivy image --scanners vuln --format cyclonedx --output result.json alpine:3.15\n</code></pre>"},{"location":"docs/supply-chain/sbom/#spdx","title":"SPDX","text":"<p>Trivy can generate SBOM in the SPDX format.</p> <p>You can use the regular subcommands (like <code>image</code>, <code>fs</code> and <code>rootfs</code>) and specify <code>spdx</code> or <code>spdx-json</code> with the <code>--format</code> option.</p> <pre><code>$ trivy image --format spdx --output result.spdx alpine:3.15\n</code></pre> Result <pre><code>SPDXVersion: SPDX-2.3\nDataLicense: CC0-1.0\nSPDXID: SPDXRef-DOCUMENT\nDocumentName: alpine:3.15\nDocumentNamespace: http://trivy.dev/container_image/alpine:3.15-12db86e1-4aa4-40ec-900b-5aaa5d82461b\nCreator: Organization: aquasecurity\nCreator: Tool: trivy-0.58.0\nCreated: 2025-02-11T07:43:38Z\n\n##### Package: alpine:3.15\n\nPackageName: alpine:3.15\nSPDXID: SPDXRef-ContainerImage-d8b2a386253047e7\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: CONTAINER\nFilesAnalyzed: false\nExternalRef: PACKAGE-MANAGER purl pkg:oci/alpine@sha256%3A19b4bcc4f60e99dd5ebdca0cbce22c503bbcff197549d7e19dab4f22254dc864?arch=amd64&amp;repository_url=index.docker.io%2Flibrary%2Falpine\n\n##### Package: alpine\n\nPackageName: alpine\nSPDXID: SPDXRef-OperatingSystem-c24750c3b737d897\nPackageVersion: 3.15.11\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: OPERATING-SYSTEM\nFilesAnalyzed: false\n\n##### Package: libretls\n\nPackageName: libretls\nSPDXID: SPDXRef-Package-343391d704e00fbd\nPackageVersion: 3.3.4-r3\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 67dfefe5456c45192b60d76ade98c501b0ae814f\nPackageSourceInfo: built package from: libretls 3.3.4-r3\nPackageLicenseConcluded: ISC AND BSD-3-Clause AND MIT\nPackageLicenseDeclared: ISC AND BSD-3-Clause AND MIT\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/libretls@3.3.4-r3?arch=x86_64&amp;distro=3.15.11\n\n##### Package: libc-utils\n\nPackageName: libc-utils\nSPDXID: SPDXRef-Package-43343abe5c1a0439\nPackageVersion: 0.7.2-r3\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 798de3ebb57f3e28f408080746935f213a099722\nPackageSourceInfo: built package from: libc-dev 0.7.2-r3\nPackageLicenseConcluded: BSD-2-Clause AND BSD-3-Clause\nPackageLicenseDeclared: BSD-2-Clause AND BSD-3-Clause\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/libc-utils@0.7.2-r3?arch=x86_64&amp;distro=3.15.11\n\n##### Package: alpine-baselayout\n\nPackageName: alpine-baselayout\nSPDXID: SPDXRef-Package-64b7e662458dcd5f\nPackageVersion: 3.2.0-r18\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 132992eab020986b3b5d886a77212889680467a0\nPackageSourceInfo: built package from: alpine-baselayout 3.2.0-r18\nPackageLicenseConcluded: GPL-2.0-only\nPackageLicenseDeclared: GPL-2.0-only\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/alpine-baselayout@3.2.0-r18?arch=x86_64&amp;distro=3.15.11\n\n##### Package: busybox\n\nPackageName: busybox\nSPDXID: SPDXRef-Package-6c7c9dac75e301b7\nPackageVersion: 1.34.1-r7\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 21f9265e7a34c795fba4e99c8ae37b57f31cd1a2\nPackageSourceInfo: built package from: busybox 1.34.1-r7\nPackageLicenseConcluded: GPL-2.0-only\nPackageLicenseDeclared: GPL-2.0-only\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/busybox@1.34.1-r7?arch=x86_64&amp;distro=3.15.11\n\n##### Package: ca-certificates-bundle\n\nPackageName: ca-certificates-bundle\nSPDXID: SPDXRef-Package-702c9bf0cfddb42e\nPackageVersion: 20230506-r0\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 99894c0b834a3f5955e6e5d5f0d804943f05ff52\nPackageSourceInfo: built package from: ca-certificates 20230506-r0\nPackageLicenseConcluded: MPL-2.0 AND MIT\nPackageLicenseDeclared: MPL-2.0 AND MIT\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/ca-certificates-bundle@20230506-r0?arch=x86_64&amp;distro=3.15.11\n\n##### Package: musl-utils\n\nPackageName: musl-utils\nSPDXID: SPDXRef-Package-92eb9ab29b057905\nPackageVersion: 1.2.2-r9\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: f69aa6d6a57c90358005ce61ccb4ad96cdc303f4\nPackageSourceInfo: built package from: musl 1.2.2-r9\nPackageLicenseConcluded: MIT AND BSD-3-Clause AND GPL-2.0-or-later\nPackageLicenseDeclared: MIT AND BSD-3-Clause AND GPL-2.0-or-later\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/musl-utils@1.2.2-r9?arch=x86_64&amp;distro=3.15.11\n\n##### Package: scanelf\n\nPackageName: scanelf\nSPDXID: SPDXRef-Package-988bca2f70cf58f6\nPackageVersion: 1.3.3-r0\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: d7f7590e450870a4f79671c2369b31b5bb07349a\nPackageSourceInfo: built package from: pax-utils 1.3.3-r0\nPackageLicenseConcluded: GPL-2.0-only\nPackageLicenseDeclared: GPL-2.0-only\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/scanelf@1.3.3-r0?arch=x86_64&amp;distro=3.15.11\n\n##### Package: apk-tools\n\nPackageName: apk-tools\nSPDXID: SPDXRef-Package-aa2e51a695e95cb9\nPackageVersion: 2.12.7-r3\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: ddf3ddf8545768bc323649559feaae1560f29273\nPackageSourceInfo: built package from: apk-tools 2.12.7-r3\nPackageLicenseConcluded: GPL-2.0-only\nPackageLicenseDeclared: GPL-2.0-only\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/apk-tools@2.12.7-r3?arch=x86_64&amp;distro=3.15.11\n\n##### Package: libcrypto1.1\n\nPackageName: libcrypto1.1\nSPDXID: SPDXRef-Package-ba5f079c5c32fc8\nPackageVersion: 1.1.1w-r1\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: e378634f5c8af32ca75ac56f41ecf4e8d49584a0\nPackageSourceInfo: built package from: openssl 1.1.1w-r1\nPackageLicenseConcluded: OpenSSL\nPackageLicenseDeclared: OpenSSL\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/libcrypto1.1@1.1.1w-r1?arch=x86_64&amp;distro=3.15.11\n\n##### Package: alpine-keys\n\nPackageName: alpine-keys\nSPDXID: SPDXRef-Package-be18726b6be779d1\nPackageVersion: 2.4-r1\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 903176b2d2a8ddefd1ba6940f19ad17c2c1d4aff\nPackageSourceInfo: built package from: alpine-keys 2.4-r1\nPackageLicenseConcluded: MIT\nPackageLicenseDeclared: MIT\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/alpine-keys@2.4-r1?arch=x86_64&amp;distro=3.15.11\n\n##### Package: ssl_client\n\nPackageName: ssl_client\nSPDXID: SPDXRef-Package-d9ad92ed9413c93b\nPackageVersion: 1.34.1-r7\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: dddfa62dd51bd8807ee1d8660e860574a9dd78ed\nPackageSourceInfo: built package from: busybox 1.34.1-r7\nPackageLicenseConcluded: GPL-2.0-only\nPackageLicenseDeclared: GPL-2.0-only\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/ssl_client@1.34.1-r7?arch=x86_64&amp;distro=3.15.11\n\n##### Package: musl\n\nPackageName: musl\nSPDXID: SPDXRef-Package-ee9b5186331e7a76\nPackageVersion: 1.2.2-r9\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 7ebdef6cf7f9b58c0e213b333db946d22b00b777\nPackageSourceInfo: built package from: musl 1.2.2-r9\nPackageLicenseConcluded: MIT\nPackageLicenseDeclared: MIT\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/musl@1.2.2-r9?arch=x86_64&amp;distro=3.15.11\n\n##### Package: libssl1.1\n\nPackageName: libssl1.1\nSPDXID: SPDXRef-Package-f00669065070476c\nPackageVersion: 1.1.1w-r1\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: 9306ed15b3bdfc7553d5c14c472d87a41fef8541\nPackageSourceInfo: built package from: openssl 1.1.1w-r1\nPackageLicenseConcluded: OpenSSL\nPackageLicenseDeclared: OpenSSL\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/libssl1.1@1.1.1w-r1?arch=x86_64&amp;distro=3.15.11\n\n##### Package: zlib\n\nPackageName: zlib\nSPDXID: SPDXRef-Package-fcb106f21773cad3\nPackageVersion: 1.2.12-r3\nPackageSupplier: NOASSERTION\nPackageDownloadLocation: NONE\nPrimaryPackagePurpose: LIBRARY\nFilesAnalyzed: false\nPackageChecksum: SHA1: ab98d0416bf1dcd245c7b0800f99cbceacfa48b3\nPackageSourceInfo: built package from: zlib 1.2.12-r3\nPackageLicenseConcluded: Zlib\nPackageLicenseDeclared: Zlib\nExternalRef: PACKAGE-MANAGER purl pkg:apk/alpine/zlib@1.2.12-r3?arch=x86_64&amp;distro=3.15.11\n\n##### Relationships\n\nRelationship: SPDXRef-ContainerImage-d8b2a386253047e7 CONTAINS SPDXRef-OperatingSystem-c24750c3b737d897\nRelationship: SPDXRef-DOCUMENT DESCRIBES SPDXRef-ContainerImage-d8b2a386253047e7\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-343391d704e00fbd\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-43343abe5c1a0439\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-64b7e662458dcd5f\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-6c7c9dac75e301b7\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-702c9bf0cfddb42e\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-92eb9ab29b057905\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-988bca2f70cf58f6\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-aa2e51a695e95cb9\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-ba5f079c5c32fc8\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-be18726b6be779d1\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-d9ad92ed9413c93b\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-f00669065070476c\nRelationship: SPDXRef-OperatingSystem-c24750c3b737d897 CONTAINS SPDXRef-Package-fcb106f21773cad3\nRelationship: SPDXRef-Package-343391d704e00fbd DEPENDS_ON SPDXRef-Package-702c9bf0cfddb42e\nRelationship: SPDXRef-Package-343391d704e00fbd DEPENDS_ON SPDXRef-Package-ba5f079c5c32fc8\nRelationship: SPDXRef-Package-343391d704e00fbd DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-343391d704e00fbd DEPENDS_ON SPDXRef-Package-f00669065070476c\nRelationship: SPDXRef-Package-43343abe5c1a0439 DEPENDS_ON SPDXRef-Package-92eb9ab29b057905\nRelationship: SPDXRef-Package-64b7e662458dcd5f DEPENDS_ON SPDXRef-Package-6c7c9dac75e301b7\nRelationship: SPDXRef-Package-64b7e662458dcd5f DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-6c7c9dac75e301b7 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-92eb9ab29b057905 DEPENDS_ON SPDXRef-Package-988bca2f70cf58f6\nRelationship: SPDXRef-Package-92eb9ab29b057905 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-988bca2f70cf58f6 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-aa2e51a695e95cb9 DEPENDS_ON SPDXRef-Package-702c9bf0cfddb42e\nRelationship: SPDXRef-Package-aa2e51a695e95cb9 DEPENDS_ON SPDXRef-Package-ba5f079c5c32fc8\nRelationship: SPDXRef-Package-aa2e51a695e95cb9 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-aa2e51a695e95cb9 DEPENDS_ON SPDXRef-Package-f00669065070476c\nRelationship: SPDXRef-Package-aa2e51a695e95cb9 DEPENDS_ON SPDXRef-Package-fcb106f21773cad3\nRelationship: SPDXRef-Package-ba5f079c5c32fc8 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-d9ad92ed9413c93b DEPENDS_ON SPDXRef-Package-343391d704e00fbd\nRelationship: SPDXRef-Package-d9ad92ed9413c93b DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-f00669065070476c DEPENDS_ON SPDXRef-Package-ba5f079c5c32fc8\nRelationship: SPDXRef-Package-f00669065070476c DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\nRelationship: SPDXRef-Package-fcb106f21773cad3 DEPENDS_ON SPDXRef-Package-ee9b5186331e7a76\n</code></pre> <pre><code>$ trivy image --format spdx-json --output result.spdx alpine:3.15\n</code></pre> Result <pre><code>{\n  \"spdxVersion\": \"SPDX-2.3\",\n  \"dataLicense\": \"CC0-1.0\",\n  \"SPDXID\": \"SPDXRef-DOCUMENT\",\n  \"name\": \"alpine:3.15\",\n  \"documentNamespace\": \"http://trivy.dev/container_image/alpine:3.15-bbe0096f-0ed0-47b4-bbea-82121a9201f1\",\n  \"creationInfo\": {\n    \"creators\": [\n      \"Organization: aquasecurity\",\n      \"Tool: trivy-0.58.0\"\n    ],\n    \"created\": \"2025-02-13T12:22:22Z\"\n  },\n  \"packages\": [\n    {\n      \"name\": \"alpine:3.15\",\n      \"SPDXID\": \"SPDXRef-ContainerImage-d8b2a386253047e7\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:oci/alpine@sha256%3A19b4bcc4f60e99dd5ebdca0cbce22c503bbcff197549d7e19dab4f22254dc864?arch=amd64\\u0026repository_url=index.docker.io%2Flibrary%2Falpine\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"CONTAINER\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"DiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"ImageID: sha256:32b91e3161c8fc2e3baf2732a594305ca5093c82ff4e0c9f6ebbd2a879468e1d\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"RepoDigest: alpine@sha256:19b4bcc4f60e99dd5ebdca0cbce22c503bbcff197549d7e19dab4f22254dc864\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"RepoTag: alpine:3.15\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"SchemaVersion: 2\"\n        }\n      ]\n    },\n    {\n      \"name\": \"alpine-baselayout\",\n      \"SPDXID\": \"SPDXRef-Package-64b7e662458dcd5f\",\n      \"versionInfo\": \"3.2.0-r18\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"132992eab020986b3b5d886a77212889680467a0\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: alpine-baselayout 3.2.0-r18\",\n      \"licenseConcluded\": \"GPL-2.0-only\",\n      \"licenseDeclared\": \"GPL-2.0-only\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/alpine-baselayout@3.2.0-r18?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: alpine-baselayout@3.2.0-r18\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"alpine-keys\",\n      \"SPDXID\": \"SPDXRef-Package-be18726b6be779d1\",\n      \"versionInfo\": \"2.4-r1\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"903176b2d2a8ddefd1ba6940f19ad17c2c1d4aff\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: alpine-keys 2.4-r1\",\n      \"licenseConcluded\": \"MIT\",\n      \"licenseDeclared\": \"MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/alpine-keys@2.4-r1?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: alpine-keys@2.4-r1\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"apk-tools\",\n      \"SPDXID\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"versionInfo\": \"2.12.7-r3\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"ddf3ddf8545768bc323649559feaae1560f29273\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: apk-tools 2.12.7-r3\",\n      \"licenseConcluded\": \"GPL-2.0-only\",\n      \"licenseDeclared\": \"GPL-2.0-only\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/apk-tools@2.12.7-r3?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: apk-tools@2.12.7-r3\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"busybox\",\n      \"SPDXID\": \"SPDXRef-Package-6c7c9dac75e301b7\",\n      \"versionInfo\": \"1.34.1-r7\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"21f9265e7a34c795fba4e99c8ae37b57f31cd1a2\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: busybox 1.34.1-r7\",\n      \"licenseConcluded\": \"GPL-2.0-only\",\n      \"licenseDeclared\": \"GPL-2.0-only\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/busybox@1.34.1-r7?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: busybox@1.34.1-r7\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ca-certificates-bundle\",\n      \"SPDXID\": \"SPDXRef-Package-702c9bf0cfddb42e\",\n      \"versionInfo\": \"20230506-r0\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"99894c0b834a3f5955e6e5d5f0d804943f05ff52\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: ca-certificates 20230506-r0\",\n      \"licenseConcluded\": \"MPL-2.0 AND MIT\",\n      \"licenseDeclared\": \"MPL-2.0 AND MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/ca-certificates-bundle@20230506-r0?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: ca-certificates-bundle@20230506-r0\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"libc-utils\",\n      \"SPDXID\": \"SPDXRef-Package-43343abe5c1a0439\",\n      \"versionInfo\": \"0.7.2-r3\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"798de3ebb57f3e28f408080746935f213a099722\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: libc-dev 0.7.2-r3\",\n      \"licenseConcluded\": \"BSD-2-Clause AND BSD-3-Clause\",\n      \"licenseDeclared\": \"BSD-2-Clause AND BSD-3-Clause\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/libc-utils@0.7.2-r3?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: libc-utils@0.7.2-r3\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"libcrypto1.1\",\n      \"SPDXID\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"versionInfo\": \"1.1.1w-r1\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"e378634f5c8af32ca75ac56f41ecf4e8d49584a0\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: openssl 1.1.1w-r1\",\n      \"licenseConcluded\": \"OpenSSL\",\n      \"licenseDeclared\": \"OpenSSL\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/libcrypto1.1@1.1.1w-r1?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: libcrypto1.1@1.1.1w-r1\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"libretls\",\n      \"SPDXID\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"versionInfo\": \"3.3.4-r3\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"67dfefe5456c45192b60d76ade98c501b0ae814f\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: libretls 3.3.4-r3\",\n      \"licenseConcluded\": \"ISC AND BSD-3-Clause AND MIT\",\n      \"licenseDeclared\": \"ISC AND BSD-3-Clause AND MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/libretls@3.3.4-r3?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: libretls@3.3.4-r3\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"libssl1.1\",\n      \"SPDXID\": \"SPDXRef-Package-f00669065070476c\",\n      \"versionInfo\": \"1.1.1w-r1\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"9306ed15b3bdfc7553d5c14c472d87a41fef8541\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: openssl 1.1.1w-r1\",\n      \"licenseConcluded\": \"OpenSSL\",\n      \"licenseDeclared\": \"OpenSSL\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/libssl1.1@1.1.1w-r1?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: libssl1.1@1.1.1w-r1\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"musl\",\n      \"SPDXID\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"versionInfo\": \"1.2.2-r9\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"7ebdef6cf7f9b58c0e213b333db946d22b00b777\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: musl 1.2.2-r9\",\n      \"licenseConcluded\": \"MIT\",\n      \"licenseDeclared\": \"MIT\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/musl@1.2.2-r9?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: musl@1.2.2-r9\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"musl-utils\",\n      \"SPDXID\": \"SPDXRef-Package-92eb9ab29b057905\",\n      \"versionInfo\": \"1.2.2-r9\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"f69aa6d6a57c90358005ce61ccb4ad96cdc303f4\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: musl 1.2.2-r9\",\n      \"licenseConcluded\": \"MIT AND BSD-3-Clause AND GPL-2.0-or-later\",\n      \"licenseDeclared\": \"MIT AND BSD-3-Clause AND GPL-2.0-or-later\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/musl-utils@1.2.2-r9?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: musl-utils@1.2.2-r9\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"scanelf\",\n      \"SPDXID\": \"SPDXRef-Package-988bca2f70cf58f6\",\n      \"versionInfo\": \"1.3.3-r0\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"d7f7590e450870a4f79671c2369b31b5bb07349a\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: pax-utils 1.3.3-r0\",\n      \"licenseConcluded\": \"GPL-2.0-only\",\n      \"licenseDeclared\": \"GPL-2.0-only\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/scanelf@1.3.3-r0?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: scanelf@1.3.3-r0\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ssl_client\",\n      \"SPDXID\": \"SPDXRef-Package-d9ad92ed9413c93b\",\n      \"versionInfo\": \"1.34.1-r7\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"dddfa62dd51bd8807ee1d8660e860574a9dd78ed\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: busybox 1.34.1-r7\",\n      \"licenseConcluded\": \"GPL-2.0-only\",\n      \"licenseDeclared\": \"GPL-2.0-only\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/ssl_client@1.34.1-r7?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: ssl_client@1.34.1-r7\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"zlib\",\n      \"SPDXID\": \"SPDXRef-Package-fcb106f21773cad3\",\n      \"versionInfo\": \"1.2.12-r3\",\n      \"supplier\": \"NOASSERTION\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"checksums\": [\n        {\n          \"algorithm\": \"SHA1\",\n          \"checksumValue\": \"ab98d0416bf1dcd245c7b0800f99cbceacfa48b3\"\n        }\n      ],\n      \"sourceInfo\": \"built package from: zlib 1.2.12-r3\",\n      \"licenseConcluded\": \"Zlib\",\n      \"licenseDeclared\": \"Zlib\",\n      \"externalRefs\": [\n        {\n          \"referenceCategory\": \"PACKAGE-MANAGER\",\n          \"referenceType\": \"purl\",\n          \"referenceLocator\": \"pkg:apk/alpine/zlib@1.2.12-r3?arch=x86_64\\u0026distro=3.15.11\"\n        }\n      ],\n      \"primaryPackagePurpose\": \"LIBRARY\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDiffID: sha256:2879a4821959ab702528e28a1c59cd26c4956112497f6d1dbfd86c8d88003983\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"LayerDigest: sha256:d078792c4f9122259f14b539315bd92cbd9490ed73e08255a08689122b143108\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgID: zlib@1.2.12-r3\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"PkgType: alpine\"\n        }\n      ]\n    },\n    {\n      \"name\": \"alpine\",\n      \"SPDXID\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"versionInfo\": \"3.15.11\",\n      \"downloadLocation\": \"NONE\",\n      \"filesAnalyzed\": false,\n      \"primaryPackagePurpose\": \"OPERATING-SYSTEM\",\n      \"annotations\": [\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"Class: os-pkgs\"\n        },\n        {\n          \"annotator\": \"Tool: trivy-0.58.0\",\n          \"annotationDate\": \"2025-02-13T12:22:22Z\",\n          \"annotationType\": \"OTHER\",\n          \"comment\": \"Type: alpine\"\n        }\n      ]\n    }\n  ],\n  \"relationships\": [\n    {\n      \"spdxElementId\": \"SPDXRef-ContainerImage-d8b2a386253047e7\",\n      \"relatedSpdxElement\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-DOCUMENT\",\n      \"relatedSpdxElement\": \"SPDXRef-ContainerImage-d8b2a386253047e7\",\n      \"relationshipType\": \"DESCRIBES\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-43343abe5c1a0439\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-64b7e662458dcd5f\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-6c7c9dac75e301b7\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-702c9bf0cfddb42e\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-92eb9ab29b057905\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-988bca2f70cf58f6\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-be18726b6be779d1\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-d9ad92ed9413c93b\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-f00669065070476c\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-OperatingSystem-c24750c3b737d897\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-fcb106f21773cad3\",\n      \"relationshipType\": \"CONTAINS\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-702c9bf0cfddb42e\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-f00669065070476c\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-43343abe5c1a0439\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-92eb9ab29b057905\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-64b7e662458dcd5f\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-6c7c9dac75e301b7\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-64b7e662458dcd5f\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-6c7c9dac75e301b7\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-92eb9ab29b057905\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-988bca2f70cf58f6\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-92eb9ab29b057905\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-988bca2f70cf58f6\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-702c9bf0cfddb42e\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-f00669065070476c\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-aa2e51a695e95cb9\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-fcb106f21773cad3\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-d9ad92ed9413c93b\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-343391d704e00fbd\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-d9ad92ed9413c93b\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-f00669065070476c\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ba5f079c5c32fc8\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-f00669065070476c\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    },\n    {\n      \"spdxElementId\": \"SPDXRef-Package-fcb106f21773cad3\",\n      \"relatedSpdxElement\": \"SPDXRef-Package-ee9b5186331e7a76\",\n      \"relationshipType\": \"DEPENDS_ON\"\n    }\n  ]\n}\n</code></pre>"},{"location":"docs/supply-chain/sbom/#scanning","title":"Scanning","text":""},{"location":"docs/supply-chain/sbom/#sbom-as-target","title":"SBOM as Target","text":"<p>Trivy can take SBOM documents as input for scanning, e.g <code>trivy sbom ./sbom.spdx</code>. See here for more details.</p>"},{"location":"docs/supply-chain/sbom/#sbom-detection-inside-targets","title":"SBOM Detection inside Targets","text":"<p>Trivy searches for SBOM files in container images with the following extensions:</p> <ul> <li><code>.spdx</code></li> <li><code>.spdx.json</code></li> <li><code>.cdx</code></li> <li><code>.cdx.json</code></li> </ul> <p>In addition, Trivy automatically detects SBOM files in Bitnami images, see here for more details.</p> <p>It is enabled in the following targets.</p> Target Enabled Container Image \u2713 Filesystem Rootfs \u2713 Git Repository VM Image \u2713 Kubernetes AWS SBOM"},{"location":"docs/supply-chain/sbom/#sbom-discovery-for-container-images","title":"SBOM Discovery for Container Images","text":"<p>When scanning container images, Trivy can discover SBOM for those images. See here for more details.</p>"},{"location":"docs/supply-chain/attestation/rekor/","title":"Scan SBOM attestation in Rekor","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p>"},{"location":"docs/supply-chain/attestation/rekor/#container-images","title":"Container images","text":"<p>Trivy can retrieve SBOM attestation of the specified container image in the Rekor instance and scan it for vulnerabilities.</p>"},{"location":"docs/supply-chain/attestation/rekor/#prerequisites","title":"Prerequisites","text":"<ol> <li>SBOM attestation stored in Rekor<ul> <li>See the \"Keyless signing\" section if you want to upload your SBOM attestation to Rekor.</li> </ul> </li> </ol>"},{"location":"docs/supply-chain/attestation/rekor/#scanning","title":"Scanning","text":"<p>You need to pass <code>--sbom-sources rekor</code> so that Trivy will look for SBOM attestation in Rekor.</p> <p>Note</p> <p><code>--sbom-sources</code> can be used only with <code>trivy image</code> at the moment.</p> <pre><code>$ trivy image --sbom-sources rekor otms61/alpine:3.7.3                                                                            [~/src/github.com/aquasecurity/trivy]\n2022-09-16T17:37:13.258+0900    INFO    Vulnerability scanning is enabled\n2022-09-16T17:37:13.258+0900    INFO    Secret scanning is enabled\n2022-09-16T17:37:13.258+0900    INFO    If your scanning is slow, please try '--scanners vuln' to disable secret scanning\n2022-09-16T17:37:13.258+0900    INFO    Please see also https://trivy.dev/dev/docs/secret/scanning/#recommendation for faster secret detection\n2022-09-16T17:37:14.827+0900    INFO    Detected SBOM format: cyclonedx-json\n2022-09-16T17:37:14.901+0900    INFO    Found SBOM (cyclonedx) attestation in Rekor\n2022-09-16T17:37:14.903+0900    INFO    Detected OS: alpine\n2022-09-16T17:37:14.903+0900    INFO    Detecting Alpine vulnerabilities...\n2022-09-16T17:37:14.907+0900    INFO    Number of language-specific files: 0\n2022-09-16T17:37:14.908+0900    WARN    This OS version is no longer supported by the distribution: alpine 3.7.3\n2022-09-16T17:37:14.908+0900    WARN    The vulnerability detection may be insufficient because security updates are not provided\n\notms61/alpine:3.7.3 (alpine 3.7.3)\n==================================\nTotal: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library   \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                          Title                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 musl       \u2502 CVE-2019-14697 \u2502 CRITICAL \u2502 1.1.18-r3         \u2502 1.1.18-r4     \u2502 musl libc through 1.1.23 has an x87 floating-point stack \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 adjustment im ......                                     \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2019-14697               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502 musl-utils \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>If you have your own Rekor instance, you can specify the URL via <code>--rekor-url</code>.</p> <pre><code>$ trivy image --sbom-sources rekor --rekor-url https://my-rekor.dev otms61/alpine:3.7.3\n</code></pre>"},{"location":"docs/supply-chain/attestation/rekor/#non-packaged-binaries","title":"Non-packaged binaries","text":"<p>Trivy can retrieve SBOM attestation of non-packaged binaries in the Rekor instance and scan it for vulnerabilities.</p>"},{"location":"docs/supply-chain/attestation/rekor/#prerequisites_1","title":"Prerequisites","text":"<ol> <li>SBOM attestation stored in Rekor<ul> <li>See the \"Keyless signing\" section if you want to upload your SBOM attestation to Rekor.</li> </ul> </li> </ol> <p>Cosign currently does not support keyless signing for blob attestation, so use our plugin at the moment. This example uses a cat clone bat written in Rust. You need to generate SBOM from lock files like <code>Cargo.lock</code> at first.</p> <pre><code>$ git clone -b v0.20.0 https://github.com/sharkdp/bat\n$ trivy fs --format cyclonedx --output bat.cdx ./bat/Cargo.lock\n</code></pre> <p>Then our attestation plugin allows you to store the SBOM attestation linking to a <code>bat</code> binary in the Rekor instance.</p> <pre><code>$ wget https://github.com/sharkdp/bat/releases/download/v0.20.0/bat-v0.20.0-x86_64-apple-darwin.tar.gz\n$ tar xvf bat-v0.20.0-x86_64-apple-darwin.tar.gz\n$ trivy plugin install github.com/aquasecurity/trivy-plugin-attest\n$ trivy attest --predicate ./bat.cdx --type cyclonedx ./bat-v0.20.0-x86_64-apple-darwin/bat\n</code></pre> <p>Note</p> <p>The public instance of the Rekor maintained by the Sigstore team limits the attestation size. If you are using the public instance, please make sure that your SBOM is small enough. To get more detail, please refer to the Rekor project's documentation.</p>"},{"location":"docs/supply-chain/attestation/rekor/#scan-a-non-packaged-binary","title":"Scan a non-packaged binary","text":"<p>Trivy calculates the digest of the <code>bat</code> binary and searches for the SBOM attestation by the digest in Rekor. If it is found, Trivy uses that for vulnerability scanning.</p> <pre><code>$ trivy fs --sbom-sources rekor ./bat-v0.20.0-x86_64-apple-darwin/bat\n2022-10-25T13:27:25.950+0300    INFO    Found SBOM attestation in Rekor: bat\n2022-10-25T13:27:25.993+0300    INFO    Number of language-specific files: 1\n2022-10-25T13:27:25.993+0300    INFO    Detecting cargo vulnerabilities...\n\nbat (cargo)\n===========\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library  \u2502   Vulnerability   \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 regex     \u2502 CVE-2022-24713    \u2502 HIGH     \u2502 1.5.4             \u2502 1.5.5         \u2502 Mozilla: Denial of Service via complex regular expressions \u2502\n\u2502           \u2502                   \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-24713                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Also, it is applied to non-packaged binaries even in container images.</p> <pre><code>$ trivy image --sbom-sources rekor --scanners vuln alpine-with-bat\n2022-10-25T13:40:14.920+0300    INFO    Vulnerability scanning is enabled\n2022-10-25T13:40:18.047+0300    INFO    Found SBOM attestation in Rekor: bat\n2022-10-25T13:40:18.186+0300    INFO    Detected OS: alpine\n2022-10-25T13:40:18.186+0300    INFO    Detecting Alpine vulnerabilities...\n2022-10-25T13:40:18.199+0300    INFO    Number of language-specific files: 1\n2022-10-25T13:40:18.199+0300    INFO    Detecting cargo vulnerabilities...\n\nalpine-with-bat (alpine 3.15.6)\n===============================\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\n\nbat (cargo)\n===========\nTotal: 4 (UNKNOWN: 3, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library  \u2502   Vulnerability   \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 regex     \u2502 CVE-2022-24713    \u2502 HIGH     \u2502 1.5.4             \u2502 1.5.5         \u2502 Mozilla: Denial of Service via complex regular expressions \u2502\n\u2502           \u2502                   \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-24713                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note</p> <p>The <code>--sbom-sources rekor</code> flag slows down the scanning as it queries Rekor on the Internet for all non-packaged binaries.</p>"},{"location":"docs/supply-chain/attestation/sbom/","title":"SBOM attestation","text":"<p>Cosign supports generating and verifying in-toto attestations. This tool enables you to sign and verify SBOM attestation. And, Trivy can take an SBOM attestation as input and scan for vulnerabilities</p> <p>Note</p> <p>In the following examples, the <code>cosign</code> command will write an attestation to a target OCI registry, so you must have permission to write. If you want to avoid writing an OCI registry and only want to see an attestation, add the <code>--no-upload</code> option to the <code>cosign</code> command.</p>"},{"location":"docs/supply-chain/attestation/sbom/#sign-with-a-local-key-pair","title":"Sign with a local key pair","text":"<p>Cosign can generate key pairs and use them for signing and verification. After you run the following command, you will get a public and private key pair. Read more about how to generate key pairs.</p> <pre><code>$ cosign generate-key-pair\n</code></pre> <p>In the following example, Trivy generates an SBOM in the CycloneDX format, and then Cosign attaches an attestation of the SBOM to a container image with a local key pair.</p> <pre><code># The cyclonedx type is supported in Cosign v1.10.0 or later.\n$ trivy image --format cyclonedx -o sbom.cdx.json &lt;IMAGE&gt;\n$ cosign attest --key /path/to/cosign.key --type cyclonedx --predicate sbom.cdx.json &lt;IMAGE&gt;\n</code></pre> <p>Then, you can verify attestations on the image.</p> <pre><code>$ cosign verify-attestation --key /path/to/cosign.pub --type cyclonedx &lt;IMAGE&gt;\n</code></pre> <p>You can also create attestations of other formatted SBOM.</p> <pre><code># spdx\n$ trivy image --format spdx -o sbom.spdx &lt;IMAGE&gt;\n$ cosign attest --key /path/to/cosign.key --type spdx --predicate sbom.spdx &lt;IMAGE&gt;\n\n# spdx-json\n$ trivy image --format spdx-json -o sbom.spdx.json &lt;IMAGE&gt;\n$ cosign attest --key /path/to/cosign.key --type spdx --predicate sbom.spdx.json &lt;IMAGE&gt;\n</code></pre>"},{"location":"docs/supply-chain/attestation/sbom/#keyless-signing","title":"Keyless signing","text":"<p>You can use Cosign to sign without keys by authenticating with an OpenID Connect protocol supported by sigstore (Google, GitHub, or Microsoft).</p> <pre><code># The cyclonedx type is supported in Cosign v1.10.0 or later.\n$ trivy image --format cyclonedx -o sbom.cdx.json &lt;IMAGE&gt;\n# The following command uploads SBOM attestation to the public Rekor instance.\n$ COSIGN_EXPERIMENTAL=1 cosign attest --type cyclonedx --predicate sbom.cdx.json &lt;IMAGE&gt;\n</code></pre> <p>You can verify attestations. <pre><code>$ COSIGN_EXPERIMENTAL=1 cosign verify-attestation --type cyclonedx &lt;IMAGE&gt;\n</code></pre></p>"},{"location":"docs/supply-chain/attestation/sbom/#scanning","title":"Scanning","text":"<p>Trivy can take an SBOM attestation as input and scan for vulnerabilities. Currently, Trivy supports CycloneDX-type attestation.</p> <p>In the following example, Cosign can get an CycloneDX-type attestation and trivy scan it. You must create CycloneDX-type attestation before trying the example. To learn more about how to create an CycloneDX-Type attestation and attach it to an image, see the Sign with a local key pair section.</p> <pre><code>$ cosign verify-attestation --key /path/to/cosign.pub --type cyclonedx &lt;IMAGE&gt; &gt; sbom.cdx.intoto.jsonl\n$ trivy sbom ./sbom.cdx.intoto.jsonl\n\nsbom.cdx.intoto.jsonl (alpine 3.7.3)\n=========================\nTotal: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library   \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                          Title                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 musl       \u2502 CVE-2019-14697 \u2502 CRITICAL \u2502 1.1.18-r3         \u2502 1.1.18-r4     \u2502 musl libc through 1.1.23 has an x87 floating-point stack \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 adjustment im ......                                     \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2019-14697               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502 musl-utils \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/supply-chain/attestation/vuln/","title":"Cosign Vulnerability Attestation","text":""},{"location":"docs/supply-chain/attestation/vuln/#generate-cosign-vulnerability-scan-record","title":"Generate Cosign Vulnerability Scan Record","text":"<p>Trivy generates reports in the Cosign vulnerability scan record format.</p> <p>You can use the regular subcommands (like image, fs and rootfs) and specify <code>cosign-vuln</code> with the --format option.</p> <pre><code>$ trivy image --format cosign-vuln --output vuln.json alpine:3.10\n</code></pre> Result <pre><code>{\n  \"invocation\": {\n    \"parameters\": null,\n    \"uri\": \"\",\n    \"event_id\": \"\",\n    \"builder.id\": \"\"\n  },\n  \"scanner\": {\n    \"uri\": \"pkg:github/aquasecurity/trivy@v0.30.1-8-gf9cb8a28\",\n    \"version\": \"v0.30.1-8-gf9cb8a28\",\n    \"db\": {\n      \"uri\": \"\",\n      \"version\": \"\"\n    },\n    \"result\": {\n      \"SchemaVersion\": 2,\n      \"CreatedAt\": 1629894030,\n      \"ArtifactName\": \"alpine:3.10\",\n      \"ArtifactType\": \"container_image\",\n      \"Metadata\": {\n        \"OS\": {\n          \"Family\": \"alpine\",\n          \"Name\": \"3.10.9\",\n          \"EOSL\": true\n        },\n        \"ImageID\": \"sha256:e7b300aee9f9bf3433d32bc9305bfdd22183beb59d933b48d77ab56ba53a197a\",\n        \"DiffIDs\": [\n          \"sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635\"\n        ],\n        \"RepoTags\": [\n          \"alpine:3.10\"\n        ],\n        \"RepoDigests\": [\n          \"alpine@sha256:451eee8bedcb2f029756dc3e9d73bab0e7943c1ac55cff3a4861c52a0fdd3e98\"\n        ],\n        \"ImageConfig\": {\n          \"architecture\": \"amd64\",\n          \"container\": \"fdb7e80e3339e8d0599282e606c907aa5881ee4c668a68136119e6dfac6ce3a4\",\n          \"created\": \"2021-04-14T19:20:05.338397761Z\",\n          \"docker_version\": \"19.03.12\",\n          \"history\": [\n            {\n              \"created\": \"2021-04-14T19:20:04.987219124Z\",\n              \"created_by\": \"/bin/sh -c #(nop) ADD file:c5377eaa926bf412dd8d4a08b0a1f2399cfd708743533b0aa03b53d14cb4bb4e in / \"\n            },\n            {\n              \"created\": \"2021-04-14T19:20:05.338397761Z\",\n              \"created_by\": \"/bin/sh -c #(nop)  CMD [\\\"/bin/sh\\\"]\",\n              \"empty_layer\": true\n            }\n          ],\n          \"os\": \"linux\",\n          \"rootfs\": {\n            \"type\": \"layers\",\n            \"diff_ids\": [\n              \"sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635\"\n            ]\n          },\n          \"config\": {\n            \"Cmd\": [\n              \"/bin/sh\"\n            ],\n            \"Env\": [\n              \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n            ],\n            \"Image\": \"sha256:eb2080c455e94c22ae35b3aef9e078c492a00795412e026e4d6b41ef64bc7dd8\"\n          }\n        }\n      },\n      \"Results\": [\n        {\n          \"Target\": \"alpine:3.10 (alpine 3.10.9)\",\n          \"Class\": \"os-pkgs\",\n          \"Type\": \"alpine\",\n          \"Vulnerabilities\": [\n            {\n              \"VulnerabilityID\": \"CVE-2021-36159\",\n              \"PkgName\": \"apk-tools\",\n              \"InstalledVersion\": \"2.10.6-r0\",\n              \"FixedVersion\": \"2.10.7-r0\",\n              \"Layer\": {\n                \"Digest\": \"sha256:396c31837116ac290458afcb928f68b6cc1c7bdd6963fc72f52f365a2a89c1b5\",\n                \"DiffID\": \"sha256:9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635\"\n              },\n              \"SeveritySource\": \"nvd\",\n              \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2021-36159\",\n              \"DataSource\": {\n                \"ID\": \"alpine\",\n                \"Name\": \"Alpine Secdb\",\n                \"URL\": \"https://secdb.alpinelinux.org/\"\n              },\n              \"Description\": \"libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\\\0' terminator one byte too late.\",\n              \"Severity\": \"CRITICAL\",\n              \"CweIDs\": [\n                \"CWE-125\"\n              ],\n              \"CVSS\": {\n                \"nvd\": {\n                  \"V2Vector\": \"AV:N/AC:L/Au:N/C:P/I:N/A:P\",\n                  \"V3Vector\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H\",\n                  \"V2Score\": 6.4,\n                  \"V3Score\": 9.1\n                }\n              },\n              \"References\": [\n                \"https://github.com/freebsd/freebsd-src/commits/main/lib/libfetch\",\n                \"https://gitlab.alpinelinux.org/alpine/apk-tools/-/issues/10749\",\n                \"https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cdev.kafka.apache.org%3E\",\n                \"https://lists.apache.org/thread.html/r61db8e7dcb56dc000a5387a88f7a473bacec5ee01b9ff3f55308aacc@%3Cusers.kafka.apache.org%3E\",\n                \"https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cdev.kafka.apache.org%3E\",\n                \"https://lists.apache.org/thread.html/rbf4ce74b0d1fa9810dec50ba3ace0caeea677af7c27a97111c06ccb7@%3Cusers.kafka.apache.org%3E\"\n              ],\n              \"PublishedDate\": \"2021-08-03T14:15:00Z\",\n              \"LastModifiedDate\": \"2021-10-18T12:19:00Z\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"scanStartedOn\": \"2022-07-24T17:14:04.864682+09:00\",\n    \"scanFinishedOn\": \"2022-07-24T17:14:04.864682+09:00\"\n  }\n}\n</code></pre>"},{"location":"docs/supply-chain/attestation/vuln/#create-cosign-vulnerability-attestation","title":"Create Cosign Vulnerability Attestation","text":"<p>Cosign supports generating and verifying in-toto attestations. This tool enables you to sign and verify Cosign vulnerability attestation.</p> <p>Note</p> <p>In the following examples, the <code>cosign</code> command will write an attestation to a target OCI registry, so you must have permission to write. If you want to avoid writing an OCI registry and only want to see an attestation, add the <code>--no-upload</code> option to the <code>cosign</code> command.</p>"},{"location":"docs/supply-chain/attestation/vuln/#sign-with-a-local-key-pair","title":"Sign with a local key pair","text":"<p>Cosign can generate key pairs and use them for signing and verification. After you run the following command, you will get a public and private key pair. Read more about how to generate key pairs.</p> <pre><code>$ cosign generate-key-pair\n</code></pre> <p>In the following example, Trivy generates a cosign vulnerability scan record, and then Cosign attaches an attestation of it to a container image with a local key pair.</p> <pre><code>$ trivy image --format cosign-vuln --output vuln.json &lt;IMAGE&gt;\n$ cosign attest --key /path/to/cosign.key --type vuln --predicate vuln.json &lt;IMAGE&gt;\n</code></pre> <p>Then, you can verify attestations on the image.</p> <pre><code>$ cosign verify-attestation --key /path/to/cosign.pub --type vuln &lt;IMAGE&gt;\n</code></pre>"},{"location":"docs/supply-chain/attestation/vuln/#keyless-signing","title":"Keyless signing","text":"<p>You can use Cosign to sign without keys by authenticating with an OpenID Connect protocol supported by sigstore (Google, GitHub, or Microsoft).</p> <p><pre><code>$ trivy image --format cosign-vuln -o vuln.json &lt;IMAGE&gt;\n$ cosign attest --type vuln --predicate vuln.json &lt;IMAGE&gt;\n</code></pre> This will provide a certificate in the output section.</p> <p>You can verify attestations:</p> <pre><code>$ cosign verify-attestation --certificate=path-to-the-certificate --type vuln --certificate-identity Email-used-to-sign  --certificate-oidc-issuer='the-issuer-used' &lt;IMAGE&gt;\n</code></pre>"},{"location":"docs/supply-chain/vex/","title":"Vulnerability Exploitability Exchange (VEX)","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy supports filtering detected vulnerabilities using the Vulnerability Exploitability eXchange (VEX), a standardized format for sharing and exchanging information about vulnerabilities. By providing VEX during scanning, it is possible to filter vulnerabilities based on their status.</p>"},{"location":"docs/supply-chain/vex/#vex-usage-methods","title":"VEX Usage Methods","text":"<p>Trivy currently supports four methods for utilizing VEX:</p> <ol> <li>VEX Repository</li> <li>Local VEX Files</li> <li>VEX Attestation</li> <li>SBOM Reference</li> </ol>"},{"location":"docs/supply-chain/vex/#enabling-vex","title":"Enabling VEX","text":"<p>To enable VEX, use the <code>--vex</code> option. You can specify the method to use:</p> <ul> <li>To enable the VEX Repository: <code>--vex repo</code></li> <li>To use a local VEX file: <code>--vex /path/to/vex-document.json</code></li> <li>To enable VEX attestation discovery in OCI registry: <code>--vex oci</code></li> <li>To use remote VEX files referenced in SBOMs: <code>--vex sbom-ref</code></li> </ul> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy:0.52.0 --vex repo\n</code></pre> <p>You can enable these methods simultaneously. The order of specification determines the priority:</p> <ul> <li><code>--vex repo --vex /path/to/vex-document.json</code>: VEX Repository has priority</li> <li><code>--vex /path/to/vex-document.json --vex repo</code>: Local file has priority</li> </ul> <p>For detailed information on each method, please refer to each page.</p>"},{"location":"docs/supply-chain/vex/file/","title":"Local VEX Files","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>In addition to VEX repositories, Trivy also supports the use of local VEX files for vulnerability filtering. This method is useful when you have specific VEX documents that you want to apply to your scans. Currently, Trivy supports the following formats:</p> <ul> <li>CycloneDX</li> <li>OpenVEX</li> <li>CSAF</li> </ul>"},{"location":"docs/supply-chain/vex/file/#cyclonedx","title":"CycloneDX","text":"Target Supported Container Image Filesystem Code Repository VM Image Kubernetes SBOM \u2705 <p>There are two VEX formats for CycloneDX:</p> <ul> <li>Independent BOM and VEX BOM</li> <li>BOM With Embedded VEX</li> </ul> <p>Trivy only supports the Independent BOM and VEX BOM format, so you need to provide a separate VEX file alongside the SBOM. The input SBOM format must be in CycloneDX format.</p> <p>The following steps are required:</p> <ol> <li>Generate a CycloneDX SBOM</li> <li>Create a VEX based on the SBOM generated in step 1</li> <li>Provide the VEX when scanning the CycloneDX SBOM</li> </ol>"},{"location":"docs/supply-chain/vex/file/#generate-the-sbom","title":"Generate the SBOM","text":"<p>You can generate a CycloneDX SBOM with Trivy as follows:</p> <pre><code>$ trivy image --format cyclonedx --output debian11.sbom.cdx debian:11\n</code></pre>"},{"location":"docs/supply-chain/vex/file/#create-the-vex","title":"Create the VEX","text":"<p>Next, create a VEX based on the generated SBOM. Multiple vulnerability statuses can be defined under <code>vulnerabilities</code>. Take a look at the example below.</p> <pre><code>$ cat &lt;&lt;EOF &gt; trivy.vex.cdx\n{\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.5\",\n  \"version\": 1,\n  \"vulnerabilities\": [\n    {\n      \"id\": \"CVE-2020-8911\",\n      \"analysis\": {\n        \"state\": \"not_affected\",\n        \"justification\": \"code_not_reachable\",\n        \"response\": [\"will_not_fix\", \"update\"],\n        \"detail\": \"The vulnerable function is not called\"\n      },\n      \"affects\": [\n        {\n          \"ref\": \"urn:cdx:3e671687-395b-41f5-a30f-a58921a69b79/1#pkg:golang/github.com/aws/aws-sdk-go@v1.44.234\"\n        }\n      ]\n    }\n  ]\n}\nEOF\n</code></pre> <p>This is a VEX document in the CycloneDX format. The vulnerability ID, such as a CVE-ID or GHSA-ID, should be placed in <code>vulnerabilities.id</code>. When the <code>analysis.state</code> is set to <code>not_affected</code>, Trivy will not detect the vulnerability.</p> <p>BOM-Links must be placed in <code>affects.ref</code>. The BOM-Link has the following syntax and consists of three elements:</p> <pre><code>urn:cdx:serialNumber/version#bom-ref\n</code></pre> <ul> <li>serialNumber</li> <li>version</li> <li>bom-ref</li> </ul> <p>These values must be obtained from the CycloneDX SBOM. Please note that while the serialNumber starts with <code>urn:uuid:</code>, the BOM-Link starts with <code>urn:cdx:</code>.</p> <p>The <code>bom-ref</code> must contain the BOM-Ref of the package affected by the vulnerability. In the example above, since the Go package <code>github.com/aws/aws-sdk-go</code> is affected by CVE-2020-8911, it was necessary to specify the SBOM's BOM-Ref, <code>pkg:golang/github.com/aws/aws-sdk-go@1.44.234</code>.</p> <p>For more details on CycloneDX VEX and BOM-Link, please refer to the following links:</p> <ul> <li>CycloneDX VEX</li> <li>BOM-Link</li> <li>Examples</li> </ul>"},{"location":"docs/supply-chain/vex/file/#scan-sbom-with-vex","title":"Scan SBOM with VEX","text":"<p>Provide the VEX when scanning the CycloneDX SBOM.</p> <pre><code>$ trivy sbom trivy.sbom.cdx --vex trivy.vex.cdx\n...\n2023-04-13T12:55:44.838+0300    INFO    Filtered out the detected vulnerability {\"VEX format\": \"CycloneDX\", \"vulnerability-id\": \"CVE-2020-8911\", \"status\": \"not_affected\", \"justification\": \"code_not_reachable\"}\n\ngo.mod (gomod)\n==============\nTotal: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Library          \u2502 Vulnerability \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 github.com/aws/aws-sdk-go \u2502 CVE-2020-8912 \u2502 LOW      \u2502 v1.44.234         \u2502               \u2502 aws-sdk-go: In-band key negotiation issue in AWS S3 Crypto \u2502\n\u2502                           \u2502               \u2502          \u2502                   \u2502               \u2502 SDK for golang...                                          \u2502\n\u2502                           \u2502               \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2020-8912                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>CVE-2020-8911 is no longer shown as it is filtered out according to the given CycloneDX VEX document.</p>"},{"location":"docs/supply-chain/vex/file/#openvex","title":"OpenVEX","text":"Target Supported Container Image \u2705 Filesystem \u2705 Code Repository \u2705 VM Image \u2705 Kubernetes \u2705 SBOM \u2705 <p>Trivy also supports OpenVEX that is designed to be minimal, compliant, interoperable, and embeddable. OpenVEX can be used in all Trivy targets, unlike CycloneDX VEX.</p> <p>The following steps are required:</p> <ol> <li>Create a VEX document</li> <li>Provide the VEX when scanning your target</li> </ol>"},{"location":"docs/supply-chain/vex/file/#create-the-vex-document","title":"Create the VEX document","text":"<p>Please see also the example. Trivy requires the Package URL (PURL) as the product identifier.</p> <pre><code>$ cat &lt;&lt;EOF &gt; debian11.openvex.json\n{\n  \"@context\": \"https://openvex.dev/ns/v0.2.0\",\n  \"@id\": \"https://openvex.dev/docs/public/vex-2e67563e128250cbcb3e98930df948dd053e43271d70dc50cfa22d57e03fe96f\",\n  \"author\": \"Aqua Security\",\n  \"timestamp\": \"2023-08-29T19:07:16.853479631-06:00\",\n  \"version\": 1,\n  \"statements\": [\n    {\n      \"vulnerability\": {\"name\": \"CVE-2019-8457\"},\n      \"products\": [\n        {\"@id\": \"pkg:deb/debian/libdb5.3@5.3.28+dfsg1-0.8\"}\n      ],\n      \"status\": \"not_affected\",\n      \"justification\": \"vulnerable_code_not_in_execute_path\"\n    }\n  ]\n}\nEOF\n</code></pre> <p>In the above example, PURLs, <code>pkg:deb/debian/libdb5.3@5.3.28+dfsg1-0.8</code> are used for the product identifier. You can find PURLs in the JSON report generated by Trivy. This VEX statement is applied if the PURL specified in the VEX matches the PURL found during the scan. See here for more details of PURL matching.</p> <p>Trivy also supports OpenVEX subcomponents, which allow for more precise specification of the scope of a VEX statement, reducing the risk of incorrect filtering. Let's say you want to suppress vulnerabilities within a container image. If you only specify the PURL of the container image as the product, the resulting VEX would look like this:</p> OpenVEX products only <pre><code>\"statements\": [\n  {\n    \"vulnerability\": {\"name\": \"CVE-2024-32002\"},\n    \"products\": [\n      {\"@id\": \"pkg:oci/trivy?repository_url=ghcr.io%2Faquasecurity%2Ftrivy\"}\n    ],\n    \"status\": \"not_affected\",\n    \"justification\": \"vulnerable_code_not_in_execute_path\"\n  }\n]\n</code></pre> <p>However, this approach would suppress all instances of CVE-2024-32002 within the container image. If the intention is to declare that the <code>git</code> package distributed by Alpine Linux within this image is not affected, subcomponents can be utilized as follows:</p> OpenVEX subcomponents <pre><code>\"statements\": [\n  {\n    \"vulnerability\": {\"name\": \"CVE-2024-32002\"},\n    \"products\": [\n      {\n        \"@id\": \"pkg:oci/trivy?repository_url=ghcr.io%2Faquasecurity%2Ftrivy\",\n        \"subcomponents\": [\n          {\"@id\": \"pkg:apk/alpine/git\"}\n        ]\n      }\n    ],\n    \"status\": \"not_affected\",\n    \"justification\": \"vulnerable_code_not_in_execute_path\"\n  }\n]\n</code></pre> <p>By declaring the subcomponent in this manner, Trivy will filter the results, considering only the <code>git</code> package within the <code>ghcr.io/aquasecurity/trivy</code> container image as not affected. Omitting the version in the PURL applies the statement to all versions of the package. More details about PURL matching can be found here.</p> <p>Furthermore, the product specified in a VEX statement does not necessarily need to be the target of the scan. It is possible to specify a component that is included in the scan target as the product. For example, you can designate a specific Go project as the product and its dependent modules as subcomponents.</p> <p>In the following example, the VEX statement declares that the <code>github.com/docker/docker</code> module, which is a dependency of the <code>github.com/aquasecurity/trivy</code> Go project, is not affected by CVE-2024-29018.</p> OpenVEX intermediate components <pre><code>\"statements\": [\n  {\n    \"vulnerability\": {\"name\": \"CVE-2024-29018\"},\n    \"products\": [\n      {\n        \"@id\": \"pkg:golang/github.com/aquasecurity/trivy\",\n        \"subcomponents\": [\n          { \"@id\": \"pkg:golang/github.com/docker/docker\" }\n        ]\n      }\n    ],\n    \"status\": \"not_affected\",\n    \"justification\": \"vulnerable_code_not_in_execute_path\"\n  }\n]\n</code></pre> <p>This VEX document can be used when scanning a container image as well as other targets. The VEX statement will be applied when Trivy finds the Go binary within the container image.</p> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy:0.50.0 --vex trivy.openvex.json\n</code></pre> <p>VEX documents can indeed be reused across different container images, eliminating the need to issue separate VEX documents for each image. This is particularly useful when there is a common component or library that is used across multiple projects or container images.</p> <p>You can see the appendix for more details on how VEX is applied in Trivy.</p>"},{"location":"docs/supply-chain/vex/file/#scan-with-vex","title":"Scan with VEX","text":"<p>Provide the VEX when scanning your target.</p> <pre><code>$ trivy image debian:11.6 --vex debian11.openvex.json\n...\n2023-04-26T17:56:05.358+0300    INFO    Filtered out the detected vulnerability {\"VEX format\": \"OpenVEX\", \"vulnerability-id\": \"CVE-2019-8457\", \"status\": \"not_affected\", \"justification\": \"vulnerable_code_not_in_execute_path\"}\n\ndebian:11.6 (debian 11.6)\n\nTotal: 176 (UNKNOWN: 1, LOW: 82, MEDIUM: 46, HIGH: 41, CRITICAL: 5)\n</code></pre> <p>CVE-2019-8457 is no longer shown as it is filtered out according to the given OpenVEX document.</p>"},{"location":"docs/supply-chain/vex/file/#csaf","title":"CSAF","text":"Target Supported Container Image \u2705 Filesystem \u2705 Code Repository \u2705 VM Image \u2705 Kubernetes \u2705 SBOM \u2705 <p>Trivy also supports CSAF format for VEX. Since CSAF aims to be SBOM format agnostic, both CycloneDX and SPDX formats are available for use as input SBOMs in Trivy.</p> <p>The following steps are required:</p> <ol> <li>Create a CSAF document</li> <li>Provide the CSAF when scanning your target</li> </ol>"},{"location":"docs/supply-chain/vex/file/#create-the-csaf-document","title":"Create the CSAF document","text":"<p>Create a CSAF document in JSON format as follows:</p> CSAF VEX <pre><code>$ cat &lt;&lt;EOF &gt; debian11.vex.csaf\n{\n  \"document\": {\n    \"category\": \"csaf_vex\",\n    \"csaf_version\": \"2.0\",\n    \"notes\": [\n      {\n        \"category\": \"summary\",\n        \"text\": \"Example Company VEX document. Unofficial content for demonstration purposes only.\",\n        \"title\": \"Author comment\"\n      }\n    ],\n    \"publisher\": {\n      \"category\": \"vendor\",\n      \"name\": \"Example Company ProductCERT\",\n      \"namespace\": \"https://psirt.example.com\"\n    },\n    \"title\": \"AquaSecurity example VEX document\",\n    \"tracking\": {\n      \"current_release_date\": \"2024-01-01T11:00:00.000Z\",\n      \"generator\": {\n        \"date\": \"2024-01-01T11:00:00.000Z\",\n        \"engine\": {\n          \"name\": \"Secvisogram\",\n          \"version\": \"1.11.0\"\n        }\n      },\n      \"id\": \"2024-EVD-UC-01-A-001\",\n      \"initial_release_date\": \"2024-01-01T11:00:00.000Z\",\n      \"revision_history\": [\n        {\n          \"date\": \"2024-01-01T11:00:00.000Z\",\n          \"number\": \"1\",\n          \"summary\": \"Initial version.\"\n        }\n      ],\n      \"status\": \"final\",\n      \"version\": \"1\"\n    }\n  },\n  \"product_tree\": {\n    \"branches\": [\n      {\n        \"branches\": [\n          {\n            \"branches\": [\n              {\n                \"category\": \"product_version\",\n                \"name\": \"5.3\",\n                \"product\": {\n                  \"name\": \"Database Libraries 5.3\",\n                  \"product_id\": \"LIBDB-5328\",\n                  \"product_identification_helper\": {\n                    \"purl\": \"pkg:deb/debian/libdb5.3@5.3.28%2Bdfsg1-0.8?arch=amd64\\u0026distro=debian-11.8\"\n                  }\n                }\n              }\n            ],\n            \"category\": \"product_name\",\n            \"name\": \"Database Libraries\"\n          }\n        ],\n        \"category\": \"vendor\",\n        \"name\": \"Debian\"\n      }\n    ]\n  },\n  \"vulnerabilities\": [\n    {\n      \"cve\": \"CVE-2019-8457\",\n      \"notes\": [\n        {\n          \"category\": \"description\",\n          \"text\": \"SQLite3 from 3.6.0 to and including 3.27.2 is vulnerable to heap out-of-bound read in the rtreenode() function when handling invalid rtree tables.\",\n          \"title\": \"CVE description\"\n        }\n      ],\n      \"product_status\": {\n        \"known_not_affected\": [\n          \"LIBDB-5328\"\n        ]\n      },\n      \"threats\": [\n        {\n          \"category\": \"impact\",\n          \"details\": \"Vulnerable code not in execute path.\",\n          \"product_ids\": [\n            \"LIBDB-5328\"\n          ]\n        }\n      ]\n    }\n  ]\n}\nEOF\n</code></pre> <p>Trivy also supports CSAF relationships, reducing the risk of incorrect filtering. It works in the same way as OpenVEX subcomponents. At present, the specified relationship category is not taken into account and all the following categories are treated internally as \"depends_on\".</p> <ul> <li>default_component_of</li> <li>installed_on</li> <li>installed_with</li> </ul> <p>You can see the appendix for more details on how VEX is applied in Trivy.</p>"},{"location":"docs/supply-chain/vex/file/#scan-with-csaf-vex","title":"Scan with CSAF VEX","text":"<p>Provide the CSAF document when scanning your target.</p> <pre><code>$ trivy image debian:11.8 --vex debian11.vex.csaf\n...\n2024-01-02T10:28:26.704+0100    INFO    Filtered out the detected vulnerability {\"VEX format\": \"CSAF\", \"vulnerability-id\": \"CVE-2019-8457\", \"status\": \"not_affected\"}\n\ndebian:11.8 (debian 11.8)\n\nTotal: 153 (UNKNOWN: 1, LOW: 82, MEDIUM: 33, HIGH: 32, CRITICAL: 5)\n</code></pre> <p>CVE-2019-8457 is no longer shown as it is filtered out according to the given CSAF document.</p>"},{"location":"docs/supply-chain/vex/file/#appendix","title":"Appendix","text":""},{"location":"docs/supply-chain/vex/file/#purl-matching","title":"PURL matching","text":"<p>In the context of VEX, Package URLs (PURLs) are utilized to identify specific software packages and their versions. The PURL matching specification outlines how PURLs are interpreted for vulnerability exception processing, ensuring precise identification and broad coverage of software packages.</p> <p>Note</p> <p>The following PURL matching rules are not formally defined within the current official PURL specification. Instead, they represent a community consensus on how to interpret PURLs.</p> <p>Below are the key aspects of the PURL matching rules:</p>"},{"location":"docs/supply-chain/vex/file/#matching-without-version","title":"Matching Without Version","text":"<p>A PURL without a specified version (e.g., <code>pkg:maven/com.google.guava/guava</code>) matches all versions of that package. This rule simplifies the application of vulnerability exceptions to all versions of a package.</p> <p>Example: <code>pkg:maven/com.google.guava/guava</code> matches:</p> <ul> <li>All versions of <code>guava</code>, such as <code>com.google.guava:guava:24.1.1</code>, <code>com.google.guava:guava:30.0</code>.</li> </ul>"},{"location":"docs/supply-chain/vex/file/#matching-without-qualifiers","title":"Matching Without Qualifiers","text":"<p>A PURL without any qualifiers (e.g., <code>pkg:maven/com.google.guava/guava@24.1.1</code>) matches any variation of that package, irrespective of qualifiers. This approach ensures broad matching capabilities, covering all architectural or platform-specific variations of a package version.</p> <p>Example: <code>pkg:maven/com.google.guava/guava@24.1.1</code> matches:</p> <ul> <li><code>pkg:maven/com.google.guava/guava@24.1.1?classifier=x86</code></li> <li><code>pkg:maven/com.google.guava/guava@24.1.1?type=pom</code></li> </ul>"},{"location":"docs/supply-chain/vex/file/#matching-with-specific-qualifiers","title":"Matching With Specific Qualifiers","text":"<p>A PURL that includes specific qualifiers (e.g., <code>pkg:maven/com.google.guava/guava@24.1.1?classifier=x86</code>) matches only those package versions that include the same qualifiers.</p> <p>Example: <code>pkg:maven/com.google.guava/guava@24.1.1?classifier=x86</code> matches:</p> <ul> <li><code>pkg:maven/com.google.guava/guava@24.1.1?classifier=x86&amp;type=dll</code><ul> <li>Extra qualifiers (e.g., <code>type=dll</code>) are ignored.</li> </ul> </li> </ul> <p>does not match:</p> <ul> <li><code>pkg:maven/com.google.guava/guava@24.1.1</code><ul> <li><code>classifier=x86</code> is missing.</li> </ul> </li> <li><code>pkg:maven/com.google.guava/guava@24.1.1?classifier=sources</code><ul> <li><code>classifier</code> must have the same value.</li> </ul> </li> </ul>"},{"location":"docs/supply-chain/vex/file/#applying-vex-to-dependency-trees","title":"Applying VEX to Dependency Trees","text":"<p>Trivy internally generates a dependency tree and applies VEX statements to this graph. Let's consider a project with the following dependency tree, where <code>Module C v2.0.0</code> is assumed to have a vulnerability CVE-XXXX-YYYY:</p> <pre><code>graph TD;\n  modRootA(Module Root A v1.0.0)\n  modB(Module B v1.0.0) \n  modC(Module C v2.0.0)\n\n  modRootA--&gt;modB\n  modB--&gt;modC</code></pre> <p>Now, suppose a VEX statement is issued for <code>Module B</code> as follows:</p> <pre><code>\"statements\": [\n  {\n    \"vulnerability\": {\"name\": \"CVE-XXXX-YYYY\"},\n    \"products\": [\n      {\n        \"@id\": \"pkg:golang/module-b@v1.0.0\",\n        \"subcomponents\": [\n          { \"@id\": \"pkg:golang/module-c@v2.0.0\" }\n        ]\n      }\n    ],\n    \"status\": \"not_affected\",\n    \"justification\": \"vulnerable_code_not_in_execute_path\"  \n  }\n]\n</code></pre> <p>It declares that <code>Module B</code> is not affected by CVE-XXXX-YYYY on <code>Module C</code>.</p> <p>Note</p> <p>The VEX in this example defines the relationship between <code>Module B</code> and <code>Module C</code>. However, as Trivy traverses all parents from vulnerable packages, it is also possible to define a VEX for the relationship between a vulnerable package and any parent, such as <code>Module A</code> and <code>Module C</code>, etc.</p> <p>Mapping this VEX onto the dependency tree would look like this:</p> <pre><code>graph TD;\n  modRootA(Module Root A v1.0.0)\n\n  subgraph \"VEX (Not Affected)\"\n  modB(Module B v1.0.0)\n  modC(Module C v2.0.0)\n  end\n\n  modRootA--&gt;modB\n  modB--&gt;modC</code></pre> <p>In this case, it's clear that <code>Module Root A</code> is also not affected by CVE-XXXX-YYYY, so this vulnerability is suppressed.</p> <p>Now, let's consider another project:</p> <pre><code>graph TD;\n  modRootZ(Module Root Z v1.0.0)\n  modB'(Module B v1.0.0)\n  modC'(Module C v2.0.0)\n  modD'(Module D v3.0.0)\n\n  modRootZ--&gt;modB'\n  modRootZ--&gt;modD'\n  modB'--&gt;modC'\n  modD'--&gt;modC'</code></pre> <p>Assuming the same VEX as before, applying it to this dependency tree would look like:</p> <pre><code>graph TD;\n  modRootZ(Module Root Z v1.0.0)\n\n  subgraph \"VEX (Not Affected)\"\n  modB'(Module B v1.0.0)\n  modC'(Module C v2.0.0)\n  end\n\n  modD'(Module D v3.0.0)\n\n  modRootZ--&gt;modB'\n  modRootZ--&gt;modD'\n  modB'--&gt;modC'\n  modD'--&gt;modC'</code></pre> <p><code>Module Root Z</code> depends on <code>Module C</code> via multiple paths. While the VEX tells us that <code>Module B</code> is not affected by the vulnerability, <code>Module D</code> might be. In the absence of a VEX, the default assumption is that it is affected. Taking all of this into account, Trivy determines that <code>Module Root Z</code> is affected by this vulnerability.</p>"},{"location":"docs/supply-chain/vex/oci/","title":"Discover VEX Attestation in OCI Registry","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy can discover VEX attestations for container images. This feature allows you to automatically use VEX during container image scanning.</p>"},{"location":"docs/supply-chain/vex/oci/#how-it-works","title":"How It Works","text":"<p>Trivy can automatically discover and utilize VEX attestations for container images during scanning by using the <code>--vex oci</code> flag. This process enhances vulnerability detection results by incorporating the information from the VEX attestation.</p> <p>To use this feature, follow these three steps:</p> <ol> <li>Create a VEX document</li> <li>Generate and upload a VEX attestation to an OCI registry</li> <li>Use the VEX attestation with Trivy</li> </ol> <p>Steps 1 and 2 are not necessary if you are trying to scan a third-party container image and already have VEX attestation attached.</p> <p>Let's go through each step in detail.</p> <p>Note</p> <p>In the following examples, the <code>cosign</code> command will write an attestation to a target OCI registry, so you must have permission to write. If you want to avoid writing an OCI registry and only want to see an attestation, add the <code>--no-upload</code> option to the cosign command.</p>"},{"location":"docs/supply-chain/vex/oci/#step-1-create-a-vex-document","title":"Step 1: Create a VEX Document","text":"<p>Currently, Trivy does not have a built-in feature to create VEX documents, so you need to create them manually. You can refer to the OpenVEX section for guidance on creating VEX files.</p> <p>For container image vulnerabilities, the product ID should be the OCI type in the PURL format. For example:</p> <pre><code>pkg:oci/trivy?repository_url=ghcr.io/aquasecurity/trivy\n</code></pre> <p>This product ID applies the VEX statement to all tags of the <code>ghcr.io/aquasecurity/trivy</code> container image. If you want to declare a statement for a specific digest only, you can use:</p> <pre><code>pkg:oci/trivy@sha256:5bd5ab35814f86783561603ebb35d5d5d99006dcdcd5c3f828ea1afb4c12d159?repository_url=ghcr.io/aquasecurity/trivy\n</code></pre> <p>Note</p> <p>Using an image tag, like <code>pkg:oci/trivy?repository_url=ghcr.io/aquasecurity/trivy&amp;tag=0.50.0</code>, is not supported in the product ID at the moment.</p> <p>Next, specify vulnerable packages as subcomponents, such as <code>pkg:apk/alpine/busybox</code>. You can also include the package version and other qualifiers (e.g., <code>arch</code>) to limit statements, like <code>pkg:apk/alpine/busybox@1.36.1-r29?arch=x86</code>.</p> <p>Lastly, include the vulnerability IDs.</p> <p>Here's an example VEX document:</p> <pre><code>{\n  \"@context\": \"https://openvex.dev/ns/v0.2.0\",\n  \"@id\": \"https://openvex.dev/docs/public/vex-2e67563e128250cbcb3e98930df948dd053e43271d70dc50cfa22d57e03fe96f\",\n  \"author\": \"Aqua Security\",\n  \"timestamp\": \"2024-07-30T19:07:16.853479631-06:00\",\n  \"version\": 1,\n  \"statements\": [\n    {\n      \"vulnerability\": {\n        \"name\": \"CVE-2023-42363\"\n      },\n      \"products\": [\n        {\n          \"@id\": \"pkg:oci/trivy?repository_url=ghcr.io/aquasecurity/trivy\",\n          \"subcomponents\": [\n            {\"@id\": \"pkg:apk/alpine/busybox\"},\n            {\"@id\": \"pkg:apk/alpine/busybox-binsh\"}\n          ]\n        }\n      ],\n      \"status\": \"not_affected\",\n      \"justification\": \"vulnerable_code_cannot_be_controlled_by_adversary\",\n      \"impact_statement\": \"awk is not used\"\n    }\n  ]\n}\n</code></pre> <p>You can also refer to Trivy's example for more inspiration.</p>"},{"location":"docs/supply-chain/vex/oci/#step-2-generate-and-upload-a-vex-attestation-to-an-oci-registry","title":"Step 2: Generate and Upload a VEX Attestation to an OCI Registry","text":"<p>You can use the Cosign command to generate and upload the VEX attestation. Cosign offers methods both with and without keys. For detailed instructions, please refer to the Cosign documentation.</p> <p>To generate and attach a VEX attestation to your image, use the following command:</p> <pre><code>$ cosign attest --predicate oci.openvex.json --type openvex &lt;IMAGE&gt;\n</code></pre> <p>Note that this command attaches the attestation only to the specified image tag. If needed, repeat the process for other tags and digests.</p>"},{"location":"docs/supply-chain/vex/oci/#step-3-use-vex-attestation-with-trivy","title":"Step 3: Use VEX Attestation with Trivy","text":"<p>Once you've attached the VEX attestation to the container image, Trivy can automatically discover and use it during scanning. Simply add the <code>--vex oci</code> flag when scanning a container image:</p> <pre><code>$ trivy image --vex oci &lt;IMAGE&gt;\n</code></pre> <p>To see which vulnerabilities were filtered by the VEX attestation, use the <code>--show-suppressed</code> flag:</p> <pre><code>$ trivy image --vex oci --show-suppressed &lt;IMAGE&gt;\n</code></pre> <p>The <code>&lt;IMAGE&gt;</code> specified in these commands must be the same as the one to which you attached the VEX attestation.</p>"},{"location":"docs/supply-chain/vex/repo/","title":"VEX Repository","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p>"},{"location":"docs/supply-chain/vex/repo/#using-vex-repository","title":"Using VEX Repository","text":"<p>Trivy can download and utilize VEX documents from repositories that comply with the VEX Repository Specification. While it's planned to be enabled by default in the future, currently it can be activated by explicitly specifying <code>--vex repo</code>.</p> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy:0.52.0 --vex repo\n2024-07-20T11:22:58+04:00       INFO    [vex] The default repository config has been created    \nfile_path=\"/Users/teppei/.trivy/vex/repository.yaml\"\n2024-07-20T11:23:23+04:00       INFO    [vex] Updating repository...    repo=\"default\" url=\"https://github.com/aquasecurity/vexhub\"\n</code></pre> <p>During scanning, Trivy generates PURLs for discovered packages and searches for matching PURLs in the VEX Repository. If a match is found, the corresponding VEX is utilized.</p>"},{"location":"docs/supply-chain/vex/repo/#configuration-file","title":"Configuration File","text":""},{"location":"docs/supply-chain/vex/repo/#default-configuration","title":"Default Configuration","text":"<p>When <code>--vex repo</code> is specified for the first time, a default configuration file is created at <code>$HOME/.trivy/vex/repository.yaml</code>. The home directory can be configured through environment variable <code>$XDG_DATA_HOME</code>.</p> <p>You can also create the configuration file in advance using the <code>trivy vex repo init</code> command and edit it.</p> <p>The default configuration file looks like this:</p> <pre><code>repositories:\n  - name: default\n    url: https://github.com/aquasecurity/vexhub\n    enabled: true\n    username: \"\"\n    password: \"\"\n    token: \"\"\n</code></pre> <p>By default, VEX Hub managed by Aqua Security is used. VEX Hub primarily trusts VEX documents published by the package maintainers.</p>"},{"location":"docs/supply-chain/vex/repo/#show-configuration","title":"Show Configuration","text":"<p>You can see the config file path and the configured repositories with <code>trivy vex repo list</code>:</p> <pre><code>$ trivy vex repo list\nVEX Repositories (config: /home/username/.trivy/vex/repository.yaml)\n\n- Name: default\n  URL: https://github.com/aquasecurity/vexhub\n  Status: Enabled\n</code></pre>"},{"location":"docs/supply-chain/vex/repo/#custom-repositories","title":"Custom Repositories","text":"<p>If you want to trust VEX documents published by other organizations or use your own VEX repository, you can specify a custom repository that complies with the VEX Repository Specification. You can add a custom repository as below:</p> <pre><code>- name: custom\n  url: https://example.com/custom-repo\n  enabled: true\n</code></pre>"},{"location":"docs/supply-chain/vex/repo/#authentication","title":"Authentication","text":"<p>For private repositories:</p> <ul> <li><code>username</code>/<code>password</code> can be used for Basic authentication</li> <li><code>token</code> can be used for Bearer authentication</li> </ul> <pre><code>- name: custom\n  url: https://example.com/custom-repo\n  enabled: true\n  token: \"my-token\"\n</code></pre>"},{"location":"docs/supply-chain/vex/repo/#repository-priority","title":"Repository Priority","text":"<p>The priority of VEX repositories is determined by their order in the configuration file. You can add repositories with higher priority than the default or even remove the default VEX Hub.</p> <pre><code>- name: repo1\n  url: https://example.com/repo1\n- name: repo2\n  url: https://example.com/repo2\n</code></pre> <p>In this configuration, when Trivy detects a vulnerability in a package, it generates a PURL for that package and searches for matching VEX documents in the configured repositories. The search process follows this order:</p> <ol> <li>Trivy first looks for a VEX document matching the package's PURL in <code>repo1</code>.</li> <li>If no matching VEX document is found in <code>repo1</code>, Trivy then searches in <code>repo2</code>.</li> <li>This process continues through all configured repositories until a match is found.</li> </ol> <p>If a matching VEX document is found in any repository (e.g., <code>repo1</code>), the search stops, and Trivy uses that VEX document. Subsequent repositories (e.g., <code>repo2</code>) are not checked for that specific vulnerability and package combination.</p> <p>It's important to note that the first matching VEX document found determines the final status of the vulnerability. For example, if <code>repo1</code> states that a package is \"Affected\" by a vulnerability, this status will be used even if <code>repo2</code> states that the same package is \"Not Affected\" for the same vulnerability. The \"Affected\" status from the higher-priority repository (<code>repo1</code>) takes precedence, and Trivy will consider the package as affected by the vulnerability.</p>"},{"location":"docs/supply-chain/vex/repo/#repository-updates","title":"Repository Updates","text":"<p>VEX repositories are automatically updated during scanning. Updates are performed based on the update frequency specified by the repository.</p> <p>To disable auto-update, pass <code>--skip-vex-repo-update</code>.</p> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy:0.50.0 --vex repo --skip-vex-repo-update\n</code></pre> <p>To download VEX repositories in advance without scanning, use <code>trivy vex repo download</code>.</p> <p>The cache can be cleared with <code>trivy clean --vex-repo</code>.</p>"},{"location":"docs/supply-chain/vex/repo/#displaying-filtered-vulnerabilities","title":"Displaying Filtered Vulnerabilities","text":"<p>To see which vulnerabilities were filtered and why, use the <code>--show-suppressed</code> option:</p> <pre><code>$ trivy image ghcr.io/aquasecurity/trivy:0.50.0 --vex repo --show-suppressed\n...\n\nSuppressed Vulnerabilities (Total: 4)\n=====================================\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Library    \u2502 Vulnerability  \u2502 Severity \u2502    Status    \u2502                     Statement                     \u2502                  Source                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 busybox       \u2502 CVE-2023-42364 \u2502 MEDIUM   \u2502 not_affected \u2502 vulnerable_code_cannot_be_controlled_by_adversary \u2502 VEX Repository: default                  \u2502\n\u2502               \u2502                \u2502          \u2502              \u2502                                                   \u2502 (https://github.com/aquasecurity/vexhub) \u2502\n\u2502               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u2502 CVE-2023-42365 \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u2502                \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502 busybox-binsh \u2502 CVE-2023-42364 \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u2502                \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u2502 CVE-2023-42365 \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2502               \u2502                \u2502          \u2502              \u2502                                                   \u2502                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/supply-chain/vex/repo/#publishing-vex-documents","title":"Publishing VEX Documents","text":""},{"location":"docs/supply-chain/vex/repo/#for-oss-projects","title":"For OSS Projects","text":"<p>As an OSS developer or maintainer, you may encounter vulnerabilities in the packages your project depends on. These vulnerabilities might be discovered through your own scans or reported by third parties using your OSS project.</p> <p>While Trivy strives to minimize false positives, it doesn't perform code graph analysis, which means it can't evaluate exploitability at the code level. Consequently, Trivy may report vulnerabilities even in cases where:</p> <ol> <li>The vulnerable function in a dependency is never called in your project.</li> <li>The vulnerable code cannot be controlled by an attacker in the context of your project.</li> </ol> <p>If you're confident that a reported vulnerability in a dependency doesn't affect your OSS project or container image, you can publish a VEX document to reduce noise in Trivy scans. To assess exploitability, you have several options:</p> <ol> <li>Manual assessment: As a maintainer, you can read the source code and determine if the vulnerability is exploitable in your project's context.</li> <li>Automated assessment: You can use SAST (Static Application Security Testing) tools or similar tools to analyze the code and determine exploitability.</li> </ol> <p>By publishing VEX documents in the source repository, Trivy can automatically utilize them through VEX Hub. The main steps are:</p> <ol> <li>Generate a VEX document</li> <li>Commit the VEX document to the <code>.vex/</code> directory in the source repository (e.g., Trivy's VEX)</li> <li>Register your project's PURL in VEX Hub</li> </ol> <p>Step 3 is only necessary once. After that, updating the VEX file in your repository will automatically be fetched by VEX Hub and utilized by Trivy. See the VEX Hub repository for more information.</p> <p>If you want to issue a VEX for an OSS project that you don't maintain, consider first proposing the VEX publication to the original repository. Many OSS maintainers are open to contributions that improve the security posture of their projects. However, if your proposal is not accepted, or if you want to issue a VEX with statements that differ from the maintainer's judgment, you may want to consider creating a custom repository.</p>"},{"location":"docs/supply-chain/vex/repo/#for-private-projects","title":"For Private Projects","text":"<p>If you're working on private software or personal projects, you have several options:</p> <ol> <li>Local VEX files: You can create local VEX files and have Trivy read them during scans. This is suitable for individual use or small teams.</li> <li>.trivyignore: For simpler cases, using a .trivyignore file might be sufficient to suppress specific vulnerabilities.</li> <li>Custom repositories: For large organizations wanting to share VEX information for internally used software across different departments, setting up a custom VEX repository might be the best approach.</li> </ol>"},{"location":"docs/supply-chain/vex/repo/#hosting-custom-repositories","title":"Hosting Custom Repositories","text":"<p>While the principle is to store VEX documents for OSS packages in the source repository, it's possible to create a custom repository if that's difficult.</p> <p>There are various use cases for providing custom repositories:</p> <ul> <li>A Pull Request to add a VEX document upstream was not merged</li> <li>Consolidating VEX documents output by SAST tools</li> <li>Publishing vendor-specific VEX documents that differ from OSS maintainer statements</li> <li>Creating a private VEX repository to publish common VEX for your company</li> </ul> <p>In these cases, you can create a repository that complies with the VEX Repository Specification to make it available for use with Trivy.</p>"},{"location":"docs/supply-chain/vex/sbom-ref/","title":"VEX SBOM Reference","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p>"},{"location":"docs/supply-chain/vex/sbom-ref/#using-externally-referenced-vex-documents","title":"Using externally referenced VEX documents","text":"<p>Trivy can discover and download VEX documents referenced in the <code>externalReferences</code> of a scanned CycloneDX SBOM. This requires the references to be of type <code>exploitability-statement</code>.</p> <p>To be picked up by Trivy, following top level content needs to be part of a CycloneDx SBOM to dynamically resolve a remotely hosted file VEX file at the location <code>https://vex.example.com</code>:</p> <pre><code>  \"externalReferences\": [\n    {\n      \"type\": \"exploitability-statement\",\n      \"url\": \"https://vex.example.com/vex\"\n    }\n  ]\n</code></pre> <p>This can also be used to dynamically retrieve VEX files stored on GitHub with an <code>externalReference</code> such as:</p> <pre><code>  \"externalReferences\": [\n    {\n      \"type\": \"exploitability-statement\",\n      \"url\": \"https://raw.githubusercontent.com/aquasecurity/trivy/refs/heads/main/.vex/trivy.openvex.json\"\n    }\n  ]\n</code></pre> <p>This is not enabled by default at the moment, but can be used when scanning a CycloneDx SBOM and explicitly specifying <code>--vex sbom-ref</code>.</p> <pre><code>$ trivy sbom trivy.cdx.json --vex sbom-ref\n2025-01-19T13:29:31+01:00       INFO    [vex] Retrieving external VEX document from host vex.example.com type=\"externalReference\"\n2025-01-19T13:29:31+01:00       INFO    Some vulnerabilities have been ignored/suppressed. Use the \"--show-suppressed\" flag to display them.\n</code></pre> <p>All the referenced VEX files are retrieved via HTTP/HTTPS and used in the same way as if they were explicitly specified via a file reference.</p>"},{"location":"docs/target/container_image/","title":"Container Image","text":"<p>Trivy supports two targets for container images.</p> <ul> <li>Files inside container images</li> <li>Container image metadata</li> </ul>"},{"location":"docs/target/container_image/#files-inside-container-images","title":"Files inside container images","text":"<p>Container images consist of files. For instance, new files will be installed if you install a package.</p> <p>Trivy scans the files inside container images for</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Secrets</li> <li>Licenses</li> </ul> <p>By default, vulnerability and secret scanning are enabled, and you can configure that with <code>--scanners</code>.</p>"},{"location":"docs/target/container_image/#vulnerabilities","title":"Vulnerabilities","text":"<p>It is enabled by default. You can simply specify your image name (and a tag). It detects known vulnerabilities in your container image. See here for the detail.</p> <pre><code>$ trivy image [YOUR_IMAGE_NAME]\n</code></pre> <p>For example:</p> <pre><code>$ trivy image python:3.4-alpine\n</code></pre> Result <pre><code>2019-05-16T01:20:43.180+0900    INFO    Updating vulnerability database...\n2019-05-16T01:20:53.029+0900    INFO    Detecting Alpine vulnerabilities...\n\npython:3.4-alpine3.9 (alpine 3.9.2)\n===================================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)\n\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n| LIBRARY | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |             TITLE              |\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n| openssl | CVE-2019-1543    | MEDIUM   | 1.1.1a-r1         | 1.1.1b-r1     | openssl: ChaCha20-Poly1305     |\n|         |                  |          |                   |               | with long nonces               |\n+---------+------------------+----------+-------------------+---------------+--------------------------------+\n</code></pre> <p>To enable only vulnerability scanning, you can specify <code>--scanners vuln</code>.</p> <pre><code>$ trivy image --scanners vuln [YOUR_IMAGE_NAME]\n</code></pre>"},{"location":"docs/target/container_image/#misconfigurations","title":"Misconfigurations","text":"<p>It is supported, but it is not useful in most cases. As mentioned here, Trivy mainly supports Infrastructure as Code (IaC) files for misconfigurations. If your container image includes IaC files such as Kubernetes YAML files or Terraform files, you should enable this feature with <code>--scanners misconfig</code>.</p> <pre><code>$ trivy image --scanners misconfig [YOUR_IMAGE_NAME]\n</code></pre>"},{"location":"docs/target/container_image/#secrets","title":"Secrets","text":"<p>It is enabled by default. See here for the detail.</p> <pre><code>$ trivy image [YOUR_IMAGE_NAME]\n</code></pre>"},{"location":"docs/target/container_image/#licenses","title":"Licenses","text":"<p>It is disabled by default. See here for the detail.</p> <pre><code>$ trivy image --scanners license [YOUR_IMAGE_NAME]\n</code></pre>"},{"location":"docs/target/container_image/#container-image-metadata","title":"Container image metadata","text":"<p>Container images have configuration. <code>docker inspect</code> and <code>docker history</code> show the information according to the configuration.</p> <p>Trivy scans the configuration of container images for</p> <ul> <li>Misconfigurations</li> <li>Secrets</li> </ul> <p>They are disabled by default. You can enable them with <code>--image-config-scanners</code>.</p> <p>Tips</p> <p>The configuration can be exported as the JSON file by <code>docker save</code>.</p>"},{"location":"docs/target/container_image/#misconfigurations_1","title":"Misconfigurations","text":"<p>Trivy detects misconfigurations on the configuration of container images. The image config is converted into Dockerfile and Trivy handles it as Dockerfile. See here for the detail of Dockerfile scanning.</p> <p>It is disabled by default. You can enable it with <code>--image-config-scanners misconfig</code>.</p> <pre><code>$ trivy image --image-config-scanners misconfig [YOUR_IMAGE_NAME]\n</code></pre> Result <pre><code>alpine:3.17 (dockerfile)\n========================\nTests: 24 (SUCCESSES: 21, FAILURES: 3)\nFailures: 3 (UNKNOWN: 0, LOW: 2, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\nHIGH: Specify at least 1 USER command in Dockerfile with non-root user as argument\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nRunning containers with 'root' user can lead to a container escape situation. It is a best practice to run containers as non-root users, which can be done by adding a 'USER' statement to the Dockerfile.\n\nSee https://avd.aquasec.com/misconfig/ds002\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nLOW: Consider using 'COPY file:e4d600fc4c9c293efe360be7b30ee96579925d1b4634c94332e2ec73f7d8eca1 in /' command instead of 'ADD file:e4d600fc4c9c293efe360be7b30ee96579925d1b4634c94332e2ec73f7d8eca1 in /'\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nYou should use COPY instead of ADD unless you want to extract a tar file. Note that an ADD command will extract a tar file, which adds the risk of Zip-based vulnerabilities. Accordingly, it is advised to use a COPY command, which does not extract tar files.\n\nSee https://avd.aquasec.com/misconfig/ds005\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n alpine:3.17:1\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n   1 [ ADD file:e4d600fc4c9c293efe360be7b30ee96579925d1b4634c94332e2ec73f7d8eca1 in /\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nLOW: Add HEALTHCHECK instruction in your Dockerfile\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nYou should add HEALTHCHECK instruction in your docker container images to perform the health check on running containers.\n\nSee https://avd.aquasec.com/misconfig/ds026\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>Tip</p> <p>You can see how each layer is created with <code>docker history</code>.</p>"},{"location":"docs/target/container_image/#disabled-checks","title":"Disabled checks","text":"<p>The following checks are disabled for this scan type due to known issues. See the linked issues for more details.</p> Check ID Reason Issue AVD-DS-0007 This check detects multiple <code>ENTRYPOINT</code> instructions in a stage, but since image history analysis does not identify stages, this check is not relevant for this scan type. #8364 AVD-DS-0016 This check detects multiple <code>CMD</code> instructions in a stage, but since image history analysis does not identify stages, this check is not relevant for this scan type. #7368"},{"location":"docs/target/container_image/#secrets_1","title":"Secrets","text":"<p>Trivy detects secrets on the configuration of container images. The image config is converted into JSON and Trivy scans the file for secrets. It is especially useful for environment variables that are likely to have credentials by accident. See here for the detail.</p> <pre><code>$ trivy image --image-config-scanners secret [YOUR_IMAGE_NAME]\n</code></pre> Result <pre><code>vuln-image (alpine 3.17.1)\n==========================\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\n\nvuln-image (secrets)\n====================\nTotal: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)\n\nCRITICAL: GitHub (github-pat)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nGitHub Personal Access Token\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n test:16\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  14     {\n  15     \"created\": \"2023-01-09T17:05:20Z\",\n  16 [   \"created_by\": \"ENV secret=****************************************\",\n  17     \"comment\": \"buildkit.dockerfile.v0\",\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n\nCRITICAL: GitHub (github-pat)\n\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\nGitHub Personal Access Token\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n test:34\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  32     \"Env\": [\n  33     \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n  34 [   \"secret=****************************************\"\n  35     ]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>Tip</p> <p>You can see environment variables with <code>docker inspect</code>.</p>"},{"location":"docs/target/container_image/#supported","title":"Supported","text":"<p>Trivy will look for the specified image in a series of locations. By default, it will first look in the local Docker Engine, then Containerd, Podman, and finally container registry.</p> <p>This behavior can be modified with the <code>--image-src</code> flag. For example, the command</p> <pre><code>trivy image --image-src podman,containerd alpine:3.7.3\n</code></pre> <p>Will first search in Podman. If the image is found there, it will be scanned and the results returned. If the image is not found in Podman, then Trivy will search in Containerd. If the image is not found there either, the scan will fail and no more image sources will be searched.</p>"},{"location":"docs/target/container_image/#docker-engine","title":"Docker Engine","text":"<p>Trivy tries to looks for the specified image in your local Docker Engine. It will be skipped if Docker Engine is not running locally.</p> <p>If your docker socket is not the default path, you can override it via <code>DOCKER_HOST</code>.</p>"},{"location":"docs/target/container_image/#containerd","title":"containerd","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy tries to looks for the specified image in your local containerd. It will be skipped if containerd is not running locally.</p> <p>Specify your image name in containerd running locally.</p> <pre><code>$ nerdctl images\nREPOSITORY        TAG       IMAGE ID        CREATED         PLATFORM       SIZE         BLOB SIZE\naquasec/nginx    latest    2bcabc23b454    3 hours ago     linux/amd64    149.1 MiB    54.1 MiB\n$ trivy image aquasec/nginx\n</code></pre> <p>If your containerd socket is not the default path (<code>//run/containerd/containerd.sock</code>), you can override it via <code>CONTAINERD_ADDRESS</code>.</p> <pre><code>$ export CONTAINERD_ADDRESS=/run/k3s/containerd/containerd.sock\n$ trivy image aquasec/nginx\n</code></pre> <p>If your scan targets are images in a namespace other than containerd's default namespace (<code>default</code>), you can override it via <code>CONTAINERD_NAMESPACE</code>.</p> <pre><code>$ export CONTAINERD_NAMESPACE=k8s.io\n$ trivy image aquasec/nginx\n</code></pre>"},{"location":"docs/target/container_image/#podman","title":"Podman","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Scan your image in Podman (&gt;=2.0) running locally. The remote Podman is not supported. If you prefer to keep the socket open at all times, then before performing Trivy commands, you can enable the podman.sock systemd service on your machine. For more details, see here.</p> <pre><code>$ systemctl --user enable --now podman.socket\n</code></pre> <p>Then, you can scan your image in Podman.</p> <pre><code>$ cat Dockerfile\nFROM alpine:3.12\nRUN apk add --no-cache bash\n$ podman build -t test .\n$ podman images\nREPOSITORY                TAG     IMAGE ID      CREATED      SIZE\nlocalhost/test            latest  efc372d4e0de  About a minute ago  7.94 MB\n$ trivy image test\n</code></pre> <p>If you prefer not to keep the socket open at all times, but to limit the socket opening for your trivy scanning duration only then you can scan your image with the following command:</p> <pre><code>podman system service --time=0 \"${TMP_PODMAN_SOCKET}\" &amp;                                                                                                                                                             \nPODMAN_SYSTEM_SERVICE_PID=\"$!\"                                                                                                                                                                                      \ntrivy image --podman-host=\"${TMP_PODMAN_SOCKET}\" --docker-host=\"${TMP_PODMAN_SOCKET}\" test\nkill \"${PODMAN_SYSTEM_SERVICE_PID}\"\n</code></pre>"},{"location":"docs/target/container_image/#container-registry","title":"Container Registry","text":"<p>Trivy supports registries that comply with the following specifications.</p> <ul> <li>Docker Registry HTTP API V2</li> <li>OCI Distribution Specification</li> </ul> <p>You can configure credentials with <code>trivy registry login</code>. See here for the detail.</p>"},{"location":"docs/target/container_image/#tar-files","title":"Tar Files","text":"<p>Trivy supports image tar files generated by the following tools.</p> <ul> <li>Docker Image Specification<ul> <li>Moby Project</li> <li>Buildah</li> <li>Podman</li> <li>img</li> </ul> </li> <li>Kaniko</li> </ul> <pre><code>$ docker pull ruby:3.1-alpine3.15\n$ docker save ruby:3.1-alpine3.15 -o ruby-3.1.tar\n$ trivy image --input ruby-3.1.tar\n</code></pre> Result <pre><code>2022-02-03T10:08:19.127Z        INFO    Detected OS: alpine\n2022-02-03T10:08:19.127Z        WARN    This OS version is not on the EOL list: alpine 3.15\n2022-02-03T10:08:19.127Z        INFO    Detecting Alpine vulnerabilities...\n2022-02-03T10:08:19.127Z        INFO    Number of language-specific files: 2\n2022-02-03T10:08:19.127Z        INFO    Detecting gemspec vulnerabilities...\n2022-02-03T10:08:19.128Z        INFO    Detecting node-pkg vulnerabilities...\n2022-02-03T10:08:19.128Z        WARN    This OS version is no longer supported by the distribution: alpine 3.15.0\n2022-02-03T10:08:19.128Z        WARN    The vulnerability detection may be insufficient because security updates are not provided\n\nruby-3.1.tar (alpine 3.15.0)\n============================\nTotal: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)\n\n+----------+------------------+----------+-------------------+---------------+---------------------------------------+\n| LIBRARY  | VULNERABILITY ID | SEVERITY | INSTALLED VERSION | FIXED VERSION |                 TITLE                 |\n+----------+------------------+----------+-------------------+---------------+---------------------------------------+\n| gmp      | CVE-2021-43618   | HIGH     | 6.2.1-r0          | 6.2.1-r1      | gmp: Integer overflow and resultant   |\n|          |                  |          |                   |               | buffer overflow via crafted input     |\n|          |                  |          |                   |               | --&gt;avd.aquasec.com/nvd/cve-2021-43618 |\n+----------+                  +          +                   +               +                                       +\n| gmp-dev  |                  |          |                   |               |                                       |\n|          |                  |          |                   |               |                                       |\n|          |                  |          |                   |               |                                       |\n+----------+                  +          +                   +               +                                       +\n| libgmpxx |                  |          |                   |               |                                       |\n|          |                  |          |                   |               |                                       |\n|          |                  |          |                   |               |                                       |\n+----------+------------------+----------+-------------------+---------------+---------------------------------------+\n\nNode.js (node-pkg)\n==================\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n\n\nRuby (gemspec)\n==============\nTotal: 0 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 0)\n</code></pre>"},{"location":"docs/target/container_image/#oci-layout","title":"OCI Layout","text":"<p>Trivy supports image directories compliant with Open Container Image Layout Specification.</p> <p>Buildah:</p> <pre><code>$ buildah push docker.io/library/alpine:3.11 oci:/path/to/alpine\n$ trivy image --input /path/to/alpine\n</code></pre> <p>Skopeo:</p> <pre><code>$ skopeo copy docker-daemon:alpine:3.11 oci:/path/to/alpine\n$ trivy image --input /path/to/alpine\n</code></pre> <p>Referencing specific images can be done by their tag or by their manifest digest: <pre><code># Referenced by tag\n$ trivy image --input /path/to/alpine:3.15\n\n# Referenced by digest\n$ trivy image --input /path/to/alpine@sha256:82389ea44e50c696aba18393b168a833929506f5b29b9d75eb817acceb6d54ba\n</code></pre></p>"},{"location":"docs/target/container_image/#sbom","title":"SBOM","text":"<p>Trivy supports the generation of Software Bill of Materials (SBOM) for container images and the search for SBOMs during vulnerability scanning.</p>"},{"location":"docs/target/container_image/#generation","title":"Generation","text":"<p>Trivy can generate SBOM for container images. See here for details.</p>"},{"location":"docs/target/container_image/#discover-sbom-inside-container-images","title":"Discover SBOM inside container images","text":"<p>Trivy can search for Software Bill of Materials (SBOMs) within container image files and scan their components for vulnerabilities.</p>"},{"location":"docs/target/container_image/#third-party-sbom-files","title":"Third-party SBOM files","text":"<p>SBOM specifications define key requirements for component documentation<sup>2</sup>. However, different tools and systems often have varying approaches to documenting component types and their relationships.</p> <p>Due to these variations, Trivy cannot always accurately interpret SBOMs generated by other tools. For example, it may have difficulty determining the correct file paths to component information files (such as lock files or binaries). In such cases, Trivy uses the path to the scanned SBOM file itself to maintain traceability and ensure accurate dependency reporting.</p>"},{"location":"docs/target/container_image/#discover-sbom-referencing-the-container-image","title":"Discover SBOM referencing the container image","text":"<p>Trivy can search for Software Bill of Materials (SBOMs) that reference container images. If an SBOM is found, the vulnerability scan is performed using the SBOM instead of the container image. By using the SBOM, you can perform a vulnerability scan more quickly, as it allows you to skip pulling the container image and analyzing its layers.</p> <p>To enable this functionality, you need to specify the <code>--sbom-sources</code> flag. The following two sources are supported:</p> <ul> <li>OCI Registry (<code>oci</code>)</li> <li>Rekor (<code>rekor</code>)</li> </ul> <p>Example:</p> <pre><code>$ trivy image --sbom-sources oci ghcr.io/knqyf263/oci-referrers\n2023-03-05T17:36:55.278+0200    INFO    Vulnerability scanning is enabled\n2023-03-05T17:36:58.103+0200    INFO    Detected SBOM format: cyclonedx-json\n2023-03-05T17:36:58.129+0200    INFO    Found SBOM (cyclonedx) in the OCI referrers\n...\n\nghcr.io/knqyf263/oci-referrers (alpine 3.16.2)\n==============================================\nTotal: 17 (UNKNOWN: 0, LOW: 0, MEDIUM: 5, HIGH: 9, CRITICAL: 3)\n</code></pre> <p>The OCI Registry utilizes the Referrers API. For more information about Rekor, please refer to its documentation.</p>"},{"location":"docs/target/container_image/#compliance","title":"Compliance","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>This section describes container image specific compliance reports. For an overview of Trivy's Compliance feature, including working with custom compliance, check out the Compliance documentation.</p>"},{"location":"docs/target/container_image/#built-in-reports","title":"Built in reports","text":"<p>The following reports are available out of the box:</p> Compliance Version Name for command More info CIS Docker Community Edition Benchmark 1.1.0 <code>docker-cis-1.6.0</code> Link"},{"location":"docs/target/container_image/#examples","title":"Examples","text":"<p>Scan a container image configuration and generate a compliance summary report:</p> <pre><code>trivy image --compliance docker-cis-1.6.0 [YOUR_IMAGE_NAME]\n</code></pre> <p>Note</p> <p>The <code>Issues</code> column represent the total number of failed checks for this control.</p>"},{"location":"docs/target/container_image/#authentication","title":"Authentication","text":"<p>Please reference this page.</p>"},{"location":"docs/target/container_image/#scan-cache","title":"Scan Cache","text":"<p>When scanning container images, it stores analysis results in the cache, using the image ID and the layer IDs as the key. This approach enables faster scans of the same container image or different images that share layers.</p> <p>More details are available in the cache documentation.</p>"},{"location":"docs/target/container_image/#options","title":"Options","text":""},{"location":"docs/target/container_image/#scan-image-on-a-specific-architecture-and-os","title":"Scan Image on a specific Architecture and OS","text":"<p>By default, Trivy loads an image on a \"linux/amd64\" machine. To customise this, pass a <code>--platform</code> argument in the format OS/Architecture for the image:</p> <pre><code>$ trivy image --platform=os/architecture [YOUR_IMAGE_NAME]\n</code></pre> <p>For example:</p> <pre><code>$ trivy image --platform=linux/arm alpine:3.16.1\n</code></pre> Result <pre><code>2022-10-25T21:00:50.972+0300    INFO    Vulnerability scanning is enabled\n2022-10-25T21:00:50.972+0300    INFO    Secret scanning is enabled\n2022-10-25T21:00:50.972+0300    INFO    If your scanning is slow, please try '--scanners vuln' to disable secret scanning\n2022-10-25T21:00:50.972+0300    INFO    Please see also https://trivy.dev/dev/docs/secret/scanning/#recommendation for faster secret detection\n2022-10-25T21:00:56.190+0300    INFO    Detected OS: alpine\n2022-10-25T21:00:56.190+0300    INFO    Detecting Alpine vulnerabilities...\n2022-10-25T21:00:56.191+0300    INFO    Number of language-specific files: 0\n\nalpine:3.16.1 (alpine 3.16.1)\n=============================\nTotal: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Library \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                            Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 zlib    \u2502 CVE-2022-37434 \u2502 CRITICAL \u2502 1.2.12-r1         \u2502 1.2.12-r2     \u2502 zlib: heap-based buffer over-read and overflow in inflate() \u2502\n\u2502         \u2502                \u2502          \u2502                   \u2502               \u2502 in inflate.c via a...                                       \u2502\n\u2502         \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-37434                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/target/container_image/#configure-docker-daemon-socket-to-connect-to","title":"Configure Docker daemon socket to connect to.","text":"<p>You can configure Docker daemon socket with <code>DOCKER_HOST</code> or <code>--docker-host</code>.</p> <pre><code>$ trivy image --docker-host tcp://127.0.0.1:2375 YOUR_IMAGE\n</code></pre>"},{"location":"docs/target/container_image/#configure-podman-daemon-socket-to-connect-to","title":"Configure Podman daemon socket to connect to.","text":"<p>You can configure Podman daemon socket with <code>--podman-host</code>.</p> <pre><code>$ trivy image --podman-host /run/user/1000/podman/podman.sock YOUR_IMAGE\n</code></pre>"},{"location":"docs/target/container_image/#prevent-scanning-oversized-container-images","title":"Prevent scanning oversized container images","text":"<p>Use the <code>--max-image-size</code> flag to avoid scanning images that exceed a specified size. The size is specified in a human-readable format<sup>1</sup> (e.g., <code>100MB</code>, <code>10GB</code>).</p> <p>An error is returned in the following cases:</p> <ul> <li>if the compressed image size exceeds the limit,</li> <li>if the accumulated size of the uncompressed layers exceeds the limit during their pulling.</li> </ul> <p>The layers are pulled into a temporary folder during their pulling and are always cleaned up, even after a successful scan.</p> <p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Example Usage: <pre><code># Limit uncompressed image size to 10GB\n$ trivy image --max-image-size=10GB myapp:latest\n</code></pre></p> <p>Error Output: <pre><code>Error: uncompressed image size (15GB) exceeds maximum allowed size (10GB)\n</code></pre></p> <ol> <li> <p>Trivy uses decimal (SI) prefixes (based on 1000) for size.\u00a0\u21a9</p> </li> <li> <p>SPDX uses <code>package</code> instead of <code>component</code>.\u00a0\u21a9</p> </li> </ol>"},{"location":"docs/target/filesystem/","title":"Filesystem","text":"<p>Scan your local projects for</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Secrets</li> <li>Licenses</li> </ul> <p>By default, vulnerability and secret scanning are enabled, and you can configure that with <code>--scanners</code>.</p> <pre><code>$ trivy fs /path/to/project\n</code></pre> <p>It's also possible to scan a single file.</p> <pre><code>$ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test/Pipfile.lock\n</code></pre>"},{"location":"docs/target/filesystem/#scanners","title":"Scanners","text":""},{"location":"docs/target/filesystem/#vulnerabilities","title":"Vulnerabilities","text":"<p>It is enabled by default. Trivy will look for vulnerabilities based on lock files such as Gemfile.lock and package-lock.json. See here for the detail.</p> <pre><code>$ trivy fs ~/src/github.com/aquasecurity/trivy-ci-test\n</code></pre> Result <pre><code>2020-06-01T17:06:58.652+0300    WARN    OS is not detected and vulnerabilities in OS packages are not detected.\n2020-06-01T17:06:58.652+0300    INFO    Detecting pipenv vulnerabilities...\n2020-06-01T17:06:58.691+0300    INFO    Detecting cargo vulnerabilities...\n\nPipfile.lock\n============\nTotal: 10 (UNKNOWN: 2, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 0)\n\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n|       LIBRARY       | VULNERABILITY ID | SEVERITY | INSTALLED VERSION |     FIXED VERSION      |               TITLE                |\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n| django              | CVE-2020-7471    | HIGH     | 2.0.9             | 3.0.3, 2.2.10, 1.11.28 | django: potential                  |\n|                     |                  |          |                   |                        | SQL injection via                  |\n|                     |                  |          |                   |                        | StringAgg(delimiter)               |\n+                     +------------------+----------+                   +------------------------+------------------------------------+\n|                     | CVE-2019-19844   | MEDIUM   |                   | 3.0.1, 2.2.9, 1.11.27  | Django: crafted email address      |\n|                     |                  |          |                   |                        | allows account takeover            |\n+                     +------------------+          +                   +------------------------+------------------------------------+\n|                     | CVE-2019-3498    |          |                   | 2.1.5, 2.0.10, 1.11.18 | python-django: Content             |\n|                     |                  |          |                   |                        | spoofing via URL path in           |\n|                     |                  |          |                   |                        | default 404 page                   |\n+                     +------------------+          +                   +------------------------+------------------------------------+\n|                     | CVE-2019-6975    |          |                   | 2.1.6, 2.0.11, 1.11.19 | python-django:                     |\n|                     |                  |          |                   |                        | memory exhaustion in               |\n|                     |                  |          |                   |                        | django.utils.numberformat.format() |\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n...\n</code></pre>"},{"location":"docs/target/filesystem/#misconfigurations","title":"Misconfigurations","text":"<p>It is disabled by default and can be enabled with <code>--scanners misconfig</code>. See here for the detail.</p> <pre><code>$ trivy fs --scanners misconfig /path/to/project\n</code></pre>"},{"location":"docs/target/filesystem/#secrets","title":"Secrets","text":"<p>It is enabled by default. See here for the detail.</p> <pre><code>$ trivy fs /path/to/project\n</code></pre>"},{"location":"docs/target/filesystem/#licenses","title":"Licenses","text":"<p>It is disabled by default. See here for the detail.</p> <pre><code>$ trivy fs --scanners license /path/to/project\n</code></pre>"},{"location":"docs/target/filesystem/#sbom-generation","title":"SBOM generation","text":"<p>Trivy can generate SBOM for local projects. See here for the detail.</p>"},{"location":"docs/target/filesystem/#scan-cache","title":"Scan Cache","text":"<p>When scanning local projects, it doesn't use the cache by default. However, when the local project is a git repository with clean status and the cache backend other than the memory one is enabled, it stores analysis results, using the latest commit hash as the key.</p> <pre><code>$ trivy fs --cache-backend fs /path/to/git/repo\n</code></pre> <p>More details are available in the cache documentation.</p>"},{"location":"docs/target/kubernetes/","title":"Kubernetes","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>Trivy can connect to your Kubernetes cluster and scan it for security issues using the <code>trivy k8s</code> command. This page covers the technical capabilities of Trivy Kubernetes scanning. Trivy can also be installed inside your cluster as a Kubernetes Operator, and continuously scan it. For more about this, please see the Trivy Operator project.</p> <p>When scanning a Kubernetes cluster, Trivy differentiates between the following:</p> <ol> <li>Cluster infrastructure (e.g api-server, kubelet, addons)</li> <li>Cluster configuration (e.g Roles, ClusterRoles).</li> <li>Application workloads (e.g nginx, postgresql).</li> </ol> <p>When scanning any of the above, the container image is scanned separately to the Kubernetes resource definition (the YAML manifest) that defines the resource.</p> <p>Container image is scanned for:</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Exposed secrets</li> </ul> <p>Kubernetes resource definition is scanned for:</p> <ul> <li>Vulnerabilities (Open Source Libraries, Control Plane and Node Components)</li> <li>Misconfigurations</li> <li>Exposed secrets</li> </ul>"},{"location":"docs/target/kubernetes/#kubernetes-target-configurations","title":"Kubernetes target configurations","text":"<pre><code>trivy k8s [flags] [CONTEXT] -  if the target name [CONTEXT] is not specified, the default will be used.\n</code></pre> <p>for example:</p> <pre><code>trivy k8s --report summary\n</code></pre> <p>JSON result for multi-container pods</p> <p>For multi-container pods, it may be challenging to associate results with specific images in the json summary report. Kubernetes treats a pod as a single object, so individual images within the pod aren\u2019t distinguished.  For detailed information, please use the <code>--report all</code> option.</p> <p>By default Trivy will look for a <code>kubeconfig</code> configuration file in the default location, and use the default cluster that is specified. You can also specify a <code>kubeconfig</code> using the <code>--kubeconfig</code> flag:</p> <pre><code>trivy k8s --kubeconfig ~/.kube/config2\n</code></pre>"},{"location":"docs/target/kubernetes/#required-roles","title":"Required roles","text":"<p>To successfully scan a Kubernetes cluster, <code>trivy kubernetes</code> subcommand must be executed under a role or a cluster role that has some specific permissions.</p> <p>The role must have <code>list</code> verb for all resources (<code>\"*\"</code>) inside the following API groups: core (<code>\"\"</code>), <code>\"apps\"</code>, <code>\"batch\"</code>,<code>\"networking.k8s.io\"</code>, <code>\"rbac.authorization.k8s.io\"</code>: <pre><code>- apiGroups: [\"\"]\n  resources: [\"*\"]\n  verbs: [\"list\"]\n- apiGroups: [\"apps\", \"batch\", \"networking.k8s.io\", \"rbac.authorization.k8s.io\"]\n  resources: [\"*\"]\n  verbs: [\"list\"]\n</code></pre> If <code>node collector</code> is enabled (default: enabled), Trivy needs a cluster role with some additional permissions to run and track the jobs: <pre><code>- apiGroups: [\"\"]\n  resources: [\"nodes/proxy\", \"pods/log\"]\n  verbs: [\"get\"]\n- apiGroups: [\"\"]\n  resources: [\"events\"]\n  verbs: [\"watch\"]\n- apiGroups: [\"batch\"]\n  resources: [\"jobs\", \"cronjobs\"]\n  verbs: [\"list\", \"get\"]\n- apiGroups: [\"batch\"]\n  resources: [\"jobs\"]\n  verbs: [\"create\",\"delete\", \"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"namespaces\"]\n  verbs: [\"create\"]\n</code></pre></p>"},{"location":"docs/target/kubernetes/#skip-images","title":"Skip-images","text":"<p>By default, all cluster resource images will be downloaded and scanned.</p> <p>You can control whether Trivy will scan and download the cluster resource images. To disable this feature, add the --skip-images flag.</p> <ul> <li><code>--skip-images</code> flag will prevent the downloading and scanning of images (including vulnerabilities and secrets) in the cluster resources.</li> </ul> <p>Example:</p> <pre><code>trivy k8s --report summary --skip-images\n</code></pre>"},{"location":"docs/target/kubernetes/#includeexclude-kinds","title":"Include/Exclude Kinds","text":"<p>You can control which kinds of resources will be discovered using the <code>--include-kinds</code> or <code>--exclude-kinds</code> comma-separated flags:</p> <p>Note: Both flags (<code>--include-kinds</code> or <code>--exclude-kinds</code>) cannot be set in conjunction.</p> <ul> <li><code>--include-kinds</code> will include the listed kinds in cluster scanning.</li> <li><code>--exclude-kinds</code> will exclude the listed kinds from cluster scanning.</li> </ul> <p>By default, all kinds will be included in cluster scanning.</p> <p>Example:</p> <pre><code>trivy k8s --report summary --exclude-kinds node,pod\n</code></pre>"},{"location":"docs/target/kubernetes/#includeexclude-namespaces","title":"Include/Exclude Namespaces","text":"<p>You can control which namespaces will be discovered using the <code>--include-namespaces</code> or <code>--exclude-namespaces</code> comma-separated flags:</p> <p>Note: Both flags (<code>--include-namespaces</code> or <code>--exclude-namespaces</code>) cannot be set in conjunction.</p> <ul> <li><code>--include-namespaces</code> will include the listed namespaces in cluster scanning.</li> <li><code>--exclude-namespaces</code> will exclude the listed namespaces from cluster scanning.</li> </ul> <p>By default, all namespaces will be included in cluster scanning.</p> <p>using <code>--exclude-namespaces</code></p> <p>Trivy requires a complete list of namespaces to exclude specific ones. Therefore, <code>--exclude-namespaces</code> option is only available for cluster roles now.</p> <p>Example:</p> <pre><code>trivy k8s --report summary --exclude-namespace dev-system,staging-system\n</code></pre>"},{"location":"docs/target/kubernetes/#control-plane-and-node-components-vulnerability-scanning","title":"Control Plane and Node Components Vulnerability Scanning","text":"<p>Trivy is capable of discovering Kubernetes control plane (apiserver, controller-manager and etc) and node components(kubelet, kube-proxy and etc), matching them against the official Kubernetes vulnerability database feed, and reporting any vulnerabilities it finds.</p> <p>To read more about KBOM, see the documentation for Kubernetes scanning.</p> <pre><code>trivy k8s --scanners vuln  --report all\n\nNodeComponents/kind-control-plane (kubernetes)\n\nTotal: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 2, CRITICAL: 0)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Library     \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502          Fixed Version           \u2502                       Title                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 k8s.io/kubelet \u2502 CVE-2023-2431  \u2502 LOW      \u2502 fixed  \u2502 1.21.1            \u2502 1.24.14, 1.25.10, 1.26.5, 1.27.2 \u2502 Bypass of seccomp profile enforcement             \u2502\n\u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                  \u2502 https://avd.aquasec.com/nvd/cve-2023-2431         \u2502\n\u2502                \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502 CVE-2021-25741 \u2502 HIGH     \u2502        \u2502                   \u2502 1.19.16, 1.20.11, 1.21.5, 1.22.1 \u2502 Symlink exchange can allow host filesystem access \u2502\n\u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                  \u2502 https://avd.aquasec.com/nvd/cve-2021-25741        \u2502\n\u2502                \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u2502        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502 CVE-2021-25749 \u2502          \u2502        \u2502                   \u2502 1.22.14, 1.23.11, 1.24.5         \u2502 runAsNonRoot logic bypass for Windows containers  \u2502\n\u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                  \u2502 https://avd.aquasec.com/nvd/cve-2021-25749        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/target/kubernetes/#node-collector","title":"Node-Collector","text":"<p>Node-collector is a scan job that collects node configuration parameters and permission information. This information will be evaluated against Kubernetes hardening (e.g. CIS benchmark) and best practices values. The scan results will be output in infrastructure assessment and CIS benchmark compliance reports.</p>"},{"location":"docs/target/kubernetes/#disable-node-collector","title":"Disable Node Collector","text":"<p>You can control whether the node scan-job (<code>node-collector</code>) will run in the cluster. To disable it, add the <code>--disable-node-collector</code> flag  </p> <ul> <li><code>--disable-node-collector</code> This flag will exclude findings related to Node (infra assessment) misconfigurations</li> </ul> <p>By default, the node scan-job (<code>node-collector</code>) will run in the cluster.</p> <p>Example:</p> <pre><code>trivy k8s --report summary --disable-node-collector\n</code></pre>"},{"location":"docs/target/kubernetes/#taints-and-tolerations","title":"Taints and Tolerations","text":"<p>The node-collector scan-job will run on every node. In case the node has been tainted, it is possible to add toleration to the scan job for it to be scheduled on the tainted node. for more details see k8s docs</p> <ul> <li><code>--tolerations  key1=value1:NoExecute,key2=value2:NoSchedule</code> this flag will enable node-collector to be schedule on tainted Node</li> </ul> <p>Example:</p> <pre><code>trivy k8s --report summary --tolerations  key1=value1:NoExecute,key2=value2:NoSchedule\n</code></pre>"},{"location":"docs/target/kubernetes/#exclude-nodes-by-label","title":"Exclude Nodes by Label","text":"<p>You can exclude specific nodes from the scan using the <code>--exclude-nodes</code> flag, which takes a label in the format <code>label-name:label-value</code> and excludes all matching nodes:</p> <pre><code>trivy k8s --report summary --exclude-nodes kubernetes.io/arch:arm6\n</code></pre>"},{"location":"docs/target/kubernetes/#reporting-and-filtering","title":"Reporting and filtering","text":"<p>Since scanning an entire cluster for any security issue can be overwhelming, By default Trivy summarizes the results in a simple \"summary\" view. By scoping the scan on a specific resource, you can see the detailed report. You can always choose the report granularity using the <code>--report summary</code>/<code>--report all</code> flag.</p> <p>Scan a full cluster and generate a simple summary report:</p> <pre><code>trivy k8s --report=summary\n</code></pre> <p></p> <p>Filter by severity:</p> <pre><code>trivy k8s --severity=CRITICAL --report=all\n</code></pre> <p>Filter by scanners (Vulnerabilities, Secrets or Misconfigurations):</p> <pre><code>trivy k8s --scanners=secret --report=summary\n# or\ntrivy k8s --scanners=misconfig --report=summary\n</code></pre> <p>The supported output formats are <code>table</code>, which is the default, and <code>json</code>.</p> <pre><code>trivy k8s --format json -o results.json cluster\n</code></pre> Result <pre><code>{\n  \"ClusterName\": \"minikube\",\n  \"Vulnerabilities\": [\n    {\n      \"Namespace\": \"default\",\n      \"Kind\": \"Deployment\",\n      \"Name\": \"app\",\n      \"Results\": [\n        {\n          \"Target\": \"ubuntu:latest (ubuntu 22.04)\",\n          \"Class\": \"os-pkgs\",\n          \"Type\": \"ubuntu\",\n          \"Vulnerabilities\": [\n            {\n              \"VulnerabilityID\": \"CVE-2016-2781\",\n              \"PkgName\": \"coreutils\",\n              \"InstalledVersion\": \"8.32-4.1ubuntu1\",\n              \"Layer\": {\n                \"Digest\": \"sha256:125a6e411906fe6b0aaa50fc9d600bf6ff9bb11a8651727ce1ed482dc271c24c\",\n                \"DiffID\": \"sha256:e59fc94956120a6c7629f085027578e6357b48061d45714107e79f04a81a6f0c\"\n              },\n              \"SeveritySource\": \"ubuntu\",\n              \"PrimaryURL\": \"https://avd.aquasec.com/nvd/cve-2016-2781\",\n              \"DataSource\": {\n                \"ID\": \"ubuntu\",\n                \"Name\": \"Ubuntu CVE Tracker\",\n                \"URL\": \"https://git.launchpad.net/ubuntu-cve-tracker\"\n              },\n              \"Title\": \"coreutils: Non-privileged session can escape to the parent session in chroot\",\n              \"Description\": \"chroot in GNU coreutils, when used with --userspec, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call, which pushes characters to the terminal's input buffer.\",\n              \"Severity\": \"LOW\",\n              \"CweIDs\": [\n                \"CWE-20\"\n              ],\n              \"VendorSeverity\": {\n                \"cbl-mariner\": 2,\n                \"nvd\": 2,\n                \"redhat\": 2,\n                \"ubuntu\": 1\n              },\n              \"CVSS\": {\n                \"nvd\": {\n                  \"V2Vector\": \"AV:L/AC:L/Au:N/C:N/I:P/A:N\",\n                  \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:C/C:N/I:H/A:N\",\n                  \"V2Score\": 2.1,\n                  \"V3Score\": 6.5\n                },\n                \"redhat\": {\n                  \"V2Vector\": \"AV:L/AC:H/Au:N/C:C/I:C/A:C\",\n                  \"V3Vector\": \"CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H\",\n                  \"V2Score\": 6.2,\n                  \"V3Score\": 8.6\n                }\n              },\n              \"References\": [\n                \"http://seclists.org/oss-sec/2016/q1/452\",\n                \"http://www.openwall.com/lists/oss-security/2016/02/28/2\",\n                \"http://www.openwall.com/lists/oss-security/2016/02/28/3\",\n                \"https://access.redhat.com/security/cve/CVE-2016-2781\",\n                \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2781\",\n                \"https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E\",\n                \"https://lore.kernel.org/patchwork/patch/793178/\",\n                \"https://nvd.nist.gov/vuln/detail/CVE-2016-2781\"\n              ],\n              \"PublishedDate\": \"2017-02-07T15:59:00Z\",\n              \"LastModifiedDate\": \"2021-02-25T17:15:00Z\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"Misconfigurations\": [\n    {\n      \"Namespace\": \"default\",\n      \"Kind\": \"Deployment\",\n      \"Name\": \"app\",\n      \"Results\": [\n        {\n          \"Target\": \"Deployment/app\",\n          \"Class\": \"config\",\n          \"Type\": \"kubernetes\",\n          \"MisconfSummary\": {\n            \"Successes\": 20,\n            \"Failures\": 19\n          },\n          \"Misconfigurations\": [\n            {\n              \"Type\": \"Kubernetes Security Check\",\n              \"ID\": \"KSV001\",\n              \"Title\": \"Process can elevate its own privileges\",\n              \"Description\": \"A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.\",\n              \"Message\": \"Container 'app' of Deployment 'app' should set 'securityContext.allowPrivilegeEscalation' to false\",\n              \"Namespace\": \"builtin.kubernetes.KSV001\",\n              \"Query\": \"data.builtin.kubernetes.KSV001.deny\",\n              \"Resolution\": \"Set 'set containers[].securityContext.allowPrivilegeEscalation' to 'false'.\",\n              \"Severity\": \"MEDIUM\",\n              \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv001\",\n              \"References\": [\n                \"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted\",\n                \"https://avd.aquasec.com/misconfig/ksv001\"\n              ],\n              \"Status\": \"FAIL\",\n              \"Layer\": {},\n              \"IacMetadata\": {\n                \"Provider\": \"Kubernetes\",\n                \"Service\": \"general\",\n                \"StartLine\": 121,\n                \"EndLine\": 133\n              }\n            },\n            {\n              \"Type\": \"Kubernetes Security Check\",\n              \"ID\": \"KSV003\",\n              \"Title\": \"Default capabilities not dropped\",\n              \"Description\": \"The container should drop all default capabilities and add only those that are needed for its execution.\",\n              \"Message\": \"Container 'app' of Deployment 'app' should add 'ALL' to 'securityContext.capabilities.drop'\",\n              \"Namespace\": \"builtin.kubernetes.KSV003\",\n              \"Query\": \"data.builtin.kubernetes.KSV003.deny\",\n              \"Resolution\": \"Add 'ALL' to containers[].securityContext.capabilities.drop.\",\n              \"Severity\": \"LOW\",\n              \"PrimaryURL\": \"https://avd.aquasec.com/misconfig/ksv003\",\n              \"References\": [\n                \"https://kubesec.io/basics/containers-securitycontext-capabilities-drop-index-all/\",\n                \"https://avd.aquasec.com/misconfig/ksv003\"\n              ],\n              \"Status\": \"FAIL\",\n              \"Layer\": {},\n              \"IacMetadata\": {\n                \"Provider\": \"Kubernetes\",\n                \"Service\": \"general\",\n                \"StartLine\": 121,\n                \"EndLine\": 133\n              }\n            }\n          ]\n        }\n      ]\n    },\n    {\n      \"Namespace\": \"default\",\n      \"Kind\": \"ConfigMap\",\n      \"Name\": \"kube-root-ca.crt\"\n    }\n  ]\n}\n</code></pre>"},{"location":"docs/target/kubernetes/#compliance","title":"Compliance","text":"<p>This section describes Kubernetes specific compliance reports. For an overview of Trivy's Compliance feature, including working with custom compliance, check out the Compliance documentation.</p> <p>The following reports are available out of the box:</p> Compliance Name for command More info NSA, CISA Kubernetes Hardening Guidance v1.0 <code>k8s-nsa-1.0</code> Link CIS Benchmark for Kubernetes v1.23 <code>k8s-cis-1.23</code> Link CIS Benchmark for RKE2 v1.24 <code>rke2-cis-1.24</code> Link CIS Benchmark for EKS v1.4 <code>eks-cis-1.4</code> Link Pod Security Standards, Baseline <code>k8s-pss-baseline-0.1</code> Link Pod  Security Standards, Restricted <code>k8s-pss-restricted-0.1</code> Link <p>Examples:</p> <p>Scan the cluster for Kubernetes Pod Security Standards Baseline compliance:</p> <pre><code>trivy k8s --compliance=k8s-pss-baseline --report summary\n</code></pre> <p>Get the detailed report for checks:</p> <pre><code>trivy k8s --compliance=k8s-cis-1.23 --report all\n</code></pre> <p>Get summary report in JSON format:</p> <pre><code>trivy k8s --compliance=k8s-cis-1.23 --report summary --format json\n</code></pre> <p>Get detailed report in JSON format:</p> <pre><code>trivy k8s --compliance=k8s-cis-1.23 --report all --format json\n</code></pre>"},{"location":"docs/target/kubernetes/#kbom","title":"KBOM","text":"<p>KBOM, Kubernetes Bill of Materials, is a manifest of all the important components that make up your Kubernetes cluster \u2013 Control plane components, Node Components, and Addons, including their versions and images. Which \u201capi-server\u201d version are you currently running? Which flavor of \"kubelet\" is running on each node? What kind of etcd or storage are you currently using? And most importantly \u2013 are there any vulnerabilities known to affect these components? These are all questions that KBOM can help you answer. For more background on KBOM, see here.</p> <p>Trivy can generate KBOM in CycloneDX format:</p> <pre><code>trivy k8s --format cyclonedx --output mykbom.cdx.json\n</code></pre> <p>Trivy can also scan that generated KBOM (or any SBOM) for vulnerabilities:</p> <pre><code>trivy sbom mykbom.cdx.json\n</code></pre> Result <pre><code>2023-09-28T22:52:25.707+0300    INFO    Vulnerability scanning is enabled\n 2023-09-28T22:52:25.707+0300    INFO    Detected SBOM format: cyclonedx-json\n 2023-09-28T22:52:25.717+0300    WARN    No OS package is detected. Make sure you haven't deleted any files that contain information about the installed packages.\n 2023-09-28T22:52:25.717+0300    WARN    e.g. files under \"/lib/apk/db/\", \"/var/lib/dpkg/\" and \"/var/lib/rpm\"\n 2023-09-28T22:52:25.717+0300    INFO    Detected OS: debian gnu/linux\n 2023-09-28T22:52:25.717+0300    WARN    unsupported os : debian gnu/linux\n 2023-09-28T22:52:25.717+0300    INFO    Number of language-specific files: 3\n 2023-09-28T22:52:25.717+0300    INFO    Detecting kubernetes vulnerabilities...\n 2023-09-28T22:52:25.718+0300    INFO    Detecting gobinary vulnerabilities...\n Kubernetes (kubernetes)\n Total: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502    Library     \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502          Fixed Version          \u2502                      Title                       \u2502\n \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u2502 k8s.io/kubelet \u2502 CVE-2021-25749 \u2502 HIGH     \u2502 fixed  \u2502 1.24.0            \u2502 1.22.14, 1.23.11, 1.24.5        \u2502 runAsNonRoot logic bypass for Windows containers \u2502\n \u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                 \u2502 https://avd.aquasec.com/nvd/cve-2021-25749       \u2502\n \u2502                \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n \u2502                \u2502 CVE-2023-2431  \u2502 LOW      \u2502        \u2502                   \u2502 1.24.14, 1.25.9, 1.26.4, 1.27.1 \u2502 Bypass of seccomp profile enforcement            \u2502\n \u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                 \u2502 https://avd.aquasec.com/nvd/cve-2023-2431        \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Find more in the documentation for SBOM scanning.</p> <p>Currently KBOM vulnerability matching works for plain Kubernetes distributions and does not work well for vendor variants, including some cloud managed distributions.</p>"},{"location":"docs/target/repository/","title":"Code Repository","text":"<p>Scan your local or remote code repositories for</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Secrets</li> <li>Licenses</li> </ul> <p>By default, vulnerability and secret scanning are enabled, and you can configure that with <code>--scanners</code>.</p> <pre><code>$ trivy repo (REPO_PATH | REPO_URL)\n</code></pre> <p>For example, you can scan a local repository as below.</p> <pre><code>$ trivy repo ./\n</code></pre> <p>It's also possible to scan a single file.</p> <pre><code>$ trivy repo ./trivy-ci-test/Pipfile.lock\n</code></pre> <p>To scan remote code repositories, you need to specify the URL.</p> <pre><code>$ trivy repo https://github.com/aquasecurity/trivy-ci-test\n</code></pre>"},{"location":"docs/target/repository/#rationale","title":"Rationale","text":"<p><code>trivy repo</code> is  designed to scan code repositories, and it is intended to be used for scanning local/remote repositories in your machine or in your CI environment. Therefore, unlike container/VM image scanning, it targets lock files such as package-lock.json and does not target artifacts like JAR files, binary files, etc. See here for the detail.</p>"},{"location":"docs/target/repository/#scanners","title":"Scanners","text":""},{"location":"docs/target/repository/#vulnerabilities","title":"Vulnerabilities","text":"<p>It is enabled by default. Trivy will look for vulnerabilities based on lock files such as Gemfile.lock and package-lock.json. See here for the detail.</p> <pre><code>$ trivy repo ~/src/github.com/aquasecurity/trivy-ci-test\n</code></pre> Result <pre><code>2020-06-01T17:06:58.652+0300    WARN    OS is not detected and vulnerabilities in OS packages are not detected.\n2020-06-01T17:06:58.652+0300    INFO    Detecting pipenv vulnerabilities...\n2020-06-01T17:06:58.691+0300    INFO    Detecting cargo vulnerabilities...\n\nPipfile.lock\n============\nTotal: 10 (UNKNOWN: 2, LOW: 0, MEDIUM: 6, HIGH: 2, CRITICAL: 0)\n\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n|       LIBRARY       | VULNERABILITY ID | SEVERITY | INSTALLED VERSION |     FIXED VERSION      |               TITLE                |\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n| django              | CVE-2020-7471    | HIGH     | 2.0.9             | 3.0.3, 2.2.10, 1.11.28 | django: potential                  |\n|                     |                  |          |                   |                        | SQL injection via                  |\n|                     |                  |          |                   |                        | StringAgg(delimiter)               |\n+                     +------------------+----------+                   +------------------------+------------------------------------+\n|                     | CVE-2019-19844   | MEDIUM   |                   | 3.0.1, 2.2.9, 1.11.27  | Django: crafted email address      |\n|                     |                  |          |                   |                        | allows account takeover            |\n+                     +------------------+          +                   +------------------------+------------------------------------+\n|                     | CVE-2019-3498    |          |                   | 2.1.5, 2.0.10, 1.11.18 | python-django: Content             |\n|                     |                  |          |                   |                        | spoofing via URL path in           |\n|                     |                  |          |                   |                        | default 404 page                   |\n+                     +------------------+          +                   +------------------------+------------------------------------+\n|                     | CVE-2019-6975    |          |                   | 2.1.6, 2.0.11, 1.11.19 | python-django:                     |\n|                     |                  |          |                   |                        | memory exhaustion in               |\n|                     |                  |          |                   |                        | django.utils.numberformat.format() |\n+---------------------+------------------+----------+-------------------+------------------------+------------------------------------+\n...\n</code></pre>"},{"location":"docs/target/repository/#misconfigurations","title":"Misconfigurations","text":"<p>It is disabled by default and can be enabled with <code>--scanners misconfig</code>. See here for the detail.</p> <pre><code>$ trivy repo --scanners misconfig (REPO_PATH | REPO_URL)\n</code></pre>"},{"location":"docs/target/repository/#secrets","title":"Secrets","text":"<p>It is enabled by default. See here for the detail.</p> <pre><code>$ trivy repo (REPO_PATH | REPO_URL)\n</code></pre>"},{"location":"docs/target/repository/#licenses","title":"Licenses","text":"<p>It is disabled by default. See here for the detail.</p> <pre><code>$ trivy repo --scanners license (REPO_PATH | REPO_URL)\n</code></pre>"},{"location":"docs/target/repository/#sbom-generation","title":"SBOM generation","text":"<p>Trivy can generate SBOM for code repositories. See here for the detail.</p>"},{"location":"docs/target/repository/#git-metadata","title":"Git Metadata","text":"<p>When scanning git repositories (both local and remote), Trivy automatically extracts and includes git metadata in the scan results. This metadata provides context about the scanned repository.</p> <p>The metadata includes information such as:</p> <ul> <li>Repository URL</li> <li>Branch name</li> <li>Tags</li> <li>Commit details (hash, message, commiter)</li> <li>Author information</li> </ul> <p>This feature works automatically for any git repository. When using JSON format output, the git metadata will be included in the <code>Metadata</code> field. For detailed information about the available fields, please refer to the JSON output of your scan results.</p> <pre><code>$ trivy repo --format json &lt;repo-name&gt;\n</code></pre>"},{"location":"docs/target/repository/#scan-cache","title":"Scan Cache","text":"<p>When scanning git repositories, it stores analysis results in the cache, using the latest commit hash as the key. Note that the cache is not used when the repository is dirty, otherwise Trivy will miss the files that are not committed.</p> <p>More details are available in the cache documentation.</p>"},{"location":"docs/target/repository/#references","title":"References","text":"<p>The following flags and environmental variables are available for remote git repositories.</p>"},{"location":"docs/target/repository/#scanning-a-branch","title":"Scanning a Branch","text":"<p>Pass a <code>--branch</code> argument with a valid branch name on the remote repository provided:</p> <pre><code>$ trivy repo --branch &lt;branch-name&gt; &lt;repo-name&gt;\n</code></pre>"},{"location":"docs/target/repository/#scanning-upto-a-commit","title":"Scanning upto a Commit","text":"<p>Pass a <code>--commit</code> argument with a valid commit hash on the remote repository provided:</p> <pre><code>$ trivy repo --commit &lt;commit-hash&gt; &lt;repo-name&gt;\n</code></pre>"},{"location":"docs/target/repository/#scanning-a-tag","title":"Scanning a Tag","text":"<p>Pass a <code>--tag</code> argument with a valid tag on the remote repository provided:</p> <pre><code>$ trivy repo --tag &lt;tag-name&gt; &lt;repo-name&gt;\n</code></pre>"},{"location":"docs/target/repository/#scanning-private-repositories","title":"Scanning Private Repositories","text":"<p>In order to scan private GitHub or GitLab repositories, the environment variable <code>GITHUB_TOKEN</code> or <code>GITLAB_TOKEN</code> must be set, respectively, with a valid token that has access to the private repository being scanned.</p> <p>The <code>GITHUB_TOKEN</code> environment variable will take precedence over <code>GITLAB_TOKEN</code>, so if a private GitLab repository will be scanned, then <code>GITHUB_TOKEN</code> must be unset.</p> <p>You can find how to generate your GitHub Token in the following GitHub documentation.</p> <p>For example:</p> <pre><code>$ export GITHUB_TOKEN=\"your_private_github_token\"\n$ trivy repo &lt;your private GitHub repo URL&gt;\n\n# or\n$ export GITLAB_TOKEN=\"your_private_gitlab_token\"\n$ trivy repo &lt;your private GitLab repo URL&gt;\n</code></pre>"},{"location":"docs/target/rootfs/","title":"Rootfs","text":"<p>Rootfs scanning is for special use cases such as</p> <ul> <li>Host machine</li> <li>Root filesystem</li> <li>Unpacked filesystem</li> </ul> <pre><code>$ trivy rootfs /path/to/rootfs\n</code></pre> <p>Note</p> <p>Rootfs scanning works differently from the Filesystem scanning. You should use <code>trivy fs</code> to scan your local projects in CI/CD. See here for the differences.</p> <p>Note</p> <p>Scanning vulnerabilities for <code>Red Hat</code> has a limitation, see the Red Hat page for details.</p>"},{"location":"docs/target/rootfs/#performance-optimization","title":"Performance Optimization","text":"<p>By default, Trivy traverses all files from the specified root directory to find target files for scanning. However, when you only need to scan specific files with absolute paths, you can avoid this traversal, which makes scanning faster. For example, when scanning only OS packages, no full traversal is performed:</p> <pre><code>$ trivy rootfs --pkg-types os --scanners vuln /\n</code></pre> <p>When scanning language-specific packages or secrets, traversal is necessary because the location of these files is unknown. If you want to exclude specific directories from scanning for better performance, you can use the --skip-dirs option.</p>"},{"location":"docs/target/sbom/","title":"SBOM scanning","text":"<p>Trivy can take the following SBOM formats as an input and scan for vulnerabilities and licenses.</p> <ul> <li>CycloneDX</li> <li>SPDX</li> <li>SPDX JSON</li> <li>CycloneDX-type attestation</li> <li>KBOM in CycloneDX format</li> </ul> <p>To scan SBOM, you can use the <code>sbom</code> subcommand and pass the path to the SBOM. The input format is automatically detected.</p> <pre><code>$ trivy sbom /path/to/sbom_file\n</code></pre> <p>By default, vulnerability scan in SBOM is executed. You can use <code>--scanners vuln,license</code>  command property to select also license scan, or <code>--scanners license</code> alone.</p> <p>Note</p> <p>Passing SBOMs generated by tool other than Trivy may result in inaccurate detection because Trivy relies on custom properties in SBOM for accurate scanning.</p>"},{"location":"docs/target/sbom/#cyclonedx","title":"CycloneDX","text":"<p>Trivy supports CycloneDX as an input.</p> <p>Note</p> <p>CycloneDX XML is not supported at the moment.</p> <pre><code>$ trivy sbom /path/to/cyclonedx.json\n</code></pre>"},{"location":"docs/target/sbom/#spdx","title":"SPDX","text":"<p>Trivy supports the SPDX SBOM as an input.</p> <p>The following SPDX formats are supported:</p> <ul> <li>Tag-value (<code>--format spdx</code>)</li> <li>JSON (<code>--format spdx-json</code>)</li> </ul> <pre><code>$ trivy image --format spdx-json --output spdx.json alpine:3.16.0\n$ trivy sbom spdx.json\n</code></pre> Result <pre><code>2022-09-15T21:32:27.168+0300    INFO    Vulnerability scanning is enabled\n2022-09-15T21:32:27.169+0300    INFO    Detected SBOM format: spdx-json\n2022-09-15T21:32:27.210+0300    INFO    Detected OS: alpine\n2022-09-15T21:32:27.210+0300    INFO    Detecting Alpine vulnerabilities...\n2022-09-15T21:32:27.211+0300    INFO    Number of language-specific files: 0\n\nspdx.json (alpine 3.16.0)\n=========================\nTotal: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 2, CRITICAL: 1)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Library    \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                           Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 busybox      \u2502 CVE-2022-30065 \u2502 HIGH     \u2502 1.35.0-r13        \u2502 1.35.0-r15    \u2502 busybox: A use-after-free in Busybox's awk applet leads to \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 denial of service...                                       \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-30065                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 libcrypto1.1 \u2502 CVE-2022-2097  \u2502 MEDIUM   \u2502 1.1.1o-r0         \u2502 1.1.1q-r0     \u2502 openssl: AES OCB fails to encrypt some bytes               \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-2097                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502                   \u2502               \u2502                                                            \u2502\n\u2502 libssl1.1    \u2502                \u2502          \u2502                   \u2502               \u2502                                                            \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502                                                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ssl_client   \u2502 CVE-2022-30065 \u2502 HIGH     \u2502 1.35.0-r13        \u2502 1.35.0-r15    \u2502 busybox: A use-after-free in Busybox's awk applet leads to \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 denial of service...                                       \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-30065                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 zlib         \u2502 CVE-2022-37434 \u2502 CRITICAL \u2502 1.2.12-r1         \u2502 1.2.12-r2     \u2502 zlib: a heap-based buffer over-read or buffer overflow in  \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 inflate in inflate.c...                                    \u2502\n\u2502              \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2022-37434                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/target/sbom/#sbom-attestation","title":"SBOM attestation","text":"<p>You can also scan an SBOM attestation. In the following example, Cosign gets an attestation and Trivy scans it. You must create CycloneDX-type attestation before trying the example. To learn more about how to create an CycloneDX-Type attestation and attach it to an image, see the SBOM attestation page.</p> <pre><code>$ cosign verify-attestation --key /path/to/cosign.pub --type cyclonedx &lt;IMAGE&gt; &gt; sbom.cdx.intoto.jsonl\n$ trivy sbom ./sbom.cdx.intoto.jsonl\n\nsbom.cdx.intoto.jsonl (alpine 3.7.3)\n=========================\nTotal: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Library   \u2502 Vulnerability  \u2502 Severity \u2502 Installed Version \u2502 Fixed Version \u2502                          Title                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 musl       \u2502 CVE-2019-14697 \u2502 CRITICAL \u2502 1.1.18-r3         \u2502 1.1.18-r4     \u2502 musl libc through 1.1.23 has an x87 floating-point stack \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 adjustment im ......                                     \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502 https://avd.aquasec.com/nvd/cve-2019-14697               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502 musl-utils \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2502            \u2502                \u2502          \u2502                   \u2502               \u2502                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/target/sbom/#kbom","title":"KBOM","text":"<p>To read more about KBOM, see the documentation for Kubernetes scanning.</p> <p>The supported Kubernetes distributions for core components vulnerability scanning are:</p> <ul> <li>Kubernetes upstream</li> <li>Rancher rke2</li> </ul> <pre><code>$ trivy k8s --format cyclonedx cluster -o kbom.json\n$ trivy sbom kbom.json\n2023-09-28T22:52:25.707+0300    INFO    Vulnerability scanning is enabled\n2023-09-28T22:52:25.717+0300    INFO    Number of language-specific files: 3\n2023-09-28T22:52:25.717+0300    INFO    Detecting kubernetes vulnerabilities...\n2023-09-28T22:52:25.718+0300    INFO    Detecting gobinary vulnerabilities...\n\nKubernetes (kubernetes)\n\nTotal: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Library     \u2502 Vulnerability  \u2502 Severity \u2502 Status \u2502 Installed Version \u2502          Fixed Version         \u2502                 Title                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 k8s.io/kubelet \u2502 CVE-2021-25749 \u2502 HIGH     \u2502 fixed  \u2502 1.24.0            \u2502 1.22.14, 1.23.11, 1.24.5       \u2502 runAsNonRoot logic bypass for Windows containers \u2502\n\u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                \u2502 https://avd.aquasec.com/nvd/cve-2021-25749       \u2502\n\u2502                \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524        \u2502                   \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                \u2502 CVE-2023-2431  \u2502 LOW      \u2502        \u2502                   \u25021.24.14, 1.25.9, 1.26.4, 1.27.1 \u2502 Bypass of seccomp profile enforcement            \u2502\n\u2502                \u2502                \u2502          \u2502        \u2502                   \u2502                                \u2502 https://avd.aquasec.com/nvd/cve-2023-2431        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"docs/target/vm/","title":"Virtual Machine Image","text":"<p>EXPERIMENTAL</p> <p>This feature might change without preserving backwards compatibility.</p> <p>To scan virtual machine (VM) images, you can use the <code>vm</code> subcommand.</p>"},{"location":"docs/target/vm/#targets","title":"Targets","text":"<p>The following targets are currently supported:</p> <ul> <li>Local file</li> <li>AWS EC2<ul> <li>Amazon Machine Image (AMI)</li> <li>Amazon Elastic Block Store (EBS) Snapshot</li> </ul> </li> </ul>"},{"location":"docs/target/vm/#local-file","title":"Local file","text":"<p>Pass the path to your local VM image file.</p> <pre><code>$ trivy vm --scanners vuln disk.vmdk\n</code></pre> Result <pre><code>disk.vmdk (amazon 2 (Karoo))\n===========================================================================================\nTotal: 802 (UNKNOWN: 0, LOW: 17, MEDIUM: 554, HIGH: 221, CRITICAL: 10)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Library           \u2502 Vulnerability  \u2502 Severity \u2502       Installed Version       \u2502         Fixed Version         \u2502                            Title                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 amazon-ssm-agent           \u2502 CVE-2022-24675 \u2502 HIGH     \u2502 3.0.529.0-1.amzn2             \u2502 3.1.1575.0-1.amzn2            \u2502 golang: encoding/pem: fix stack overflow in Decode           \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2022-24675                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524          \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 bind-export-libs           \u2502 CVE-2021-25215 \u2502          \u2502 32:9.11.4-26.P2.amzn2.4       \u2502 32:9.11.4-26.P2.amzn2.5       \u2502 bind: An assertion check can fail while answering queries    \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 for DNAME records...                                         \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25215                   \u2502\n\u2502                            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                            \u2502 CVE-2021-25214 \u2502 MEDIUM   \u2502                               \u2502 32:9.11.4-26.P2.amzn2.5.2     \u2502 bind: Broken inbound incremental zone update (IXFR) can      \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 cause named to terminate...                                  \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25214                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 bind-libs                  \u2502 CVE-2021-25215 \u2502 HIGH     \u2502                               \u2502 32:9.11.4-26.P2.amzn2.5       \u2502 bind: An assertion check can fail while answering queries    \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 for DNAME records...                                         \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25215                   \u2502\n\u2502                            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                            \u2502 CVE-2021-25214 \u2502 MEDIUM   \u2502                               \u2502 32:9.11.4-26.P2.amzn2.5.2     \u2502 bind: Broken inbound incremental zone update (IXFR) can      \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 cause named to terminate...                                  \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25214                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 bind-libs-lite             \u2502 CVE-2021-25215 \u2502 HIGH     \u2502                               \u2502 32:9.11.4-26.P2.amzn2.5       \u2502 bind: An assertion check can fail while answering queries    \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 for DNAME records...                                         \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25215                   \u2502\n\u2502                            \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                            \u2502 CVE-2021-25214 \u2502 MEDIUM   \u2502                               \u2502 32:9.11.4-26.P2.amzn2.5.2     \u2502 bind: Broken inbound incremental zone update (IXFR) can      \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 cause named to terminate...                                  \u2502\n\u2502                            \u2502                \u2502          \u2502                               \u2502                               \u2502 https://avd.aquasec.com/nvd/cve-2021-25214                   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                               \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...\n</code></pre>"},{"location":"docs/target/vm/#amazon-machine-image-ami","title":"Amazon Machine Image (AMI)","text":"<p>You can specify your AMI ID with the <code>ami:</code> prefix.</p> <pre><code>$ trivy vm ami:${your_ami_id}\n</code></pre> <p>Note</p> <p>AMIs in the marketplace are not supported because the EBS direct APIs don't support that. See the AWS documentation for the detail.</p>"},{"location":"docs/target/vm/#example","title":"Example","text":"<pre><code>$ trivy vm --scanners vuln ami:ami-0123456789abcdefg\n</code></pre> <p>If you want to scan a AMI of non-default setting region, you can set any region via <code>--aws-region</code> option.</p> <pre><code>$ trivy vm --aws-region ap-northeast-1 ami:ami-0123456789abcdefg\n</code></pre>"},{"location":"docs/target/vm/#required-actions","title":"Required Actions","text":"<p>Some actions on EBS are also necessary since Trivy scans an EBS snapshot tied to the specified AMI under the hood.</p> <ul> <li>ec2:DescribeImages</li> <li>ebs:ListSnapshotBlocks</li> <li>ebs:GetSnapshotBlock</li> </ul>"},{"location":"docs/target/vm/#amazon-elastic-block-store-ebs-snapshot","title":"Amazon Elastic Block Store (EBS) Snapshot","text":"<p>You can specify your EBS snapshot ID with the <code>ebs:</code> prefix.</p> <pre><code>$ trivy vm ebs:${your_ebs_snapshot_id}\n</code></pre> <p>Note</p> <p>Public snapshots are not supported because the EBS direct APIs don't support that. See the AWS documentation for the detail.</p>"},{"location":"docs/target/vm/#example_1","title":"Example","text":"<pre><code>$ trivy vm --scanners vuln ebs:snap-0123456789abcdefg\n</code></pre> <p>If you want to scan an EBS Snapshot of non-default setting region, you can set any region via <code>--aws-region</code> option.</p> <pre><code>$ trivy vm --aws-region ap-northeast-1 ebs:ebs-0123456789abcdefg\n</code></pre> <p>The above command takes a while as it calls EBS API and fetches the EBS blocks. If you want to scan the same snapshot several times, you can download the snapshot locally by using coldsnap maintained by AWS. Then, Trivy can scan the local VM image file.</p> <pre><code>$ coldsnap download snap-0123456789abcdefg disk.img\n$ trivy vm ./disk.img\n</code></pre>"},{"location":"docs/target/vm/#required-actions_1","title":"Required Actions","text":"<ul> <li>ebs:ListSnapshotBlocks</li> <li>ebs:GetSnapshotBlock</li> </ul>"},{"location":"docs/target/vm/#scanners","title":"Scanners","text":"<p>Trivy supports VM image scanning for</p> <ul> <li>Vulnerabilities</li> <li>Misconfigurations</li> <li>Secrets</li> <li>Licenses</li> </ul>"},{"location":"docs/target/vm/#vulnerabilities","title":"Vulnerabilities","text":"<p>It is enabled by default. You can simply specify your VM image location. It detects known vulnerabilities in your VM image. See here for the detail.</p> <pre><code>$ trivy vm [YOUR_VM_IMAGE]\n</code></pre> <p>Note</p> <p>Scanning <code>Red Hat</code> has a limitation, see the Red Hat page for details.</p>"},{"location":"docs/target/vm/#misconfigurations","title":"Misconfigurations","text":"<p>It is supported, but it is not useful in most cases. As mentioned here, Trivy mainly supports Infrastructure as Code (IaC) files for misconfigurations. If your VM image includes IaC files such as Kubernetes YAML files or Terraform files, you should enable this feature with <code>--scanners misconfig</code>.</p> <pre><code>$ trivy vm --scanners misconfig [YOUR_VM_IMAGE]\n</code></pre>"},{"location":"docs/target/vm/#secrets","title":"Secrets","text":"<p>It is enabled by default. See here for the detail.</p> <pre><code>$ trivy vm [YOUR_VM_IMAGE]\n</code></pre> <p>Tip</p> <p>The scanning could be faster if you enable only vulnerability scanning (<code>--scanners vuln</code>) because Trivy tries to download only necessary blocks for vulnerability detection.</p>"},{"location":"docs/target/vm/#licenses","title":"Licenses","text":"<p>It is disabled by default. See here for the detail.</p> <pre><code>$ trivy vm --scanners license [YOUR_VM_IMAGE]\n</code></pre>"},{"location":"docs/target/vm/#sbom-generation","title":"SBOM generation","text":"<p>Trivy can generate SBOM for VM images. See here for the detail.</p>"},{"location":"docs/target/vm/#scan-cache","title":"Scan Cache","text":"<p>When scanning AMI or EBS snapshots, it stores analysis results in the cache, using the snapshot ID. Scanning the same snapshot several times skips analysis if the cache is already available.</p> <p>When scanning local files, it doesn't use the cache by default.</p> <p>More details are available in the cache documentation.</p>"},{"location":"docs/target/vm/#supported-architectures","title":"Supported Architectures","text":""},{"location":"docs/target/vm/#virtual-machine-images","title":"Virtual machine images","text":"Image format Support VMDK \u2714 OVA VHD VHDX QCOW2"},{"location":"docs/target/vm/#vmdk-disk-types","title":"VMDK disk types","text":"VMDK disk type Support streamOptimized \u2714 monolithicSparse vmfs vmfsSparse twoGbMaxExtentSparse monolithicFlat twoGbMaxExtentFlat vmfsRaw fullDevice partitionedDevice vmfsRawDeviceMap vmfsPassthroughRawDeviceMap <p>Reference: VMware Virtual Disk Format 1.1.pdf</p>"},{"location":"docs/target/vm/#disk-partitions","title":"Disk partitions","text":"Disk format Support Master boot record (MBR) \u2714 Extended master boot record GUID partition table (GPT) \u2714 Logical volume manager (LVM)"},{"location":"docs/target/vm/#filesystems","title":"Filesystems","text":"Filesystem format Support XFS \u2714 EXT4 \u2714 EXT2/3 \u2714 ZFS"},{"location":"ecosystem/","title":"Ecosystem","text":"<p>Trivy is integrated into many popular tools and applications, so that you can easily add security to your workflow.</p> <p>In this section you will find an aggregation of the different integrations. Integrations are listed as either \"official\" or \"community\". Official integrations are developed by the core Trivy team and supported by it. Community integrations are integrations developed by the community, and collected here for your convenience. For support or questions about community integrations, please contact the original developers.</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"ecosystem/#add-missing-integration","title":"Add missing integration","text":"<p>We are happy to showcase community integrations in this section. To suggest an addition simply make a Pull Request to add the missing integration.</p>"},{"location":"ecosystem/cicd/","title":"CI/CD Integrations","text":""},{"location":"ecosystem/cicd/#azure-devops-official","title":"Azure DevOps (Official)","text":"<p>Azure Devops is Microsoft Azure cloud native CI/CD service.</p> <p>Trivy has a \"Azure Devops Pipelines Task\" for Trivy, that lets you easily introduce security scanning into your workflow, with an integrated Azure Devops UI.</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-azure-pipelines-task</p>"},{"location":"ecosystem/cicd/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions is GitHub's native CI/CD and job orchestration service.</p>"},{"location":"ecosystem/cicd/#trivy-action-official","title":"trivy-action (Official)","text":"<p>GitHub Action for integrating Trivy into your GitHub pipeline</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-action</p>"},{"location":"ecosystem/cicd/#trivy-action-community","title":"trivy-action (Community)","text":"<p>GitHub Action to scan vulnerability using Trivy. If vulnerabilities are found by Trivy, it creates a GitHub Issue.</p> <p>\ud83d\udc49 Get it at: https://github.com/marketplace/actions/trivy-action</p>"},{"location":"ecosystem/cicd/#trivy-github-issues-community","title":"trivy-github-issues (Community)","text":"<p>In this action, Trivy scans the dependency files such as package-lock.json and go.sum in your repository, then create GitHub issues according to the result.</p> <p>\ud83d\udc49 Get it at: https://github.com/marketplace/actions/trivy-github-issues</p>"},{"location":"ecosystem/cicd/#buildkite-plugin-community","title":"Buildkite Plugin (Community)","text":"<p>The trivy buildkite plugin provides a convenient mechanism for running the open-source trivy static analysis tool on your project. </p> <p>\ud83d\udc49 Get it at: https://github.com/equinixmetal-buildkite/trivy-buildkite-plugin</p>"},{"location":"ecosystem/cicd/#dagger-community","title":"Dagger (Community)","text":"<p>Dagger is CI/CD as code that runs anywhere.</p> <p>The Dagger module for Trivy provides functions for scanning container images from registries as well as Dagger Container objects from any Dagger SDK (e.g. Go, Python, Node.js, etc).</p> <p>\ud83d\udc49 Get it at: https://daggerverse.dev/mod/github.com/jpadams/daggerverse/trivy</p>"},{"location":"ecosystem/cicd/#semaphore-community","title":"Semaphore (Community)","text":"<p>Semaphore is a CI/CD service.</p> <p>You can use Trivy in Semaphore for scanning code, containers, infrastructure, and Kubernetes in Semaphore workflow.</p> <p>\ud83d\udc49 Get it at: https://docs.semaphore.io/using-semaphore/recipes/trivy</p>"},{"location":"ecosystem/cicd/#circleci-community","title":"CircleCI (Community)","text":"<p>CircleCI is a CI/CD service.</p> <p>You can use the Trivy Orb for Circle CI to introduce security scanning into your workflow.</p> <p>\ud83d\udc49 Get it at: https://circleci.com/developer/orbs/orb/fifteen5/trivy-orb Source: https://github.com/15five/trivy-orb</p>"},{"location":"ecosystem/cicd/#woodpecker-ci-community","title":"Woodpecker CI (Community)","text":"<p>Example Trivy step in pipeline</p> <pre><code>pipeline:\n  securitycheck:\n    image: aquasec/trivy:latest\n    commands:\n      # use any trivy command, if exit code is 0 woodpecker marks it as passed, else it assumes it failed\n      - trivy fs --exit-code 1 --skip-dirs web/ --skip-dirs docs/ --severity MEDIUM,HIGH,CRITICAL .\n</code></pre> <p>Woodpecker does use Trivy itself so you can see it in use there.</p>"},{"location":"ecosystem/cicd/#concourse-ci-community","title":"Concourse CI (Community)","text":"<p>Concourse CI is a CI/CD service.</p> <p>You can use Trivy Resource in Concourse for scanning containers and introducing security scanning into your workflow. It has capabilities to fail the pipeline, create issues, alert communication channels (using respective resources) based on Trivy scan output.</p> <p>\ud83d\udc49 Get it at: https://github.com/Comcast/trivy-resource/</p>"},{"location":"ecosystem/cicd/#secobserve-github-actions-and-gitlab-templates-community","title":"SecObserve GitHub actions and GitLab templates (Community)","text":"<p>SecObserve GitHub actions and GitLab templates run various vulnerability scanners, providing uniform methods and parameters for launching the tools.</p> <p>The Trivy integration supports scanning Docker images and local filesystems for vulnerabilities as well as scanning IaC files for misconfigurations.</p> <p>\ud83d\udc49 Get it at: https://github.com/MaibornWolff/secobserve_actions_templates</p>"},{"location":"ecosystem/ide/","title":"IDE and developer tools Integrations","text":""},{"location":"ecosystem/ide/#vscode-official","title":"VSCode (Official)","text":"<p>Visual Studio Code is an open source versatile code editor and development environment.</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-vscode-extension</p>"},{"location":"ecosystem/ide/#jetbrains-official","title":"JetBrains (Official)","text":"<p>JetBrains makes IDEs such as Goland, Pycharm, IntelliJ, Webstorm, and more.</p> <p>The Trivy plugin for JetBrains IDEs lets you use Trivy right from your development environment.</p> <p>\ud83d\udc49 Get it at: https://plugins.jetbrains.com/plugin/18690-trivy-findings-explorer</p>"},{"location":"ecosystem/ide/#kubernetes-lens-official","title":"Kubernetes Lens (Official)","text":"<p>Kubernetes Lens is a management application for Kubernetes clusters.</p> <p>Trivy has an extension for Kubernetes Lens that lets you scan Kubernetes workloads and view the results in the Lens UI.</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-operator-lens-extension</p>"},{"location":"ecosystem/ide/#vim-community","title":"Vim (Community)","text":"<p>Vim is a terminal based text editor.</p> <p>Vim plugin for Trivy to install and run Trivy.</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/vim-trivy</p>"},{"location":"ecosystem/ide/#docker-desktop-community","title":"Docker Desktop (Community)","text":"<p>Docker Desktop is an easy way to install Docker container engine on your development machine, and manage it in a GUI .</p> <p>Trivy Docker Desktop extension for scanning container images for vulnerabilities and generating SBOMs</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-docker-extension</p>"},{"location":"ecosystem/ide/#rancher-desktop-community","title":"Rancher Desktop (Community)","text":"<p>Rancher Desktop is an easy way to use containers and Kubernetes on your development machine, and manage it in a GUI.</p> <p>Trivy is natively integrated with Rancher, no installation is needed. More info in Rancher documentation: https://docs.rancherdesktop.io/ui/images/#scanning-images</p>"},{"location":"ecosystem/ide/#lazytrivy-community","title":"LazyTrivy (Community)","text":"<p>A terminal native UI for Trivy</p> <p>\ud83d\udc49 Get it at: https://github.com/owenrumney/lazytrivy</p>"},{"location":"ecosystem/ide/#trivy-vulnerability-explorer-community","title":"Trivy Vulnerability explorer (Community)","text":"<p>Web application that allows to load a Trivy report in json format and displays the vulnerabilities of a single target in an interactive data table</p> <p>\ud83d\udc49 Get it at: https://github.com/dbsystel/trivy-vulnerability-explorer</p>"},{"location":"ecosystem/ide/#trivy-pre-commit-community","title":"Trivy pre-commit (Community)","text":"<p>A trivy pre-commit hook that runs a <code>trivy fs</code> in your git repo before committing, preventing you from committing secrets in the first place.</p> <p>\ud83d\udc49 Get it at: https://github.com/mxab/pre-commit-trivy</p>"},{"location":"ecosystem/ide/#aws-cdk","title":"AWS CDK","text":"<p>The AWS Cloud Development Kit (AWS CDK) is an open-source software development framework to define cloud infrastructure in code and provision it through AWS CloudFormation.</p>"},{"location":"ecosystem/ide/#image-scanner-with-trivy-community","title":"image-scanner-with-trivy (Community)","text":"<p>A CDK Construct Library to scan an image with trivy in CDK codes.</p> <p>\ud83d\udc49 Get it at: https://constructs.dev/packages/image-scanner-with-trivy</p>"},{"location":"ecosystem/ide/#headlamp-plugin-community","title":"Headlamp plugin (Community)","text":"<p>Headlamp is a user-friendly Kubernetes UI focused on extensibility. The Kubescape plugin extends Headlamp with views on Trivy reports.</p> <p>\ud83d\udc49 Get it at: https://github.com/kubebeam/trivy-headlamp-plugin</p>"},{"location":"ecosystem/prod/","title":"Production and cloud Integrations","text":""},{"location":"ecosystem/prod/#kubernetes","title":"Kubernetes","text":"<p>Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.</p>"},{"location":"ecosystem/prod/#trivy-operator-official","title":"Trivy Operator (Official)","text":"<p>Using the Trivy Operator you can install Trivy into a Kubernetes cluster so that it automatically and continuously scan your workloads and cluster for security issues.</p> <p>\ud83d\udc49 Get it at: https://github.com/aquasecurity/trivy-operator</p>"},{"location":"ecosystem/prod/#harbor-official","title":"Harbor (Official)","text":"<p>Harbor is an open source cloud native container and artifact registry.</p> <p>Trivy is natively integrated into Harbor, no installation is needed. More info in Harbor documentation: https://goharbor.io/docs/2.6.0/administration/vulnerability-scanning</p>"},{"location":"ecosystem/prod/#kyverno-community","title":"Kyverno (Community)","text":"<p>Kyverno is a policy management tool for Kubernetes.</p> <p>You can use Kyverno to ensure and enforce that deployed workloads' images are scanned for vulnerabilities.</p> <p>\ud83d\udc49 Get it at: https://neonmirrors.net/post/2022-07/attesting-image-scans-kyverno</p>"},{"location":"ecosystem/prod/#zora-community","title":"Zora (Community)","text":"<p>Zora is an open-source solution that scans Kubernetes clusters with multiple plugins at scheduled times.  </p> <p>Trivy is integrated into Zora as a vulnerability scanner plugin.</p> <p>\ud83d\udc49 Get it at: https://zora-docs.undistro.io/latest/plugins/trivy/</p>"},{"location":"ecosystem/prod/#helmper-community","title":"Helmper (Community)","text":"<p>Helmper is a go program that reads Helm Charts from remote OCI registries and pushes the Helm Charts and the Helm Charts container images to your OCI registries with optional OS level vulnerability patching</p> <p>Trivy is integrated into Helmper as a vulnerability scanner in combination with Copacetic to fix detected vulnerabilities.</p> <p>\ud83d\udc49 Get it at: https://github.com/ChristofferNissen/helmper</p>"},{"location":"ecosystem/reporting/","title":"Reporting","text":""},{"location":"ecosystem/reporting/#defectdojo-community","title":"DefectDojo (Community)","text":"<p>DefectDojo can parse Trivy JSON reports. The parser supports deduplication and auto-close features.</p> <p>\ud83d\udc49 Get it at: https://github.com/DefectDojo/django-DefectDojo</p>"},{"location":"ecosystem/reporting/#secobserve-community","title":"SecObserve (Community)","text":"<p>SecObserve can parse Trivy results as CycloneDX reports and provides an unified overview of vulnerabilities from different sources. Vulnerabilities can be evaluated with manual and rule based assessments.</p> <p>\ud83d\udc49 Get it at: https://github.com/MaibornWolff/SecObserve</p>"},{"location":"ecosystem/reporting/#scan2html-community","title":"Scan2html (Community)","text":"<p>A Trivy plugin that scans and outputs the results to an interactive html file.</p> <p>\ud83d\udc49 Get it at: https://github.com/fatihtokus/scan2html</p>"},{"location":"ecosystem/reporting/#sonarqube-community","title":"SonarQube (Community)","text":"<p>A Trivy plugin that converts JSON report to SonarQube generic issues format.</p> <p>\ud83d\udc49 Get it at: https://github.com/umax/trivy-plugin-sonarqube</p>"},{"location":"ecosystem/reporting/#trivy-streamlit-community","title":"Trivy-Streamlit (Community)","text":"<p>Trivy-Streamlit is a Streamlit application that allows you to quickly parse the results from a Trivy JSON report.</p> <p>\ud83d\udc49 Get it at: https://github.com/mfreeman451/trivy-streamlit</p>"},{"location":"ecosystem/reporting/#trivy-vulnerability-explorer-community","title":"Trivy-Vulnerability-Explorer (Community)","text":"<p>This project is a web application that allows to load a Trivy report in json format and displays the vulnerabilities of a single target in an interactive data table.</p> <p>\ud83d\udc49 Get it at: https://github.com/dbsystel/trivy-vulnerability-explorer</p>"},{"location":"ecosystem/reporting/#plopseccom-community","title":"plopsec.com (Community)","text":"<p>This project is a web application designed to help you visualize Trivy image scan reports. It enriches the data with additional exploitability metrics from EPSS, Metasploit, and Exploit-DB, updated daily.</p> <p>\ud83d\udc49 Get it at: https://plopsec.com | https://github.com/pl0psec/plopsec.com</p>"},{"location":"getting-started/","title":"First steps with Trivy","text":""},{"location":"getting-started/#get-trivy","title":"Get Trivy","text":"<p>Trivy is available in most common distribution channels. The complete list of installation options is available in the Installation page. Here are a few popular examples:</p> <ul> <li>macOS: <code>brew install trivy</code></li> <li>Docker: <code>docker run aquasec/trivy</code></li> <li>Download binary from GitHub Release</li> <li>See Installation for more</li> </ul> <p>Trivy is integrated with many popular platforms and applications. The complete list of integrations is available in the Ecosystem page. Here are a few popular options examples:</p> <ul> <li>GitHub Actions</li> <li>Kubernetes operator</li> <li>VS Code plugin</li> <li>See Ecosystem for more</li> </ul>"},{"location":"getting-started/#general-usage","title":"General usage","text":"<p>Trivy's Command Line Interface pattern follows its major concepts: targets (what you want to scan), and scanners (what you want to scan for):</p> <pre><code>trivy &lt;target&gt; [--scanners &lt;scanner1,scanner2&gt;] &lt;subject&gt;\n</code></pre>"},{"location":"getting-started/#examples","title":"Examples","text":"<p>Scan a container image from registry, with the default scanner which is Vulnerabilities scanner:</p> <pre><code>trivy image python:3.4-alpine\n</code></pre> <p>Scan a local code repository, for vulnerabilities, exposed secrets and misconfigurations:</p> <pre><code>trivy fs --scanners vuln,secret,misconfig /path/to/myproject\n</code></pre> <p>Scan a Kubernetes cluster, with all available scanners, and show a summary report:</p> <pre><code>trivy k8s --report summary cluster\n</code></pre> <p></p> <p>For a more complete introduction, check out the basic Trivy Demo: https://github.com/itaysk/trivy-demo</p>"},{"location":"getting-started/#learn-more","title":"Learn more","text":"<p>Now that you up and ready, here are some resources to help you deepen your knowledge:</p> <ul> <li>Learn more about Trivy's capabilities by exploring the complete documentation.</li> <li>Explore community questions and under GitHub Discussions.</li> <li>Stay up to date by watching for New Releases &amp; Announcements.</li> <li>Follow Trivy on Twitter/X: @aquatrivy</li> <li>Explore and subscribe to our YouTube channel @AquaSecOSS</li> </ul>"},{"location":"getting-started/#want-more-check-out-aqua","title":"Want more? Check out Aqua","text":"<p>If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering. You can find a high level comparison table specific to Trivy users here. In addition, check out the https://aquasec.com website for more information about our products and services. If you'd like to contact Aqua or request a demo, please use this form: https://www.aquasec.com/demo</p>"},{"location":"getting-started/faq/","title":"FAQ","text":""},{"location":"getting-started/faq/#faq","title":"FAQ","text":""},{"location":"getting-started/faq/#how-to-pronounce-the-name-trivy","title":"How to pronounce the name \"Trivy\"?","text":"<p><code>tri</code> is pronounced like trigger, <code>vy</code> is pronounced like envy.</p>"},{"location":"getting-started/faq/#does-trivy-support-x","title":"Does Trivy support X?","text":"<p>Check out the Scanning coverage page.</p>"},{"location":"getting-started/faq/#is-there-a-paid-version-of-trivy","title":"Is there a paid version of Trivy?","text":"<p>If you liked Trivy, you will love Aqua which builds on top of Trivy to provide even more enhanced capabilities for a complete security management offering. You can find a high level comparison table specific to Trivy users here. In addition check out the https://aquasec.com website for more information about our products and services. If you'd like to contact Aqua or request a demo, please use this form: https://www.aquasec.com/demo</p>"},{"location":"getting-started/faq/#how-to-generate-multiple-reports","title":"How to generate multiple reports?","text":"<p>See here.</p>"},{"location":"getting-started/faq/#how-to-run-trivy-under-air-gapped-environment","title":"How to run Trivy under air-gapped environment?","text":"<p>See here.</p>"},{"location":"getting-started/faq/#why-trivy-fs-and-trivy-repo-does-not-scan-jar-files-for-vulnerabilities","title":"Why <code>trivy fs</code> and <code>trivy repo</code> does not scan JAR files for vulnerabilities?","text":"<p>See here.</p>"},{"location":"getting-started/installation/","title":"Installing Trivy","text":"<p>In this section you will find an aggregation of the different ways to install Trivy. Installation options are labeled as either \"Official\" or \"Community\". Official installations are developed by the Trivy team and supported by it. Community installations could be developed by anyone from the Trivy community, and collected here for your convenience. For support or questions about community installations, please contact the original developers.</p> <p>Note</p> <p>If you are looking to integrate Trivy into another system, such as CI/CD, IDE, Kubernetes, etc, please see Ecosystem section to explore integrations of Trivy with other tools.</p>"},{"location":"getting-started/installation/#container-image-official","title":"Container image (Official)","text":"<p>Use one of the official Trivy images:</p> Registry Repository Link Docker Hub <code>docker.io/aquasec/trivy</code> https://hub.docker.com/r/aquasec/trivy GitHub Container Registry (GHCR) <code>ghcr.io/aquasecurity/trivy</code> https://github.com/orgs/aquasecurity/packages/container/package/trivy AWS Elastic Container Registry (ECR) <code>public.ecr.aws/aquasecurity/trivy</code> https://gallery.ecr.aws/aquasecurity/trivy <p>Tip</p> <p>It is advisable to mount a persistent cache dir on the host into the Trivy container.</p> <p>Tip</p> <p>For scanning container images with Trivy, mount the container engine socket from the host into the Trivy container.</p> <p>Example:</p> <pre><code>docker run -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:0.66.0 image python:3.4-alpine\n</code></pre>"},{"location":"getting-started/installation/#github-release-official","title":"GitHub Release (Official)","text":"<ol> <li>Download the file for your operating system/architecture from GitHub Release assets.  </li> <li>Unpack the downloaded archive (<code>tar -xzf ./trivy.tar.gz</code>).</li> <li>Make sure the binary has execution bit turned on (<code>chmod +x ./trivy</code>).</li> </ol>"},{"location":"getting-started/installation/#install-script-official","title":"Install Script (Official)","text":"<p>For convenience, you can use the install script to download and install Trivy from GitHub Release.</p> <pre><code>curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin v0.66.0\n</code></pre>"},{"location":"getting-started/installation/#rhelcentos-official","title":"RHEL/CentOS (Official)","text":"RepositoryRPM <p>Add repository setting to <code>/etc/yum.repos.d</code>.</p> <pre><code>cat &lt;&lt; EOF | sudo tee -a /etc/yum.repos.d/trivy.repo\n[trivy]\nname=Trivy repository\nbaseurl=https://aquasecurity.github.io/trivy-repo/rpm/releases/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://aquasecurity.github.io/trivy-repo/rpm/public.key\nEOF\nsudo yum -y update\nsudo yum -y install trivy\n</code></pre> <pre><code>rpm -ivh https://github.com/aquasecurity/trivy/releases/download/v0.66.0/trivy_0.66.0_Linux-64bit.rpm\n</code></pre>"},{"location":"getting-started/installation/#debianubuntu-official","title":"Debian/Ubuntu (Official)","text":"RepositoryDEB <p>Add repository setting to <code>/etc/apt/sources.list.d</code>.</p> <pre><code>sudo apt-get install wget gnupg\nwget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg &gt; /dev/null\necho \"deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main\" | sudo tee -a /etc/apt/sources.list.d/trivy.list\nsudo apt-get update\nsudo apt-get install trivy\n</code></pre> <pre><code>wget https://github.com/aquasecurity/trivy/releases/download/v0.66.0/trivy_0.66.0_Linux-64bit.deb\nsudo dpkg -i trivy_0.66.0_Linux-64bit.deb\n</code></pre>"},{"location":"getting-started/installation/#homebrew-official","title":"Homebrew (Official)","text":"<p>Homebrew for macOS and Linux.</p> <pre><code>brew install trivy\n</code></pre>"},{"location":"getting-started/installation/#windows-official","title":"Windows (Official)","text":"<ol> <li>Download trivy_x.xx.x_windows-64bit.zip file from releases page.</li> <li>Unzip file and copy to any folder.</li> </ol>"},{"location":"getting-started/installation/#arch-linux-community","title":"Arch Linux (Community)","text":"<p>Arch Linux Package Repository.</p> <pre><code>sudo pacman -S trivy\n</code></pre> <p>References:  - https://archlinux.org/packages/extra/x86_64/trivy/ - https://gitlab.archlinux.org/archlinux/packaging/packages/trivy/-/blob/main/PKGBUILD</p>"},{"location":"getting-started/installation/#opensuse-community","title":"OpenSUSE (Community)","text":"<p>OpenSUSE Package Repository.</p> <pre><code>sudo zypper install trivy\n</code></pre> <p>References:  - https://software.opensuse.org/package/trivy</p>"},{"location":"getting-started/installation/#macports-community","title":"MacPorts (Community)","text":"<p>MacPorts for macOS.</p> <pre><code>sudo port install trivy\n</code></pre> <p>References: - https://ports.macports.org/port/trivy/details/</p>"},{"location":"getting-started/installation/#nixnixos-community","title":"Nix/NixOS (Community)","text":"<p>Nix package manager for Linux and macOS.</p> Command lineConfigurationHome Manager <p><code>nix-env --install -A nixpkgs.trivy</code></p> <pre><code># your other config ...\nenvironment.systemPackages = with pkgs; [\n  # your other packages ...\n  trivy\n];\n</code></pre> <pre><code># your other config ...\nhome.packages = with pkgs; [\n  # your other packages ...\n  trivy\n];\n</code></pre> <p>References: </p> <ul> <li>https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/admin/trivy/default.nix</li> </ul>"},{"location":"getting-started/installation/#freebsd-official","title":"FreeBSD (Official)","text":"<p>Pkg package manager for FreeBSD.</p> <pre><code>pkg install trivy\n</code></pre>"},{"location":"getting-started/installation/#asdfmise-community","title":"asdf/mise (Community)","text":"<p>asdf and mise are quite similar tools you can use to install trivy. See their respective documentation for more information of how to install them and use them:</p> <ul> <li>asdf</li> <li>mise</li> </ul> <p>The plugin used by both tools is developed here</p> asdfmise <p>A basic global installation is shown below, for specific version or/and local version to a directory see \"asdf\" documentation.</p> <pre><code># Install plugin\nasdf plugin add trivy https://github.com/zufardhiyaulhaq/asdf-trivy.git\n\n# Install latest version\nasdf install trivy latest\n\n# Set a version globally (on your ~/.tool-versions file)\nasdf global trivy latest\n\n# Now trivy commands are available\ntrivy --version\n</code></pre> <p>A basic global installation is shown below, for specific version or/and local version to a directory see \"mise\" documentation.</p> <pre><code># Install plugin and install latest version\nmise install trivy@latest\n\n# Set a version globally (on your ~/.tool-versions file)\nmise use -g trivy@latest\n\n# Now trivy commands are available\ntrivy --version\n</code></pre>"},{"location":"getting-started/signature-verification/","title":"Signature Verification","text":"<p>All binaries and container images are signed by Cosign.</p>"},{"location":"getting-started/signature-verification/#verifying-container-image","title":"Verifying container image","text":"<p>Use the following command for keyless verification:</p> <pre><code>cosign verify aquasec/trivy:&lt;version&gt; \\\n--certificate-identity-regexp 'https://github\\.com/aquasecurity/trivy/\\.github/workflows/.+' \\\n--certificate-oidc-issuer \"https://token.actions.githubusercontent.com\"\n</code></pre> <p>You should get the following output</p> <pre><code>Verification for index.docker.io/aquasec/trivy:latest --\nThe following checks were performed on each of these signatures:\n   - The cosign claims were validated\n   - Existence of the claims in the transparency log was verified offline\n   - The code-signing certificate was verified using trusted certificate authority certificates\n\n   ....\n</code></pre>"},{"location":"getting-started/signature-verification/#verifying-binary","title":"Verifying binary","text":"<p>Download the required tarball, associated signature and certificate files from the GitHub Release.</p> <p>Use the following command for keyless verification:</p> <pre><code>cosign verify-blob &lt;path to binray&gt; \\\n--certificate &lt;path to cert&gt; \\\n--signature &lt;path to sig&gt; \\\n--certificate-identity-regexp 'https://github\\.com/aquasecurity/trivy/\\.github/workflows/.+' \\\n--certificate-oidc-issuer \"https://token.actions.githubusercontent.com\"\n</code></pre> <p>You should get the following output</p> <pre><code>Verified OK\n</code></pre>"},{"location":"getting-started/signature-verification/#verifying-a-gpg-signature","title":"Verifying a GPG signature","text":"<p>RPM and Deb packages are also signed by GPG.</p>"},{"location":"getting-started/signature-verification/#verifying-rpm","title":"Verifying RPM","text":"<p>The public key is available at https://aquasecurity.github.io/trivy-repo/rpm/public.key.</p> <p>First, download and import the key:</p> <pre><code>curl https://aquasecurity.github.io/trivy-repo/rpm/public.key \\\n--output pub.key\nrpm --import pub.key\nrpm -q --queryformat \"%{SUMMARY}\\n\" $(rpm -q gpg-pubkey)\n</code></pre> <p>You should get the following output:</p> <pre><code>gpg(trivy)\n</code></pre> <p>Then you can verify the signature:</p> <pre><code>curl -L https://github.com/aquasecurity/trivy/releases/download/&lt;version&gt;/&lt;file name&gt;.rpm \\\n--output trivy.rpm\nrpm -K trivy.rpm\n</code></pre> <p>You should get the following output</p> <pre><code>trivy.rpm: digests signatures OK\n</code></pre>"},{"location":"tutorials/overview/","title":"Tutorials","text":"<p>In this section you can find step-by-step guides that help you accomplish specific tasks.</p> <p>\ud83d\udc48 Please use the side-navigation on the left in order to browse the different topics.</p>"},{"location":"tutorials/overview/#adding-tutorials","title":"Adding tutorials","text":"<p>You are welcome to create tutorials and showcase them here. Tutorials can be either included in here as full articles, or included as external links under external community resources.  Before sending PR, please first create an issue (of kind \"Documentation\") and describe the suggestion, if it's external link or article, and what category it's under.</p> <p>Guidelines:</p> <ul> <li>Focus on a specific use case. Start by clearly describing the use case and when/who it is relevant for.</li> <li>Provide an end-to-end set of instructions. Make sure anyone can easily follow.</li> <li>Describe the expected outcome after each step. Include examples as much as possible.</li> </ul>"},{"location":"tutorials/additional-resources/cks/","title":"CKS preparation resources","text":"<p>The Certified Kubernetes Security Specialist (CKS) Exam is offered by The Linux Foundation. It provides assurance that a CKS has the skills, knowledge, and competence on a broad range of best practices for securing container-based applications and Kubernetes platforms during build, deployment and runtime. CKA certification is required to sit for this exam.</p>"},{"location":"tutorials/additional-resources/cks/#community-resources","title":"Community Resources","text":"<ul> <li>Trivy Video overview (short)</li> <li>Example questions from the exam</li> <li>More example questions</li> <li>CKS exam study guide</li> <li>Docker Image Vulnerabilities &amp; Trivy Image Scanning Demo | K21Academy</li> </ul>"},{"location":"tutorials/additional-resources/cks/#aqua-security-blog-posts-to-learn-more","title":"Aqua Security Blog posts to learn more","text":"<ul> <li>Supply chain security best practices</li> <li>Supply chain attacks</li> </ul> <p>If you know of interesting resources, please start a PR to add those to the list.</p>"},{"location":"tutorials/additional-resources/community/","title":"Community References","text":"<p>Below is a list of additional resources from the community.</p>"},{"location":"tutorials/additional-resources/community/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<ul> <li>Detecting Spring4Shell with Trivy and Grype</li> <li>Scan OS of your EC2 instances with Trivy</li> </ul>"},{"location":"tutorials/additional-resources/community/#cicd-pipelines","title":"CI/CD Pipelines","text":"<ul> <li>How to use Tekton to set up a CI pipeline with OpenShift Pipelines</li> <li>Continuous Container Vulnerability Testing with Trivy</li> <li>Getting Started With Trivy and Jenkins</li> <li>How to use Tekton to set up a CI pipeline with OpenShift Pipelines</li> </ul>"},{"location":"tutorials/additional-resources/community/#misconfiguration-scanning","title":"Misconfiguration Scanning","text":"<ul> <li>Identifying Misconfigurations in your Terraform</li> <li>How to write custom checks for Trivy</li> </ul>"},{"location":"tutorials/additional-resources/community/#sbom-attestation-related","title":"SBOM, Attestation &amp; related","text":"<ul> <li>Attesting Image Scans With Kyverno</li> </ul>"},{"location":"tutorials/additional-resources/community/#trivy-kubernetes","title":"Trivy Kubernetes","text":"<ul> <li>Using Trivy Kubernetes in OVHCloud documentation.</li> </ul>"},{"location":"tutorials/additional-resources/community/#comparisons","title":"Comparisons","text":"<ul> <li>the vulnerability remediation lifecycle of Alpine containers</li> <li>Open Source CVE Scanner Round-Up: Clair vs Anchore vs Trivy</li> <li>Docker Image Security: Static Analysis Tool Comparison \u2013 Anchore Engine vs Clair vs Trivy</li> </ul>"},{"location":"tutorials/additional-resources/community/#evaluations","title":"Evaluations","text":"<ul> <li>Istio evaluating to use Trivy</li> <li>Research Spike: evaluate Trivy for scanning running containers</li> </ul>"},{"location":"tutorials/additional-resources/references/","title":"Additional Resources and Tutorials","text":"<p>Below is a list of additional resources from Aqua Security.</p>"},{"location":"tutorials/additional-resources/references/#announcements","title":"Announcements","text":"<ul> <li>Trivy Vulnerability Scanner Joins the Aqua Open-source Family</li> <li>Trivy Image Vulnerability Scanner Now Under Apache 2.0 License</li> </ul>"},{"location":"tutorials/additional-resources/references/#vulnerability-scanning","title":"Vulnerability Scanning","text":"<ul> <li>Using Trivy to Discover Vulnerabilities in VS Code Projects</li> <li>How does a vulnerability scanner identify packages?</li> <li>Handling Container Vulnerabilities with Open Policy Agent - Teppei Fukuda, Aqua Security</li> </ul>"},{"location":"tutorials/additional-resources/references/#cicd-pipelines","title":"CI/CD Pipelines","text":"<ul> <li>DevSecOps with Trivy and GitHub Actions</li> <li>Find Image Vulnerabilities Using GitHub and Aqua Security Trivy Action</li> </ul>"},{"location":"tutorials/additional-resources/references/#misconfiguration-scanning","title":"Misconfiguration Scanning","text":"<ul> <li>Identifying Misconfigurations in your Terraform</li> </ul>"},{"location":"tutorials/additional-resources/references/#clientserver","title":"Client/Server","text":"<ul> <li>Using Trivy in client server mode</li> </ul>"},{"location":"tutorials/additional-resources/references/#workshops","title":"Workshops","text":"<ul> <li>Trivy Live Demo &amp; Q&amp;A</li> <li>First Steps to Full Lifecycle Security with Open Source Tools - Rory McCune &amp; Anais Urlichs</li> </ul>"},{"location":"tutorials/additional-resources/references/#older-resources","title":"Older Resources","text":"<ul> <li>Webinar: Trivy Open Source Scanner for Container Images \u2013 Just Download and Run!</li> <li>Kubernetes Security through GitOps Best Practices: ArgoCD and Starboard</li> <li>Get started with Kubernetes Security and Starboard</li> </ul>"},{"location":"tutorials/integrations/","title":"Integrations","text":"<p>Scan your image automatically as part of your CI workflow, failing the workflow if a vulnerability is found. When you don't want to fail the test, specify <code>--exit-code 0</code>.</p>"},{"location":"tutorials/integrations/aws-codepipeline/","title":"AWS CodePipeline","text":"<p>See this blog post for an example of using Trivy within AWS CodePipeline.</p>"},{"location":"tutorials/integrations/aws-security-hub/","title":"AWS Security Hub","text":""},{"location":"tutorials/integrations/aws-security-hub/#upload-findings-to-security-hub","title":"Upload findings to Security Hub","text":"<p>In the following example using the template <code>asff.tpl</code>, ASFF file can be generated.</p> <pre><code>$ AWS_REGION=us-west-1 AWS_ACCOUNT_ID=123456789012 trivy image --format template --template \"@contrib/asff.tpl\" -o report.asff golang:1.12-alpine\n</code></pre> <p>ASFF template needs AWS_REGION and AWS_ACCOUNT_ID from environment variables.</p> <p>The Product ARN field follows the pattern below to match what AWS requires for the product resource type.</p> <pre><code>\"ProductArn\": \"arn:aws:securityhub:{{ env \"AWS_REGION\" }}::product/aquasecurity/aquasecurity\",\n</code></pre> <p>In order to upload results you must first run enable-import-findings-for-product like:</p> <pre><code>aws securityhub enable-import-findings-for-product --product-arn arn:aws:securityhub:&lt;AWS_REGION&gt;::product/aquasecurity/aquasecurity\n</code></pre> <p>The findings are formatted for the API with a key of <code>Findings</code> and a value of the array of findings. In order to upload via the CLI the outer wrapping must be removed being left with only the array of findings. The easiest way of doing this is with the jq library using the command </p> <pre><code>cat report.asff | jq '.Findings'\n</code></pre> <p>Then, you can upload it with AWS CLI.</p> <pre><code>$ aws securityhub batch-import-findings --findings file://report.asff\n</code></pre>"},{"location":"tutorials/integrations/aws-security-hub/#note","title":"Note","text":"<p>The batch-import-findings command limits the number of findings uploaded to 100 per request. The best known workaround to this problem is using jq to run the following command</p> <pre><code>jq '.[:100]' report.asff 1&gt; short_report.asff\n</code></pre>"},{"location":"tutorials/integrations/aws-security-hub/#customize","title":"Customize","text":"<p>You can customize asff.tpl</p> <pre><code>$ export AWS_REGION=us-west-1\n$ export AWS_ACCOUNT_ID=123456789012\n$ trivy image --format template --template \"@your-asff.tpl\" -o report.asff golang:1.12-alpine\n</code></pre>"},{"location":"tutorials/integrations/aws-security-hub/#reference","title":"Reference","text":"<p>aws.amazon.com/blogs/security/how-to-build-ci-cd-pipeline-container-vulnerability-scanning-trivy-and-aws-security-hub/</p>"},{"location":"tutorials/integrations/azure-devops/","title":"Azure Devops","text":"<ul> <li>Here is the Azure DevOps Pipelines Task for Trivy</li> </ul>"},{"location":"tutorials/integrations/azure-devops/#use-imagecleaner-to-clean-up-stale-images-on-your-azure-kubernetes-service-cluster","title":"Use ImageCleaner to clean up stale images on your Azure Kubernetes Service cluster","text":"<p>It's common to use pipelines to build and deploy images on Azure Kubernetes Service (AKS) clusters. While great for image creation, this process often doesn't account for the stale images left behind and can lead to image bloat on cluster nodes. These images can present security issues as they may contain vulnerabilities. By cleaning these unreferenced images, you can remove an area of risk in your clusters. When done manually, this process can be time intensive, which ImageCleaner can mitigate via automatic image identification and removal.</p> <p>Vulnerability is determined based on a trivy scan, after which images with a LOW, MEDIUM, HIGH, or CRITICAL classification are flagged. An updated ImageList will be automatically generated by ImageCleaner based on a set time interval, and can also be supplied manually.</p>"},{"location":"tutorials/integrations/azure-devops/#microsoft-defender-for-container-registries-and-trivy","title":"Microsoft Defender for container registries and Trivy","text":"<p>This blog explains how to scan your Azure Container Registry-based container images with the integrated vulnerability scanner when they're built as part of your GitHub workflows.</p> <p>To set up the scanner, you'll need to enable Microsoft Defender for Containers and the CI/CD integration. When your CI/CD workflows push images to your registries, you can view registry scan results and a summary of CI/CD scan results.</p> <p>The findings of the CI/CD scans are an enrichment to the existing registry scan findings by Qualys. Defender for Cloud's CI/CD scanning is powered by Aqua Trivy</p>"},{"location":"tutorials/integrations/bitbucket/","title":"Bitbucket Pipelines","text":"<p>See trivy-pipe for the details.</p>"},{"location":"tutorials/integrations/circleci/","title":"CircleCI","text":"<pre><code>$ cat .circleci/config.yml\njobs:\n  build:\n    docker:\n      - image: docker:stable-git\n    steps:\n      - checkout\n      - setup_remote_docker\n      - run:\n          name: Build image\n          command: docker build -t trivy-ci-test:${CIRCLE_SHA1} .\n      - run:\n          name: Install trivy\n          command: |\n            apk add --update-cache --upgrade curl\n            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      - run:\n          name: Scan the local image with trivy\n          command: trivy image --exit-code 0 --no-progress trivy-ci-test:${CIRCLE_SHA1}\nworkflows:\n  version: 2\n  release:\n    jobs:\n      - build\n</code></pre> <p>Example Repository</p>"},{"location":"tutorials/integrations/github-actions/","title":"GitHub Actions","text":"<ul> <li>Here is the Trivy GitHub Action</li> <li>The Microsoft Azure team have written a container-scan action that uses Trivy and Dockle</li> <li>For full control over the options specified to Trivy, this blog post describes adding Trivy into your own GitHub action workflows </li> </ul>"},{"location":"tutorials/integrations/gitlab-ci/","title":"GitLab CI","text":"<p>GitLab 15.0 includes free integration with Trivy.</p> <p>To configure container scanning with Trivy in GitLab, simply include the CI template in your <code>.gitlab-ci.yml</code> file:</p> <pre><code>include:\n  - template: Security/Container-Scanning.gitlab-ci.yml\n</code></pre> <p>If you're a GitLab 14.x Ultimate customer, you can use the same configuration above.</p> <p>Alternatively, you can always use the example configurations below.</p> <pre><code>stages:\n  - test\n\ntrivy:\n  stage: test\n  image: docker:stable\n  services:\n    - name: docker:dind\n      entrypoint: [\"env\", \"-u\", \"DOCKER_HOST\"]\n      command: [\"dockerd-entrypoint.sh\"]\n  variables:\n    DOCKER_HOST: tcp://docker:2375/\n    DOCKER_DRIVER: overlay2\n    # See https://github.com/docker-library/docker/pull/166\n    DOCKER_TLS_CERTDIR: \"\"\n    IMAGE: trivy-ci-test:$CI_COMMIT_SHA\n    TRIVY_NO_PROGRESS: \"true\"\n    TRIVY_CACHE_DIR: \".trivycache/\"\n  before_script:\n    - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/')\n    - echo $TRIVY_VERSION\n    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -\n  allow_failure: true\n  script:\n    # Build image\n    - docker build -t $IMAGE .\n    # Build report\n    - ./trivy image --exit-code 0 --format template --template \"@/contrib/gitlab.tpl\" -o gl-container-scanning-report.json $IMAGE\n    # Print report\n    - ./trivy image --exit-code 0 --severity HIGH $IMAGE\n    # Fail on severe vulnerabilities\n    - ./trivy image --exit-code 1 --severity CRITICAL $IMAGE\n  cache:\n    paths:\n      - .trivycache/\n  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab Ultimate)\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n</code></pre> <p>Example Repository</p>"},{"location":"tutorials/integrations/gitlab-ci/#gitlab-ci-using-trivy-container","title":"GitLab CI using Trivy container","text":"<p>To scan a previously built image that has already been pushed into the GitLab container registry the following CI job manifest can be used. Note that <code>entrypoint</code> needs to be unset for the <code>script</code> section to work. In case of a non-public GitLab project Trivy additionally needs to authenticate to the registry to be able to pull your application image. Finally, it is not necessary to clone the project repo as we only work with the container image.</p> <pre><code>container_scanning:\n  image:\n    name: docker.io/aquasec/trivy:latest\n    entrypoint: [\"\"]\n  variables:\n    # No need to clone the repo, we exclusively work on artifacts. See\n    # https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy\n    GIT_STRATEGY: none\n    TRIVY_USERNAME: \"$CI_REGISTRY_USER\"\n    TRIVY_PASSWORD: \"$CI_REGISTRY_PASSWORD\"\n    TRIVY_AUTH_URL: \"$CI_REGISTRY\"\n    TRIVY_NO_PROGRESS: \"true\"\n    TRIVY_CACHE_DIR: \".trivycache/\"\n    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG\n  script:\n    - trivy --version\n    # update vulnerabilities db\n    - time trivy image --download-db-only\n    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there\n    - time trivy image --exit-code 0 --format template --template \"@/contrib/gitlab.tpl\"\n        --output \"$CI_PROJECT_DIR/gl-container-scanning-report.json\" \"$FULL_IMAGE_NAME\"\n    # Prints full report\n    - time trivy image --exit-code 0 \"$FULL_IMAGE_NAME\"\n    # Fail on critical vulnerabilities\n    - time trivy image --exit-code 1 --severity CRITICAL \"$FULL_IMAGE_NAME\"\n  cache:\n    paths:\n      - .trivycache/\n  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)\n  artifacts:\n    when:                          always\n    reports:\n      container_scanning:          gl-container-scanning-report.json\n  tags:\n    - docker-runner\n</code></pre>"},{"location":"tutorials/integrations/gitlab-ci/#gitlab-ci-alternative-template","title":"GitLab CI alternative template","text":"<p>Depending on the edition of gitlab you have or your desired workflow, the container scanning template may not meet your needs. As an addition to the above container scanning template, a template for code climate has been included. The key things to update from the above examples are the <code>template</code> and <code>report</code> type. An updated example is below.</p> <pre><code>stages:\n  - test\n\ntrivy:\n  stage: test\n  image: docker:stable\n  services:\n    - name: docker:dind\n      entrypoint: [\"env\", \"-u\", \"DOCKER_HOST\"]\n      command: [\"dockerd-entrypoint.sh\"]\n  variables:\n    DOCKER_HOST: tcp://docker:2375/\n    DOCKER_DRIVER: overlay2\n    # See https://github.com/docker-library/docker/pull/166\n    DOCKER_TLS_CERTDIR: \"\"\n    IMAGE: trivy-ci-test:$CI_COMMIT_SHA\n    TRIVY_NO_PROGRESS: \"true\"\n    TRIVY_CACHE_DIR: \".trivycache/\"\n  before_script:\n    - export TRIVY_VERSION=$(wget -qO - \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/')\n    - echo $TRIVY_VERSION\n    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -\n  allow_failure: true\n  script:\n    # Build image\n    - docker build -t $IMAGE .\n    # Image report\n    - ./trivy image --exit-code 0 --format template --template \"@/contrib/gitlab-codequality.tpl\" -o gl-codeclimate-image.json $IMAGE\n    # Filesystem report\n    - ./trivy filesystem --scanners misconfig,vuln --exit-code 0 --format template --template \"@/contrib/gitlab-codequality.tpl\" -o gl-codeclimate-fs.json .\n    # Combine report\n    - apk update &amp;&amp; apk add jq\n    - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json &gt; gl-codeclimate.json\n  cache:\n    paths:\n      - .trivycache/\n  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)\n  artifacts:\n    paths:\n      - gl-codeclimate.json\n    reports:\n      codequality: gl-codeclimate.json\n</code></pre> <p>Currently gitlab only supports a single code quality report. There is an open feature request to support multiple reports. Until this has been implemented, if you already have a code quality report in your pipeline, you can use <code>jq</code> to combine reports. Depending on how you name your artifacts, it may be necessary to rename the artifact if you want to reuse the name. To then combine the previous artifact with the output of trivy, the following <code>jq</code> command can be used, <code>jq -s 'add' prev-codeclimate.json trivy-codeclimate.json &gt; gl-codeclimate.json</code>.</p>"},{"location":"tutorials/integrations/gitlab-ci/#gitlab-ci-alternative-template-example-report","title":"GitLab CI alternative template example report","text":"<p>You'll be able to see a full report in the GitLab pipeline code quality UI, where filesystem vulnerabilities and misconfigurations include links to the flagged files and image vulnerabilities report the image/os or runtime/library that the vulnerability originates from instead.</p> <p></p>"},{"location":"tutorials/integrations/travis-ci/","title":"Travis CI","text":"<pre><code>$ cat .travis.yml\nservices:\n  - docker\n\nenv:\n  global:\n    - COMMIT=${TRAVIS_COMMIT::8}\n\nbefore_install:\n  - docker build -t trivy-ci-test:${COMMIT} .\n  - export VERSION=$(curl --silent \"https://api.github.com/repos/aquasecurity/trivy/releases/latest\" | grep '\"tag_name\":' | sed -E 's/.*\"v([^\"]+)\".*/\\1/')\n  - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz\n  - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz\nscript:\n  - ./trivy image --exit-code 0 --severity HIGH --no-progress trivy-ci-test:${COMMIT}\n  - ./trivy image --exit-code 1 --severity CRITICAL --no-progress trivy-ci-test:${COMMIT}\ncache:\n  directories:\n    - $HOME/.cache/trivy\n</code></pre> <p>Example Repository</p>"},{"location":"tutorials/kubernetes/cluster-scanning/","title":"Kubernetes Scanning Tutorial","text":""},{"location":"tutorials/kubernetes/cluster-scanning/#prerequisites","title":"Prerequisites","text":"<p>To test the following commands yourself, make sure that you\u2019re connected to a Kubernetes cluster. A simple kind, a Docker-Desktop or microk8s cluster will do. In our case, we\u2019ll use a one-node kind cluster. Pro tip: The output of the commands will be even more interesting if you have some workloads running in your cluster.</p>"},{"location":"tutorials/kubernetes/cluster-scanning/#cluster-scanning","title":"Cluster Scanning","text":"<p>Trivy K8s is great to get an overview of all the vulnerabilities and misconfiguration issues or to scan specific workloads that are running in your cluster. You would want to use the Trivy K8s command either on your own local cluster or in your CI/CD pipeline post deployments.  </p> <p>The <code>trivy k8s</code> command is part of the Trivy CLI.</p> <p>With the following command, we can scan our entire Kubernetes cluster for vulnerabilities and get a summary of the scan:</p> <pre><code>trivy k8s --report=summary\n</code></pre> <p>To get detailed information for all your resources, just replace \u2018summary\u2019 with \u2018all\u2019: </p> <pre><code>trivy k8s --report=all\n</code></pre> <p>However, we recommend displaying all information only in case you scan a specific namespace or resource since you can get overwhelmed with additional details. </p> <p>Furthermore, we can specify the namespace that Trivy is supposed to scan to focus on specific resources in the scan result: </p> <pre><code>trivy k8s --include-namespaces kube-system --report summary\n</code></pre> <p>Again, if you\u2019d like to receive additional details, use the \u2018--report=all\u2019 flag: </p> <pre><code>trivy k8s --include-namespaces kube-system --report all\n</code></pre> <p>Like with scanning for vulnerabilities, we can also filter in-cluster security issues by severity of the vulnerabilities: </p> <pre><code>trivy k8s --severity=CRITICAL --report=summary\n</code></pre> <p>Note that you can use any of the Trivy flags on the Trivy K8s command. </p>"},{"location":"tutorials/kubernetes/cluster-scanning/#trivy-operator","title":"Trivy Operator","text":"<p>The Trivy K8s command is an imperative model to scan resources. We wouldn\u2019t want to manually scan each resource across different environments. The larger the cluster and the more workloads are running in it, the more error-prone this process would become. With the Trivy Operator, we can automate the scanning process after the deployment.  </p> <p>The Trivy Operator follows the Kubernetes Operator Model. Operators automate human actions, and the result of the task is saved as custom resource definitions (CRDs) within your cluster. </p> <p>This has several benefits: </p> <ul> <li> <p>Trivy Operator is installed CRDs in our cluster. As a result, all our resources, including our security scanner and its scan results, are Kubernetes resources. This makes it much easier to integrate the Trivy Operator directly into our existing processes, such as connecting Trivy with Prometheus, a monitoring system. </p> </li> <li> <p>The Trivy Operator will automatically scan your resources every six hours. You can set up automatic alerting in case new critical security issues are discovered. </p> </li> <li> <p>The CRDs can be both machine and human-readable depending on which applications consume the CRDs. This allows for more versatile applications of the Trivy operator. </p> </li> </ul> <p>There are several ways that you can install the Trivy Operator in your cluster. In this guide, we\u2019re going to use the Helm installation.</p> <p>Please follow the Trivy Operator documentation for further information on:</p> <ul> <li>Installation of the Trivy Operator</li> <li>Getting started guide</li> </ul>"},{"location":"tutorials/kubernetes/gitops/","title":"Installing the Trivy-Operator through GitOps","text":"<p>This tutorial shows you how to install the Trivy Operator through GitOps platforms, namely ArgoCD and FluxCD.</p>"},{"location":"tutorials/kubernetes/gitops/#argocd","title":"ArgoCD","text":"<p>Make sure to have ArgoCD installed and running in your Kubernetes cluster.</p> <p>You can either deploy the Trivy Operator through the argocd CLI or by applying a Kubernetes manifest.</p> <p>ArgoCD command: <pre><code>&gt; kubectl create ns trivy-system\n&gt; argocd app create trivy-operator --repo https://github.com/aquasecurity/trivy-operator --path deploy/helm --dest-server https://kubernetes.default.svc --dest-namespace trivy-system\n</code></pre> Note that this installation is directly related to our official Helm Chart. If you want to change any of the value, we'd suggest you to create a separate values.yaml file.</p> <p>Kubernetes manifest <code>trivy-operator.yaml</code>: <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: trivy-operator\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: trivy-operator\n    repoURL: https://aquasecurity.github.io/helm-charts/\n    targetRevision: 0.0.3\n    helm:\n      values: |\n        trivy:\n          ignoreUnfixed: true\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: trivy-system\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre></p> <p>To apply the Kubernetes manifest, if you have the manifest locally, you can use the following command through kubectl: <pre><code>&gt; kubectl apply -f trivy-operator.yaml\n\napplication.argoproj.io/trivy-operator created\n</code></pre></p> <p>If you have the manifest in a Git repository, you can apply it to your cluster through the following command: <pre><code>&gt; kubectl apply -n argocd -f https://raw.githubusercontent.com/AnaisUrlichs/argocd-starboard/main/starboard/argocd-starboard.yaml\n</code></pre> The latter command would allow you to make changes to the YAML manifest that ArgoCD would register automatically.</p> <p>Once deployed, you want to tell ArgoCD to sync the application from the actual state to the desired state: <pre><code>argocd app sync trivy-operator\n</code></pre></p> <p>Now you can see the deployment in the ArgoCD UI. Have a look at the ArgoCD documentation to know how to access the UI.</p> <p></p> <p>Note that ArgoCD is unable to show the Trivy CRDs as synced.</p>"},{"location":"tutorials/kubernetes/gitops/#fluxcd","title":"FluxCD","text":"<p>Make sure to have FluxCD installed and running in your Kubernetes cluster.</p> <p>You can either deploy the Trivy Operator through the Flux CLI or by applying a Kubernetes manifest.</p> <p>Flux command: <pre><code>&gt; kubectl create ns trivy-system\n&gt; flux create source helm trivy-operator --url https://aquasecurity.github.io/helm-charts --namespace trivy-system\n&gt; flux create helmrelease trivy-operator --chart trivy-operator\n  --source HelmRepository/trivy-operator\n  --chart-version 0.0.3\n  --namespace trivy-system\n</code></pre></p> <p>Kubernetes manifest <code>trivy-operator.yaml</code>: <pre><code>apiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: HelmRepository\nmetadata:\n  name: trivy-operator\n  namespace: flux-system\nspec:\n  interval: 60m\n  url: https://aquasecurity.github.io/helm-charts/\n\n---\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: trivy-operator\n  namespace: trivy-system\nspec:\n  chart:\n    spec:\n      chart: trivy-operator\n      sourceRef:\n        kind: HelmRepository\n        name: trivy-operator\n        namespace: flux-system\n      version: 0.10.1\n  interval: 60m\n  values:\n    trivy:\n      ignoreUnfixed: true\n  install:\n    crds: CreateReplace\n    createNamespace: true\n</code></pre></p> <p>You can then apply the file to your Kubernetes cluster: <pre><code>kubectl apply -f trivy-operator.yaml\n</code></pre></p>"},{"location":"tutorials/kubernetes/gitops/#after-the-installation","title":"After the installation","text":"<p>After the install, you want to check that the Trivy operator is running in the trivy-system namespace: <pre><code>kubectl get deployment -n trivy-system\n</code></pre></p>"},{"location":"tutorials/kubernetes/kyverno/","title":"Attesting Image Scans With Kyverno","text":"<p>This tutorial is based on the following blog post by Chip Zoller: Attesting Image Scans With Kyverno</p> <p>This tutorial details </p> <ul> <li>Verify the container image has an attestation with Kyverno</li> </ul>"},{"location":"tutorials/kubernetes/kyverno/#prerequisites","title":"Prerequisites","text":"<ol> <li>A running Kubernetes cluster that kubectl is connected to</li> <li>A Container image signed with Cosign and an attestation generated for a Trivy Vulnerability scan.   Follow this tutorial for more information.</li> </ol>"},{"location":"tutorials/kubernetes/kyverno/#kyverno-policy-to-check-attestation","title":"Kyverno Policy to check attestation","text":"<p>The following policy ensures that the attestation is no older than 168h:</p> <p>vuln-attestation.yaml</p> <pre><code>apiVersion: kyverno.io/v1\nkind: ClusterPolicy\nmetadata:\n  name: check-vulnerabilities\nspec:\n  validationFailureAction: Enforce\n  background: false\n  webhookTimeoutSeconds: 30\n  failurePolicy: Fail\n  rules:\n    - name: checking-vulnerability-scan-not-older-than-one-hour\n      match:\n        any:\n        - resources:\n            kinds:\n              - Pod\n      verifyImages:\n      - imageReferences:\n        - \"*\"\n        attestations:\n        - type: https://cosign.sigstore.dev/attestation/vuln/v1\n          conditions:\n          - all:\n            - key: \"{{ time_since('','{{ metadata.scanFinishedOn }}', '') }}\"\n              operator: LessThanOrEquals\n              value: \"1h\"\n          attestors:\n          - count: 1\n            entries:\n            - keys:\n                publicKeys: |-\n                  -----BEGIN PUBLIC KEY-----\n                  abc\n                  xyz\n                  -----END PUBLIC KEY-----\n</code></pre>"},{"location":"tutorials/kubernetes/kyverno/#apply-the-policy-to-your-kubernetes-cluster","title":"Apply the policy to your Kubernetes cluster","text":"<p>Ensure that you have Kyverno already deployed and running on your cluster -- for instance through he Kyverno Helm Chart.</p> <p>Next, apply the above policy: <pre><code>kubectl apply -f vuln-attestation.yaml\n</code></pre></p> <p>To ensure that the policy worked, we can deploy an example Kubernetes Pod with our container image:</p> <p><pre><code>kubectl run app-signed --image= docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\u00a0\n</code></pre> Note that the image is based on the signing tutorial.</p> <p>Once we apply the deployment, it should pass since our attestation is available: <pre><code>kubectl apply -f deployment.yaml -n app\ndeployment.apps/cns-website created\n</code></pre></p> <p>However, if we try to deploy any other container image, our deployment will fail. We can verify this by replacing the image referenced in the deployment with <code>docker.io/anaisurlichs/cns-website:0.0.5</code> and applying the deployment: <pre><code>kubectl run app-unsigned --image=docker.io/anaisurlichs/cns-website:0.1.1\u00a0\n\nResource: \"apps/v1, Resource=deployments\", GroupVersionKind: \"apps/v1, Kind=Deployment\"\nName: \"cns-website\", Namespace: \"app\"\nfor: \"deployment-two.yaml\": admission webhook \"mutate.kyverno.svc-fail\" denied the request: \n\nresource Deployment/app/cns-website was blocked due to the following policies\n\ncheck-image:\n  autogen-check-image: |\n    failed to verify signature for docker.io/anaisurlichs/cns-website:0.0.5: .attestors[0].entries[0].keys: no matching signatures:\n</code></pre></p>"},{"location":"tutorials/misconfiguration/custom-checks/","title":"Custom Checks with Rego","text":"<p>Trivy can scan configuration files for common security issues (a.k.a IaC misconfiguration scanning). In addition to a comprehensive built in database of checks, you can add your own custom checks. Checks are written in Rego language and the full documentation for checks and customizing them is available here. </p> <p>This tutorial will walk you through writing a custom check in Rego that checks for an issue in a Dockerfile.</p> <p>When you are writing a check, it's important to understand the input to the check. This will be the IaC file that you are scanning; for example, a Kubernetes YAML resource definition, or an AWS JSON CloudFormation, or in our case a Dockerfile.</p> <p>Since Rego is primarily tailored to query JSON objects, all incoming configuration files needs to be first converted to structured objects, which is available to the Rego code as the input variable. This is nothing that users have to do manually in Trivy. Instead, Rego makes it possible to pass in custom Schemas that detail how files are converted. Once Rego has access to a custom Schema, it will know in which format to access configuration files such as a Dockerfile. </p> <p>Here you can find the schemas that define how different configuration files are converted to JSON by Trivy. This tutorial will make use of the dockerfile.json schema. The schema will need to be parsed into your custom check. </p> <p>Users can also use the Schema Explorer to view the structure of the data provided to Rego.</p>"},{"location":"tutorials/misconfiguration/custom-checks/#create-a-rego-file-and-specify-trivy-metadata","title":"Create a Rego file and Specify Trivy metadata","text":"<p>First, create a new <code>.rego</code> file e.g. a <code>docker-check.rego</code> file: <pre><code>touch docker-check.rego\n</code></pre></p> <p>Next, we need to specify metadata about the check. This is information that helps Trivy load and process the check.</p> <pre><code># METADATA\n# title: Verify Image\n# description: Verify Image is allowed to be used and in the right format\n# schemas:\n#   - input: schema[\"dockerfile\"]\n# custom:\n#   id: ID001\n#   severity: MEDIUM\n#   input:\n#     selector: \n#     - type: dockerfile\n</code></pre> <p>Important: The <code>METADATA</code> has to be defined on top of the file.</p> <p>More information on the different fields in the metadata can be found in the Trivy documentation.</p>"},{"location":"tutorials/misconfiguration/custom-checks/#package-and-imports","title":"Package and imports","text":"<pre><code>package custom.dockerfile.ID001\n\nimport future.keywords.in\n</code></pre> <p>Every Rego check has a package name. In our case, we will call it <code>custom.dockerfile.ID001</code> to avoid confusion between custom checks and built-in checks. The group name <code>dockerfile</code> has no effect on the package name. Note that each package has to contain only one check. However, we can pass multiple checks into our Trivy scan.  The first keyword of the package, in this case <code>custom</code>, will be reused in the <code>trivy</code> command as the <code>--namespace</code>.</p>"},{"location":"tutorials/misconfiguration/custom-checks/#allowed-data","title":"Allowed data","text":"<p>The check that we are setting up compares the container images used in the Dockerfile with a list of white-listed container images. Thus, we need to add the images that are allowed to be used in the Dockerfile to our check. In our case, we will store them in an array of arrays:</p> <pre><code>allowed_images :=  {\n    [\"node:21-alpine3.19\", \"as\", \"build-deps\"],\n    [\"nginx:1.2\"]\n}\n</code></pre>"},{"location":"tutorials/misconfiguration/custom-checks/#select-the-images-that-are-used-in-the-dockerfile","title":"Select the images that are used in the Dockerfile","text":"<p>Next, we need to iterate over the different commands in our Dockerfile and identify the commands that provide the base container images:</p> <pre><code>deny[msg] {\n    input.Stages[m].Commands[l].Cmd == \"from\"\n    val := input.Stages[m].Commands[l].Value\n    not val in allowed_images\n    msg := sprintf(\"The container image '%s' used in the Dockerfile is not allowed\", val)\n}\n</code></pre> <p>Let's look at the check line by line:</p> <ol> <li>The rule should always be <code>deny</code> in the Trivy Rego checks</li> <li><code>input.Stages[m].Commands[l].Cmd</code> <code>input</code> allows us to access the different commands in the Dockerfile. We need to access the commands that use \"FROM\". Every command will be converted to lowercase.</li> <li><code>val := input.Stages[m].Commands[l].Value</code> accesses the value of the <code>FROM</code> command and stores it in <code>val</code></li> <li><code>not val in allowed_images</code> checks whether val is not part of our allowed images list; this part of the check relies on the import statement</li> <li>In case our check fails, the <code>msg</code> will be printed with the image name used in <code>val</code> </li> </ol> <p>Note that Rego</p> <ul> <li>uses <code>AND</code> automatically to combine conditions in this check</li> <li>automatically iterates through the array of commands in the Dockerfile and allowed images </li> </ul>"},{"location":"tutorials/misconfiguration/custom-checks/#run-the-check-in-a-trivy-misconfiguration-scan","title":"Run the check in a Trivy misconfiguration scan","text":"<p>Ensure that you have Trivy installed and run the following command:</p> <pre><code>trivy fs --scanners misconf --config-check ./docker-check.rego --namespaces custom ./Dockerfile\n</code></pre> <p>Please replace:</p> <ul> <li><code>./docker-check.rego</code> with the file path to your check</li> <li><code>custom</code> should be replaced with your package name if different</li> <li><code>./Dockerfile</code> is the path to the Dockerfile that should be scanned</li> </ul> <p>Note:  If you define custom packages, you have to specify the package prefix via <code>--namespaces</code> option. In our case, we called the custom package <code>custom</code>.</p>"},{"location":"tutorials/misconfiguration/custom-checks/#resources","title":"Resources","text":"<ul> <li>Rego provides a long list of courses that can be useful in writing more complex checks</li> <li>The Rego documentation provides detailed information on the different types, iterations etc.</li> <li>Have a look at the built-in checks for Trivy for inspiration on how to write custom checks.</li> </ul>"},{"location":"tutorials/misconfiguration/terraform/","title":"Scanning Terraform files with Trivy","text":"<p>This tutorial is focused on ways Trivy can scan Terraform IaC configuration files. </p> <p>A video tutorial on Terraform Misconfiguration scans can be found on the Aqua Open Source YouTube account.</p> <p>A note to tfsec users  We have been consolidating all of our scanning-related efforts in one place, and that is Trivy. You can read more on the decision in the tfsec discussions.</p>"},{"location":"tutorials/misconfiguration/terraform/#trivy-config-command","title":"Trivy Config Command","text":"<p>Terraform configuration scanning is available as part of the <code>trivy config</code> command. This command scans all configuration files for misconfiguration issues. You can find the details within misconfiguration scans in the Trivy documentation. </p> <p>Command structure:  <pre><code>trivy config &lt;any flags you want to use&gt; &lt;file or directory that you would like to scan&gt; \n</code></pre></p> <p>The <code>trivy config</code> command can scan Terraform configuration, CloudFormation, Dockerfile, Kubernetes manifests, and Helm Charts for misconfiguration. Trivy will compare the configuration found in the file with a set of best practices.  </p> <ul> <li>If the configuration is following best practices, the check will pass,  </li> <li>If the configuration does not define the resource of some configuration, Trivy will assume the default configuration for the resource creation is used. In this case, the check might fail.</li> <li>If the configuration that has been defined does not follow best practices, the check will fail.  </li> </ul>"},{"location":"tutorials/misconfiguration/terraform/#prerequisites","title":"Prerequisites","text":"<p>Install Trivy on your local machines. The documentation provides several different installation options.  This tutorial will use this example Terraform tutorial for terraform misconfiguration scanning with Trivy. </p> <p>Git clone the tutorial and cd into the directory:  <pre><code>git clone git@github.com:Cloud-Native-Security/trivy-demo.git\ncd bad_iac/terraform\n</code></pre> In this case, the folder only contains Terraform configuration files. However, you could scan a directory that contains several different configurations e.g. Kubernetes YAML manifests, Dockerfile, and Terraform. Trivy will then detect the different configuration files and apply the right rules automatically. </p>"},{"location":"tutorials/misconfiguration/terraform/#different-types-of-trivy-config-scans","title":"Different types of <code>trivy config</code> scans","text":"<p>Below are several examples of how the trivy config scan can be used. </p> <p>General Terraform scan with trivy:  <pre><code>trivy config &lt;specify the directory&gt; \n</code></pre></p> <p>So if we are already in the directory that we want to scan:  <pre><code>trivy config ./ \n</code></pre></p>"},{"location":"tutorials/misconfiguration/terraform/#specify-the-scan-format","title":"Specify the scan format","text":"<p>The <code>--format</code> flag changes the way that Trivy displays the scan result: </p> <p>JSON:  <pre><code>trivy config -f json terraform-infra \n</code></pre></p> <p>Sarif:  <pre><code>trivy config -f sarif terraform-infra \n</code></pre></p>"},{"location":"tutorials/misconfiguration/terraform/#specifying-the-output-location","title":"Specifying the output location","text":"<p>The <code>--output</code> flag specifies the file location in which the scan result should be saved: </p> <p>JSON:  <pre><code>trivy config -f json -o example.json terraform-infra \n</code></pre></p> <p>Sarif:  <pre><code>trivy config -f sarif -o example.sarif terraform-infra \n</code></pre></p>"},{"location":"tutorials/misconfiguration/terraform/#filtering-by-severity","title":"Filtering by severity","text":"<p>If you are presented with lots and lots of misconfiguration across different files, you might want to filter or the misconfiguration with the highest severity: </p> <pre><code>trivy config --severity CRITICAL, MEDIUM terraform-infra \n</code></pre>"},{"location":"tutorials/misconfiguration/terraform/#passing-tftfvars-files-into-trivy-config-scans","title":"Passing tf.tfvars files into <code>trivy config</code> scans","text":"<p>You can pass terraform values to Trivy to override default values found in the Terraform HCL code. More information are provided in the documentation. </p> <pre><code>trivy config --tf-vars terraform.tfvars ./\n</code></pre>"},{"location":"tutorials/misconfiguration/terraform/#custom-checks","title":"Custom Checks","text":"<p>We have lots of examples in the documentation on how you can write and pass custom Rego checks into terraform misconfiguration scans.</p>"},{"location":"tutorials/misconfiguration/terraform/#secret-and-vulnerability-scans","title":"Secret and vulnerability scans","text":"<p>The <code>trivy config</code> command does not perform secrete and vulnerability checks out of the box. However, you can specify as part of your <code>trivy fs</code> scan that you would like to scan you terraform files for exposed secrets and misconfiguraction through the following flags: </p> <pre><code>trivy fs --scanners secret,misconfig ./\n</code></pre> <p>The <code>trivy config</code> command is a sub-command of the <code>trivy fs</code> command. You can learn more about this command in the documentation. </p>"},{"location":"tutorials/misconfiguration/terraform/#scanning-terraform-plan-files","title":"Scanning Terraform Plan files","text":"<p>Instead of scanning your different Terraform resources individually, you could also scan your Terraform Plan file before it is deployed for misconfiguration. This will give you insights into any misconfiguration of your resources as they would become deployed. Here is the link to the documentation.</p> <p>Note that you need to be able to create a terraform init and plan without any errors. </p>"},{"location":"tutorials/misconfiguration/terraform/#using-trivy-in-your-cicd-pipeline","title":"Using Trivy in your CI/CD pipeline","text":"<p>Similar to tfsec, Trivy can be used either on local developer machines or integrated into your CI/CD pipeline. There are several steps available for different pipelines, including GitHub Actions, Circle CI, GitLab, Travis and more in the tutorials section of the documentation: https://trivy.dev/latest/tutorials/integrations/ </p>"},{"location":"tutorials/shell/shell-completion/","title":"Enable shell completion","text":"<p>Below is example steps to enable shell completion feature for <code>trivy</code> cli:</p>"},{"location":"tutorials/shell/shell-completion/#1-know-your-current-shell","title":"1. Know your current shell","text":"<pre><code>$ echo $SHELL\n/bin/zsh # For this example it is zsh, but will be vary depend on your $SHELL, maybe /bin/bash or /bin/fish\n</code></pre>"},{"location":"tutorials/shell/shell-completion/#2-run-completion-command-to-get-sub-commands","title":"2. Run <code>completion</code> command to get sub-commands","text":"<pre><code>$ trivy completion zsh -h\nGenerate the autocompletion script for the zsh shell.\n\nIf shell completion is not already enabled in your environment you will need\nto enable it.  You can execute the following once:\n\n    echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n\nTo load completions in your current shell session:\n\n    source &lt;(trivy completion zsh); compdef _trivy trivy\n\nTo load completions for every new session, execute once:\n\n#### Linux:\n\n    trivy completion zsh &gt; \"${fpath[1]}/_trivy\"\n\n#### macOS:\n\n    trivy completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_trivy\n\nYou will need to start a new shell for this setup to take effect.\n</code></pre>"},{"location":"tutorials/shell/shell-completion/#3-run-the-sub-commands-following-the-instruction","title":"3. Run the sub-commands following the instruction","text":"<pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\nsource &lt;(trivy completion zsh); compdef _trivy trivy\ntrivy completion zsh &gt; \"${fpath[1]}/_trivy\"\n</code></pre>"},{"location":"tutorials/shell/shell-completion/#4-start-a-new-shell-and-you-can-see-the-shell-completion","title":"4. Start a new shell and you can see the shell completion","text":"<pre><code>$ trivy [tab]\ncompletion  -- Generate the autocompletion script for the specified shell\nconfig      -- Scan config files for misconfigurations\nfilesystem  -- Scan local filesystem\nhelp        -- Help about any command\nimage       -- Scan a container image\nkubernetes  -- scan kubernetes cluster\nmodule      -- Manage modules\nplugin      -- Manage plugins\nrepository  -- Scan a repository\nrootfs      -- Scan rootfs\nsbom        -- Scan SBOM for vulnerabilities\nserver      -- Server mode\nversion     -- Print the version\n</code></pre>"},{"location":"tutorials/signing/vuln-attestation/","title":"Vulnerability Scan Record Attestation","text":"<p>This tutorial details how to</p> <ul> <li>Scan container images for vulnerabilities</li> <li>Generate an attestation, using Cosign, with and without generating a separate key pair</li> </ul>"},{"location":"tutorials/signing/vuln-attestation/#prerequisites","title":"Prerequisites","text":"<ol> <li>Trivy CLI installed</li> <li>Cosign CLI installed</li> <li>Ensure that you have access to a container image in a remote container registry that you own/within your account. In this tutorial, we will use DockerHub.</li> </ol>"},{"location":"tutorials/signing/vuln-attestation/#scan-container-image-for-vulnerabilities","title":"Scan Container Image for vulnerabilities","text":"<p>Scan your container image for vulnerabilities and save the scan result to a scan.json file: <pre><code>trivy image --ignore-unfixed --format cosign-vuln --output scan.json DockerHubID/imagename:imagetag\n</code></pre></p> <p>For example: <pre><code>trivy image --ignore-unfixed --format cosign-vuln --output scan.json anaisurlichs/signed-example:0.1\n</code></pre></p> <ul> <li><code>--ignore-unfixed</code>: Ensures only the vulnerabilities, which have a already a fix available, are displayed</li> <li><code>--output scan.json</code>: The scan output is saved to a scan.json file instead of being displayed in the terminal.</li> </ul> <p>Note: Replace the container image with the container image that you want to scan.</p>"},{"location":"tutorials/signing/vuln-attestation/#option-1-signing-and-generating-an-attestation-without-new-key-pair","title":"Option 1: Signing and Generating an attestation without new key pair","text":""},{"location":"tutorials/signing/vuln-attestation/#signing","title":"Signing","text":"<p>Sign the container image: <pre><code>cosign sign DockerHubID/imagename@imageSHA\n</code></pre></p> <p>The <code>imageSHA</code> can be obtained through the following docker command: <pre><code>docker image ls --digests\n</code></pre> The SHA will be displayed next to the image name and tag.</p> <p>Note that it is better practice to sign the image SHA rather than the tag as the SHA will remain the same for the particular image that we have signed.</p> <p>For example: <pre><code>cosign sign docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\n</code></pre></p>"},{"location":"tutorials/signing/vuln-attestation/#attestation","title":"Attestation","text":"<p>The following command generates an attestation for the vulnerability scan and uploads it to the container image used: <pre><code>cosign attest --predicate scan.json --type vuln docker.io/DockerHubID/imagename:imageSHA\n</code></pre></p> <p>For example: <pre><code>cosign attest --predicate scan.json --type vuln docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\n</code></pre></p> <p>Note: Replace the container image with the container image that you would like to scan.</p> <p>Next, Sigstore will ask you to verify with an account -- Microsoft, GitHub, or Google.</p> <p>Once done, the user will be provided with a certificate in the terminal where they ran the command. Example certificate: <pre><code>-----BEGIN CERTIFICATE-----\nMIIC1TCCAlygAwIBAgIUfSXI7xTWSLq4nuygd8YPuhPZlEswCgYIKoZIzj0EAwMw\nNzEVMBMGA1UEChMMc2lnc3RvcmUuZGV2MR4wHAYDVQQDExVzaWdzdG9yZS1pbnRl\ncm1lZGlhdGUwHhcNMjQwMTExMTMzODUzWhcNMjQwMTExMTM0ODUzWjAAMFkwEwYH\nKoZIzj0CAQYIKoZIzj0DAQcDQgAETcUNnK76mfo9G3j1c7NN6Vcn6yQPDX5rd3QB\nunkHs1Uk59CWv3qm6sUyRNYaATs9zdHAZqLck8G4P/Pj7+GzCKOCAXswggF3MA4G\n........\n-----END CERTIFICATE-----\n</code></pre></p>"},{"location":"tutorials/signing/vuln-attestation/#option-2-signing-and-generating-an-attestation-with-a-new-cosign-key-pair","title":"Option 2: Signing and Generating an attestation with a new Cosign key pair","text":"<p>To generate an attestation for the container image with a separate key pair, we can use Cosign to generate a new key pair: <pre><code>cosign generate-key-pair\u00a0\n</code></pre></p> <p>This will generate a <code>cosign.key</code> and a <code>cosign.pub</code> file. The <code>cosign.key</code> file is your private key that should be kept confidential as it is used to sign artefacts. However, the <code>cosign.pub</code> file contains the information of the corresponding public key. This key can be used by third parties to verify the attestation -- basically that this person who claims to have signed the attestation actually is the one who signed it. </p>"},{"location":"tutorials/signing/vuln-attestation/#signing_1","title":"Signing","text":"<p>Sign the container image: <pre><code>cosign sign --key cosign.key docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\n</code></pre></p>"},{"location":"tutorials/signing/vuln-attestation/#attestation_1","title":"Attestation","text":"<p>To generate the attestation with the specific key pairs, run the following command: <pre><code>cosign attest --key cosign.key --type vuln --predicate scan.json docker.io/anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\u00a0\n</code></pre></p>"},{"location":"tutorials/signing/vuln-attestation/#verify-the-attestation","title":"Verify the attestation","text":""},{"location":"tutorials/signing/vuln-attestation/#option-1-no-separate-key-pair","title":"Option 1 -- No separate key pair","text":"<p>If you have not generated a key pair but received a certificate after the container image was signed, use the following command to verify the attestation:</p> <pre><code>cosign verify-attestation --type vuln --certificate-identity Email-used-to-sign  --certificate-oidc-issuer='the-issuer-used' docker.io/DockerHubID/imagename:imageSHA\n</code></pre> <p>For example, the command could be like this: <pre><code>cosign verify-attestation --type vuln --certificate-identity urlichsanais@gmail.com  --certificate-oidc-issuer='https://github.com/login/oauth' anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\n</code></pre></p>"},{"location":"tutorials/signing/vuln-attestation/#option-2-separate-key-pair","title":"Option 2 -- Separate key pair","text":"<p>If you have used a new cosign key pair, the attestation can be verified through the following command: <pre><code>cosign verify-attestation --key cosign.pub --type vuln anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd\u00a0\n</code></pre></p> Output  The output should look similar to the following: <pre><code>Verification for anaisurlichs/signed-example@sha256:c5911ac313e0be82a740bd726dc290e655800a9588424ba4e0558c705d1287fd --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - Existence of the claims in the transparency log was verified offline\n  - The signatures were verified against the specified public key\n{\"payloadType\":\"application/vnd.in-toto+json\",\"payload\":\n</code></pre>"},{"location":"tutorials/signing/vuln-attestation/#more-information","title":"More information","text":"<p>See here for more details.</p>"}]}